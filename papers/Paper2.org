#+TITLE: 3-for-1 Monadic Notation: Do-it-yourself module types
#+Subtitle: ---ICFP Deadline: March 3, 2020---
#+DESCRIPTION: Paper for ICFP 2020.
#+AUTHOR: Musa Al-hassy, Jacques Carette, Wolfram Kahl
#+EMAIL: alhassy@gmail.com
#+OPTIONS: toc:nil d:nil author:nil title:nil
#+PROPERTY: header-args :tangle no :comments link
#+TODO: TODO | OLD LaTeX README Remarks space
#+MACRO: PF \textsf{PackageFormer}
#+property: header-args :tangle paper2.agda :comments link

:push_all_remotely:
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-packages-alist nil)
(setq org-latex-listings nil)
(setq org-latex-pdf-process
      '(;; "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
        "pdflatex -output-directory %o %f"
        "biber %b"
        "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
        "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
        ))

(add-to-list 'org-src-lang-modes '("agda2" . haskell))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-latex-compiler "pdflatex")
(setq-default TeX-engine 'default)

(setq org-latex-listings nil)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))

(org-latex-export-to-pdf)
#+END_SRC

#+RESULTS:
: /Users/musa/thesis-proposal/papers/Paper2.pdf

:End:

* README COMMENT Dependencies of this org file

In the source blocks below, go into each one and press C-c C-c
to have it executed. Some ‚Äòresults‚Äô will be echoed into the buffer
if everything went well.

Rather than executing the following blocks each time you edit this file,
consider adding them to your Emacs [[https://alhassy.github.io/init/][configuration file]].

 + org-mode :: This particular markup is called org-mode.

     Let's obtain Org-mode along with the extras that allow us to ignore
     heading names, but still utilise their contents --e.g., such as a heading
     named ‚Äòpreamble‚Äô that contains org-mode setup for a file.
     #+begin_src emacs-lisp
;; first we get a handy-dandy package manager

(require 'package)
(setq package-archives '(("org"       . "https://orgmode.org/elpa/")
                         ("gnu"       . "https://elpa.gnu.org/packages/")
                         ("melpa"     . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ))
(package-initialize)

(package-refresh-contents)

(package-install 'use-package)
(require 'use-package)
(setq use-package-always-ensure t)

;; then we get the org-mode goodness

(use-package org
  :ensure org-plus-contrib
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src

     This lets us use the ~:ignore:~ tag on headlines you'd like to have ignored,
     while not ignoring their content --see [[https://emacs.stackexchange.com/a/17677/10352][here]].

     - Use the ~:noexport:~ tag to omit a headline /and/ its contents.

 + minted & bib :: Source blocks obtain colour.

     Execute the following for bib ref as well as minted
     Org-mode uses the Minted package for source code highlighting in PDF/LaTeX
     --which in turn requires the pygmentize system tool.
     #+BEGIN_SRC emacs-lisp
     (setq org-latex-listings 'minted
           org-latex-packages-alist '(("" "minted"))
           org-latex-pdf-process
           '("pdflatex -shell-escape -output-directory %o %f"
             ;; "biber %b"
             "bibtex %b"
             "pdflatex -shell-escape -output-directory %o %f"
             "pdflatex -shell-escape -output-directory %o %f")
     )
     #+END_SRC

     #+RESULTS:
     | pdflatex -shell-escape -output-directory %o %f | bibtex %b | pdflatex -shell-escape -output-directory %o %f | pdflatex -shell-escape -output-directory %o %f |

  # Enable the following to have small-font code blocks.
  # LATEX_HEADER: \RequirePackage{fancyvrb}
  # LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}

 + acmart :: Enable acmart latex class.

   #+NAME: make-acmart-class
   #+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
             '("acmart" "\\documentclass{acmart}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

 (message "acmart has been loaded")
 #+END_SRC

 #+RESULTS: make-acmart-class
 : acmart has been loaded

  The GPCE 19 proceedings team needs us to submit the acmart.cls file along
  with our sources. So, let's bring that to our current directory.
#+BEGIN_SRC shell
(shell-command (s-collapse-whitespace (format "cp %s ."
                       (shell-command-to-string "kpsewhich acmart.cls"))))
#+END_SRC

#+RESULTS:
: 126

   The ‚Äòfooter‚Äô at the end of this file currently executes only this code block for you
   ---if you enable the local vars. You can easily tweak it to execute the other blocks,
   if you like.

 + org-ref :: [[https://github.com/jkitchin/org-ref][An exquisite system]] for handling references.

    If everything works, the following entity will display useful data
    when the mouse hovers over it (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà If you click on it, then you're
    in for a lot of super neat stuff, such as searching for the pdf online!

    cite:agda_overview

    #+BEGIN_SRC emacs-lisp
(use-package org-ref :demand t)

;; Files to look at when no ‚Äú‚ï≤bibliography{‚ãØ}‚Äù is not present in a file.
;; Most useful for non-LaTeX files.
(setq reftex-default-bibliography '("References.bib"))

(use-package helm-bibtex :demand t)
;; If you use helm-bibtex as the citation key completion method you should set these variables too.

(setq bibtex-completion-bibliography "References.bib")
#+END_SRC

  Execute ~M-x helm-bibtex~ and, say, enter ~agda~ and you will be presented with
  all the entries in the bib database that mention ‚Äòagda‚Äô. Super cool stuff.

* LaTeX setup                                                        :ignore:

#+latex_class_options: [10pt]

  # Visible editorial comments.
  # LATEX_HEADER: \usepackage{edcomms}
  # LATEX_HEADER: \edcommsfalse

  #+latex_header: \usepackage[font=itshape]{quoting}
  # Use quoting environment

** Document class options                                            :ignore:
  #+LATEX_CLASS: acmart
  # latex_class_options: [sigplan,screen]
  # latex_class_options: [sigplan,review,anonymous]
  # #+latex_class_options: [sigplan,review]
  # latex_class_options: [acmsmall,review,anonymous]

** Letter size and no page numbers or footers :ignore:
  # Letter-Size Paper Format, defaults
  #+latex_header: \pdfpagewidth=8.5in
  #+latex_header: \pdfpageheight=11in

  # switch off page numbering, ‚Äúfolios‚Äù
  # latex_header: \pagenumbering{gobble}

  # LATEX: \settopmatter{printccs=true, printfolios=false}

** Unicode & hyperlinks :ignore:
  # Dark green colour for links.
  #+LATEX_HEADER: \usepackage{color}
  #+LATEX_HEADER: \definecolor{darkgreen}{rgb}{0.0, 0.3, 0.1}
  #+LATEX_HEADER: \hypersetup{colorlinks,linkcolor=darkgreen,citecolor=darkgreen,urlcolor=darkgreen}

  #+LATEX_HEADER: \usepackage{../CheatSheet/UnicodeSymbols}

  #+LATEX_HEADER: \DeclareMathOperator{\VCCompose}{\longrightarrow\hspace{-3ex}\oplus\;}
  #+LATEX_HEADER: \newunicodechar{‚ü¥}{\ensuremath{\!\!\VCCompose}}
  #+LATEX_HEADER: \newunicodechar{ùìã}{\ensuremath{\!\!v}}
  #+LATEX_HEADER: \newunicodechar{ùí±}{\ensuremath{\mathcal{V}}}
  #+LATEX_HEADER: \newunicodechar{Œ±}{\ensuremath{\alpha}}

  #+LATEX_HEADER: \newunicodechar{‚Ñì}{\ensuremath{\ell}}
  #+LATEX_HEADER: \newunicodechar{‚Äµ}{\ensuremath{`}}
  #+LATEX_HEADER: \newunicodechar{‚Üù}{\ensuremath{\longrightarrow}}
  #+LATEX_HEADER: \newunicodechar{‚áä}{\ensuremath{\downarrow\!\downarrow}}

  # ùëõùëéùëöùëí
  #+LATEX_HEADER: \newunicodechar{ùëõ}{\ensuremath{n}}
  #+LATEX_HEADER: \newunicodechar{ùëé}{\ensuremath{a}}
  #+LATEX_HEADER: \newunicodechar{ùëö}{\ensuremath{m}}
  #+LATEX_HEADER: \newunicodechar{ùëí}{\ensuremath{e}}

  #+LATEX_HEADER: \newunicodechar{‚Å∞}{\ensuremath{^0}}
  #+LATEX_HEADER: \newunicodechar{‚Åø}{\ensuremath{^n}}
  #+LATEX_HEADER: \newunicodechar{¬≥}{\ensuremath{^3}}

  #+LATEX_HEADER: \newunicodechar{Œû}{\ensuremath{\Xi}}
  #+LATEX_HEADER: \newunicodechar{Œæ}{\ensuremath{\xi}}

  #+LATEX_HEADER: \newunicodechar{ùîª}{\ensuremath{\textbb{D}}}
  #+LATEX_HEADER: \newunicodechar{‚ÑÇ}{\ensuremath{\textbb{C}}}
  #+LATEX_HEADER: \newunicodechar{ùïÑ}{\ensuremath{\textbb{M}}}
  #+LATEX_HEADER: \newunicodechar{‚Ñô}{\ensuremath{\textbb{P}}}
  #+LATEX_HEADER: \newunicodechar{ùüò}{\ensuremath{\textbb{0}}}
  #+LATEX_HEADER: \newunicodechar{ùüô}{\ensuremath{\textbb{1}}}

  #+LATEX_HEADER: \newunicodechar{ùë∑}{\ensuremath{\textbf{P}}}
  #+LATEX_HEADER: \newunicodechar{ùë≠}{\ensuremath{\textbf{F}}}
  #+LATEX_HEADER: \newunicodechar{ùëØ}{\ensuremath{\textbf{H}}}

** COMMENT CCSXML and Keywords                                               :ignore:
   # This must be /before/ maketitle!
   #+begin_export latex
 %%
 %% The code below is generated by the tool at http://dl.acm.org/ccs.cfm.

 \begin{CCSXML}
 <ccs2012>
 <concept>
 <concept_id>10011007.10011006.10011008.10011009.10011019</concept_id>
 <concept_desc>Software and its engineering~Extensible languages</concept_desc>
 <concept_significance>500</concept_significance>
 </concept>
 <concept>
 <concept_id>10011007.10011006.10011008.10011024.10011031</concept_id>
 <concept_desc>Software and its engineering~Modules / packages</concept_desc>
 <concept_significance>500</concept_significance>
 </concept>
 <concept>
 <concept_id>10011007.10011006.10011008.10011009.10011012</concept_id>
 <concept_desc>Software and its engineering~Functional languages</concept_desc>
 <concept_significance>300</concept_significance>
 </concept>
 <concept>
 <concept_id>10011007.10011006.10011008.10011024.10011025</concept_id>
 <concept_desc>Software and its engineering~Polymorphism</concept_desc>
 <concept_significance>300</concept_significance>
 </concept>
 <concept>
 <concept_id>10011007.10011006.10011041.10011047</concept_id>
 <concept_desc>Software and its engineering~Source code generation</concept_desc>
 <concept_significance>300</concept_significance>
 </concept>
 <concept>
 <concept_id>10011007.10011006.10011066.10011069</concept_id>
 <concept_desc>Software and its engineering~Integrated and visual development environments</concept_desc>
 <concept_significance>300</concept_significance>
 </concept>
 </ccs2012>
 \end{CCSXML}

 \ccsdesc[500]{Software and its engineering~Extensible languages}
 \ccsdesc[500]{Software and its engineering~Modules / packages}
 \ccsdesc[300]{Software and its engineering~Functional languages}
 \ccsdesc[300]{Software and its engineering~Polymorphism}
 \ccsdesc[300]{Software and its engineering~Source code generation}
 \ccsdesc[300]{Software and its engineering~Integrated and visual development environments}

 %%
 %% Keywords. The author(s) should pick words that accurately describe
 %% the work being presented. Separate the keywords with commas.
 \keywords{Agda, meta-program, extensible, Emacs, packages, modules, dependent-types}
   #+end_export

** COMMENT Authors & title                                                   :ignore:

 #+begin_export latex
 \author{Musa Al-hassy}
 \affiliation{McMaster University, Canada}
 \email{alhassy@gmail.com}

 \author{Jacques Carette}
 \orcid{0000-0001-8993-9804}
 \affiliation{McMaster University, Canada}
 \email{carette@mcmaster.ca}

 \author{Wolfram Kahl}
 \orcid{0000-0002-6355-214X}
 \affiliation{McMaster University, Canada}
 \email{kahl@cas.mcmaster.ca}

 % \author{Musa Al-hassy \\ {\small \url{alhassy@gmail.com} \\ McMaster University \\ Computing and Software \\ Hamilton, Ontario, Canada}}
 % \author{Jacques Carette \\ {\small \url{carette@mcmaster.ca} \\ McMaster University \\ Computing and Software \\ Hamilton, Ontario, Canada}}
 % \author{Wolfram Kahl \\ {\small \url{kahl@cas.mcmaster.ca} \\ McMaster University \\ Computing and Software \\ Hamilton, Ontario, Canada}}

 #+end_export

** Widows and Orphans                                                :ignore:
 # An "orphan" is an isolated line of text at the bottom of a page;
 # an "orphan heading" is a heading without following body text at the bottom of the page;
 # a "widow" is an isolated line of text at the top of a page.
 #
 # LaTeX: In order to eliminate widows and orphans, you can copy the following commands into the LaTeX source before \begin{document} :
 #
   #+latex_header:        \clubpenalty = 10000
   #+latex_header:        \widowpenalty = 10000
   #+latex_header:        \displaywidowpenalty = 10000

 # Sometimes, orphans and widows will survive these commands, in which case a \vspace command might help.

** Balanced Columns on Last Page                                     :ignore:
   #+latex_header: \usepackage{flushend}

 # The two columns of the last page need to have the same length.
 #
 # + LaTeX (Option 1) :: Insert the command \usepackage{flushend} into the LaTeX source before \begin{document}.
 #
 # + LaTeX (Option 2) :: Insert \usepackage{balance} into the LaTeX source before \begin{document}
 #      and the following in the text that would appear as left column on the last page without balancing: \balance.
 #
 # + LaTeX (Option 3) :: If the above options do not work, it seems that one of the used packages prevents
 #      the balancing from working properly. In case you do not want to spend time on finding out which
 #       package it is, you can manually balance the last page by inserting a \newpage between your
 #       references in the .bbl file at an appropriate position. (Attention: Running bibtex again
 #       will overwrite this; alternatively, the contents of the .bbl file can be copy-and-paste'ed
 #       into the main LaTeX file in place of the \bibliography command.)
 #
** COMMENT GPCE‚Äô19 Copyright                                                 :ignore:

 # The following is specific to GPCE '19 and the paper
 # 'A Language Feature to Unbundle Data at Will (Short Paper)'
 # by Musa Al-hassy, Wolfram Kahl, and Jacques Carette.
 #
 #+latex_header: \setcopyright{acmcopyright}
 #+latex_header: \acmPrice{15.00}
 #+latex_header: \acmDOI{10.1145/3357765.3359523}
 #+latex_header: \acmYear{2019}
 #+latex_header: \copyrightyear{2019}
 #+latex_header: \acmISBN{978-1-4503-6980-0/19/10}
 #+latex_header: \acmConference[GPCE '19]{Proceedings of the 18th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences}{October 21--22, 2019}{Athens, Greece}
 #+latex_header: \acmBooktitle{Proceedings of the 18th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences (GPCE '19), October 21--22, 2019, Athens, Greece}
 #+latex_header:

* Abstract                                                           :ignore:
#+begin_abstract org
  Folklore has held that any ‚Äòsemantic unit‚Äô is essentially a type-theoretic
  context ---this includes, for example, records and algebraic datatypes.  We
  provide foundation for such an observation.

  We show that languages with a sufficiently powerful type system and reflection
  mechanism permit a /single declaration interface/ for functions, records, type
  classes, type constructors, and algebraic data types. Moreover, the interface
  is monadic and thus actually practical to use.

  Along the way, we solve the bundling problem: Record fields can be lifted to
  parameters as needed. Traditionally, unbundling a record requires the use of
  transport along propositional equalities, with trivial ~refl~-exivity proofs.
  The ~:waist~ approach presented here removes the boilerplate necessary at the
  type specialisation location as well as at the instance declaration location.

  A third contribution of this paper is to provide a semantics for the
  PackageFormer editor extension, which realises the folklore observation by
  providing users with meta-primitives for making modules to allow arbitrary
  grouping mechanisms to be derived, such as obtaining the homomorphism type of
  a given record.
#+end_abstract

 \maketitle

* Header :noexport:

#+begin_src agda2 :tangle paper2.agda
module paper2 where

--------------------------------------------------------------------------------
-- (shell-command "ln -s /Users/musa/thesis-proposal/prototype/semantics-with-waist.agda semantics-with-waist.agda")

open import semantics-with-waist
open import Data.Product
open import Level renaming (zero to ‚Ñì‚ÇÄ) hiding (suc)
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Data.Nat
open import Function using (id)
open import Data.Bool renaming (Bool to ùîπ)
open import Data.Sum

open import Data.List
import Data.Unit as Unit
open import Reflection hiding (name; Type) renaming (_>>=_ to _>>=‚Çò_)

‚Ñì‚ÇÅ = Level.suc ‚Ñì‚ÇÄ

-- Helpers for readability
pattern ‚ü®_‚ü©‚ÇÅ x    = x , tt
pattern ‚ü®_,_‚ü© x y = x , y , tt
#+end_src

* Introduction

The humblest notion of a grouping mechanism is described by a pair type ~A √ó B √ó
C~, usually later values depend on earlier values and so we have the
dependent-pair type ~Œ£ a ‚à∂ A ‚Ä¢ Œ£ b ‚à∂ B a ‚Ä¢ Œ£ C a b~. The kind of these types is
~Set‚ÇÅ~, the type of small types. If we wish to speak of groupings where ~a ‚à∂ A~ is
/fixed/, then we must lift it from being a /field/ component to being a /parameter/,
thereby arriving at the /function/ ~Œª a ‚à∂ A ‚Ä¢ b ‚à∂ B a ‚Ä¢ C a b~ which has /type/ ~Œ† a ‚à∂
A ‚Ä¢ Set~. Similarly, we may expose ~b~ as a parameter to further indicate the
possible grouping structure.

| Grouping Description          |   | Kind                      |
|-------------------------------+---+---------------------------|
| =Œ£ a ‚à∂ A ‚Ä¢ Œ£ b ‚à∂ B a ‚Ä¢ Œ£ C a b= |   | ~Set~                       |
| =Œª a ‚à∂ A ‚Ä¢ Œ£ b ‚à∂ B a ‚Ä¢ Œ£ C a b= |   | ~Œ† a ‚à∂ A ‚Ä¢ Set~             |
| =Œª a ‚à∂ A ‚Ä¢ Œª b ‚à∂ B a ‚Ä¢ Œ£ C a b= |   | ~Œ† a ‚à∂ A ‚Ä¢ Œ† b ‚à∂ B a ‚Ä¢ Set~ |

At each step, we ‚Äúpull out‚Äù more information at the kind level; at first we have
a ~Set~, an opaque grouping mechanism, then we obtain a ~Œ† a ‚à∂ A ‚Ä¢ Set~ which is a
grouping mechanism that somehow makes use of an ~A~-value.

1. *Type constructor reification Œ†‚ÜíŒª:* Function /types/ like ~Œ† a ‚à∂ A ‚Ä¢ Set~ cannot be
   applied since they are not functions, so how do we get to ~Œª a : A ‚Ä¢ Set~?

   + Œª-terms are values of Œ†-types, but in general there is no natural
     construction to transform a type into one of its values.

   + Given ~œÑ = Œ† (X : Set) ‚Ä¢ ‚ãØ : Set‚ÇÅ~, we want ~Œ†‚ÜíŒª œÑ = Œª (X : Set) ‚Ä¢ ‚ãØ : Œ† (X :
     Set) ‚Ä¢ Set~; the former's type states it to be a =Set‚ÇÅ=, a grouping mechanism of
     which we know nothing, whereas the latter's type indicates it to be a
     parameterised grouping mechanism. Since ~Œ†‚ÜíŒª œÑ~ can be applied and is thus more
     concrete, we call ~Œ†‚ÜíŒª~ a reification combinator.

2. *Unbundling*: How do we go from ~Set~ to ~Œ† a ‚à∂ A ‚Ä¢ Set~?

   A function from function-types to functions-on-types necessarily
   requires a way to pattern match on the possible type constructions in a language.

   Perhaps an example will clarify the issue. The ubiquitous graph structure
   is contravariant in its collection of vertices. Recall that a multi-graph, or
   quiver, is a collection of vertices along with a collection of edges between
   any two vertices; here's the traditional record form:
   #+begin_src agda2
Graph‚ÇÄ : Context ‚Ñì‚ÇÅ
Graph‚ÇÄ = do Vertex ‚Üê Set
            Edges  ‚Üê (Vertex ‚Üí Vertex ‚Üí Set)
            End {‚Ñì‚ÇÄ}
#+end_src

   Using the record form, it is akward to phrase contravariance, which simply
   ‚Äúrelabels the vertices‚Äù. Even worse, the awkward phrasing only serves to
   ensure certain constraints hold ---which are reified at the value level via
   the uninsightful ~refl~-exivity proof.
   #+begin_src agda2
comap‚ÇÄ : ‚àÄ {A B : Set}
      ‚Üí (f : A ‚Üí B)
      ‚Üí Œ£ G ‚à∂ Graph‚ÇÄ :kind ‚Äµrecord ‚Ä¢ Field 0 G ‚â° B
      ‚Üí Œ£ G ‚à∂ Graph‚ÇÄ :kind ‚Äµrecord ‚Ä¢ Field 0 G ‚â° A
comap‚ÇÄ {A} {B} f (‚ü® .B , edgs ‚ü© , refl) = (A , (Œª a‚ÇÅ a‚ÇÇ ‚Üí edgs (f a‚ÇÅ) (f a‚ÇÇ)) , tt) , refl
       #+end_src
   /Without redefining graphs/, we can phrase the definition at the typeclass
   level ---i.e., records parameterised by the vertices. This form is not only
   clearer and easier to implement at the value-level, it also makes it clear
   that we are ‚Äúpulling back‚Äù the vertex type and so have also shown graphs are
   closed under reducts.
       #+begin_src agda2
-- Way better and less akward!
comap : ‚àÄ {A B : Set}
     ‚Üí (f : A ‚Üí B)
     ‚Üí (Graph‚ÇÄ :kind ‚Äµtypeclass) B
     ‚Üí (Graph‚ÇÄ :kind ‚Äµtypeclass) A
comap f ‚ü® edgs ‚ü©‚ÇÅ = ‚ü® (Œª a‚ÇÅ a‚ÇÇ ‚Üí edgs (f a‚ÇÅ) (f a‚ÇÇ)) ‚ü©‚ÇÅ
   #+end_src

   Later we show how to form ~Context~, its do-notation, and the ~:kind~ mechanism
   which shifts between records, typeclasses, and algebraic datatypes.


# eval  : A √ó (A ‚Üí B) ‚Üí B
# curry : (A √ó B ‚Üí C) ‚Üí (A ‚Üí (B ‚Üí C))
# #
# Œ† a ‚à∂ A ‚Ä¢ (Œ† f ‚à∂ (Œ† x ‚à∂ A ‚Ä¢ B x)) ‚Ä¢ B a
# Œ† f ‚à∂ (Œ† p ‚à∂ (Œ† x ‚à∂ A ‚Ä¢ B x) ‚Ä¢ C p) ‚Ä¢ Œ† a ‚à∂ A ‚Ä¢ Œ† b ‚à∂ B a ‚Ä¢ C (a, b)
# Œ† f ‚à∂ Set ‚Ä¢ (Œ† x ‚à∂ A ‚Ä¢ Set)

We shall outline how this can be achieved in dependently-typed languages which
have support for reflection. Our target language will be Agda, but the ideas
easily transfer to other languages. In particular, the resulting in-language
syntax we obtain is rather close to the existing Agda record syntax for
declarations and Agda constructor tuples for instances.  In the next section, we
begin by way of a more concrete example of a grouping mechanism, then we take a
goal-driven approach to building the necessarily apparatus for a clean
imperative-like declaration notation, then we conclude with a brief discussion
on how the resulting framework can act as a simple theory for the Agda
PackageFormer editor extension.

In order to be language-agnostic and underscore the ideas, we shall present the
core definitions along with Agda-checked examples. Details are left to an
appendix(?) or can be read below (MA: Haven't decided yet):
| https://github.com/alhassy/next-700-module-systems/tree/master/prototype |

* A Grouping Mechanism: Automata

We begin by way of example.

The humblest of automata is a dynamical system ---a collection of states, a
designated start state, and a transition function. For example, a machine with
an initial display and only one button that changes the display.  In
dependently-typed languages, there are at least three ways to encode such a
structure ---via records possibly with parameters, which are sometimes called
typeclasses.

#+begin_src agda2 :tangle paper2.agda
record DynamicSystem‚ÇÄ : Set‚ÇÅ where
  field
    States : Set
    start  : States
    next   : States ‚Üí States

record DynamicSystem‚ÇÅ (States : Set) : Set where
  field
    start : States
    next  : States ‚Üí States

record DynamicSystem‚ÇÇ (States : Set) (start : States) : Set where
  field
    next : States ‚Üí States
    #+end_src

The kinds of these types provide insight into the sort of data they contain:
| Type           | Kind                      |
|----------------+---------------------------|
| =DynamicSystem‚ÇÄ= | =Set‚ÇÅ=                      |
| =DynamicSystem‚ÇÅ= | =Œ† X ‚à∂ Set ‚Ä¢ Set=           |
| =DynamicSystem‚ÇÇ= | =Œ† X ‚à∂ Set ‚Ä¢ Œ† x ‚à∂ X ‚Ä¢ Set= |
:AgdaCheckedEvidence:
    #+begin_src agda2 :tangle paper2.agda
_ : Set‚ÇÅ
_ = DynamicSystem‚ÇÄ

_ : Œ† X ‚à∂ Set ‚Ä¢ Set
_ = DynamicSystem‚ÇÅ

_ : Œ† X ‚à∂ Set ‚Ä¢ Œ† x ‚à∂ X ‚Ä¢ Set
_ = DynamicSystem‚ÇÇ
#+end_src
:End:

Observe that =DynamicSystem·µ¢= is a type constructor of =i=-many arguments.

Yet another way to encode dynamical systems would be by their syntax, as it
would be desirable when serialising them ---i.e., to obtain first-class
descriptions of dynamical system values.
#+begin_src agda2 :tangle paper2.agda
data DSTerms‚ÇÄ : Set where
  start : DSTerms‚ÇÄ
  next  : DSTerms‚ÇÄ ‚Üí DSTerms‚ÇÄ

data DSTerms‚ÇÅ (States : Set) : Set where
  start : States ‚Üí DSTerms‚ÇÅ States
  next  : DSTerms‚ÇÅ States ‚Üí DSTerms‚ÇÅ States

data DSTerms‚ÇÇ (States : Set) (start : States) : Set where
  next : DSTerms‚ÇÇ States start ‚Üí DSTerms‚ÇÇ States start
#+end_src

Notice that the first algebraic data type is isomorphic to ~‚Ñï~, whereas the
remaining two are isomorphic to ~States √ó ‚Ñï~ which keeps track of how many =next=
steps are necessary until a =State= value is reached ---this may be called
=Eventually States=.
The ~DSTerms·µ¢~ share the same pattern of kind exposure as the ~DynamicSystem·µ¢~ types.
:AgdaCheckedEvidence:
#+begin_src agda2 :tangle paper2.agda
_ : Set
_ = DSTerms‚ÇÄ

_ : Œ† X ‚à∂ Set ‚Ä¢ Set
_ = DSTerms‚ÇÅ

_ : Œ† X ‚à∂ Set ‚Ä¢ Œ† x ‚à∂ X ‚Ä¢ Set
_ = DSTerms‚ÇÇ
#+end_src
:End:

# #
Using monadic notation, we can obtain all of these notions from a single user-friendly
context declaration.
#+name: contexts-table
#+caption: Contexts embody all kinds of grouping mechanisms
| Concept            | Concrete Syntax                       | Description            |
|--------------------+---------------------------------------+------------------------|
| Context            | =do S ‚Üê Set; s ‚Üê X; n ‚Üê (X ‚Üí X); End=   | ‚Äúname-type pairs‚Äù      |
|--------------------+---------------------------------------+------------------------|
| Record Type        | =Œ£ S ‚à∂ Set ‚Ä¢ Œ£ s ‚à∂ S ‚Ä¢ Œ£ n ‚à∂ S ‚Üí S ‚Ä¢ ‚ä§= | ‚Äúbundled-up data‚Äù      |
| Function Type      | =Œ† S ‚Ä¢ Œ£ s ‚à∂ S ‚Ä¢ Œ£ n ‚à∂ S ‚Üí S ‚Ä¢ ‚ä§=       | ‚Äúa type of functions‚Äù  |
| Type constructor   | =Œª S ‚Ä¢ Œ£ s ‚à∂ S ‚Ä¢ Œ£ n ‚à∂ S ‚Üí S ‚Ä¢ ‚ä§=       | ‚Äúa function on types‚Äù  |
| Algebraic datatype | ~data ùîª : Set where s : ùîª; n : ùîª ‚Üí ùîª~   | ‚Äúa descriptive syntax‚Äù |

* From Do-notation to (Parameterised) Record Types

Traditionally a context is a list of name-type pairs, for us it will be a set
---namely the product of the types, since the names ‚Äúdo not matter‚Äù.  Moreover,
contexts will be have a numeric ‚Äòwaist‚Äô argument that indicates which of the
first entries are ‚Äòparameters‚Äô, leaving the remaining elements as ‚Äòfields‚Äô.

#+begin_example agda2
-- Contexts are waist-indexed types
Context = Œª ‚Ñì ‚Üí ‚Ñï ‚Üí Set ‚Ñì

-- The ‚Äúempty context‚Äù is the unit type
End : ‚àÄ {‚Ñì} ‚Üí Context ‚Ñì
End = ‚Äµ ‚ä§

-- Every type is a context
‚Äµ_ : ‚àÄ {‚Ñì} ‚Üí Set ‚Ñì ‚Üí Context ‚Ñì
‚Äµ S = Œª _ ‚Üí S
#+end_example

In order to use do-notation we must provide a definition of a bind operator
~_>>=_~.
#+begin_example agda2
  do X ‚Üê Set
     z ‚Üê X
     s ‚Üê (X ‚Üí X)
     End

‚Üù‚ü® Removing syntactic sugar ‚ü©

  ‚Äµ Set >>= Œª X ‚Üí ‚Äµ X >>= Œª z ‚Üí ‚Äµ (X ‚Üí X) >>= End
#+end_example
Notice the quote method is forced due to the typing of bind: ~_>>= : ‚àÄ {X Y} ‚Üí m
X ‚Üí (X ‚Üí m Y) ‚Üí m Y~.  The definition of the bind operator accounts for the
current waist: If zero, we have records, otherwise functions.
#+begin_example agda2
_>>=_ : ‚àÄ {a b}
      ‚Üí (Œì : Context a)
      ‚Üí (‚àÄ {n} ‚Üí Œì n ‚Üí Context b)
      ‚Üí Context (a ‚äç b)
(Œì >>= f) ‚Ñï.zero  = Œ£ Œ≥ ‚à∂ Œì 0 ‚Ä¢ f Œ≥ 0
(Œì >>= f) (suc n) = (Œ≥ : Œì n) ‚Üí f Œ≥ n
#+end_example
Unfortunately, this would require too many calls to quote; e.g.,
#+begin_example agda2
do X ‚Üê ‚Äµ Set
   z ‚Üê ‚Äµ X
   s ‚Üê ‚Äµ (X ‚Üí X)
   End
#+end_example
So let‚Äôs ‚Äúbuild it into the definition‚Äù of ~_>>=_~:
#+begin_example agda2
_>>=_ : ‚àÄ {a b}
      ‚Üí (Œì : Set a)  -- Main difference
      ‚Üí (Œì ‚Üí Context b)
      ‚Üí Context (a ‚äç b)
(Œì >>= f) ‚Ñï.zero  = Œ£ Œ≥ ‚à∂ Œì ‚Ä¢ f Œ≥ 0
(Œì >>= f) (suc n) = (Œ≥ : Œì) ‚Üí f Œ≥ n
#+end_example

Let's see this in action, and for variety let's encode monoids.
#+begin_example agda2
Monoid : ‚àÄ ‚Ñì ‚Üí Context (‚Ñìsuc ‚Ñì)
Monoid ‚Ñì = do Carrier ‚Üê Set ‚Ñì
              Id      ‚Üê Carrier
              _‚äï_     ‚Üê (Carrier ‚Üí Carrier ‚Üí Carrier)
              leftId  ‚Üê ‚àÄ {x : Carrier} ‚Üí x ‚äï Id ‚â° x
              rightId ‚Üê ‚àÄ {x : Carrier} ‚Üí Id ‚äï x ‚â° x
              assoc   ‚Üê ‚àÄ {x y z} ‚Üí (x ‚äï y) ‚äï z  ‚â°  x ‚äï (y ‚äï z)
              End {‚Ñì}
#+end_example

Likewise, we encode a context ~DynamicSystem~, cite:contexts-table,
which we tabulate its elaboration at particular waists:

| Waist |   | Elaboration                                |
|-------+---+--------------------------------------------|
|     0 |   | =Œ£ X ‚à∂ Set  ‚Ä¢ Œ£ z ‚à∂ X  ‚Ä¢ Œ£ s ‚à∂ (X ‚Üí X)  ‚Ä¢ ‚ä§= |
|     1 |   | =Œ† X ‚à∂ Set  ‚Ä¢ Œ£ z ‚à∂ X  ‚Ä¢ Œ£ s ‚à∂ (X ‚Üí X)  ‚Ä¢ ‚ä§= |
|     2 |   | =Œ† X ‚à∂ Set  ‚Ä¢ Œ† z ‚à∂ X  ‚Ä¢ Œ£ s ‚à∂ (X ‚Üí X)  ‚Ä¢ ‚ä§= |
|     3 |   | =Œ† X ‚à∂ Set  ‚Ä¢ Œ† z ‚à∂ X  ‚Ä¢ Œ† s ‚à∂ (X ‚Üí X)  ‚Ä¢ ‚ä§= |

Notice that the elaborations are function types, but we want functions /on/ types
---as is the case with the ~DynamicSystem·µ¢~ from the introduction.

* Unbundling: From Function Types to Functions /on/ Types

Evaluation transforms functions to values and currying reorganises functions,
but we want a combinator, call it ~Œ†‚ÜíŒª~, that takes a type and results in a value
of that type.  In general, this is not feasible when the type is empty nor is it
naturally canonical when there are multiple possible values to choose from.

One could use a universe, an algebraic type of codes denoting types, to define
~Œ†‚ÜíŒª~. However, one can no longer then easily use existing types since they are
not formed from the universe's constructors, thereby resulting in duplication of
existing types via the universe encoding. This is not practical nor pragmatic.

As such, we are left with pattern matching on the language's type formation
primitives as the only reasonable approach. The method ~Œ†‚ÜíŒª~ is thus a macro that
acts on the syntactic term representations of types.
#+begin_example agda2
Œ†‚ÜíŒª (Œ† a ‚à∂ A ‚Ä¢ Ba) = (Œª a ‚à∂ A ‚Ä¢ Ba)
Œ†‚ÜíŒª œÑ              = œÑ  {- otherwise -}
#+end_example
Similarly, ~_:waist_~ is a macro acting on contexts that repeats ~Œ†‚ÜíŒª~ a number of
times in order to lift a number of field components to the parameter level.
#+begin_example agda2
œÑ :waist n     = Œ†‚ÜíŒª‚Åø n (œÑ n)

Œ†‚ÜíŒª‚Åø 0       œÑ = œÑ
Œ†‚ÜíŒª‚Åø (n + 1) œÑ = Œ†‚ÜíŒª‚Åø n (Œ†‚ÜíŒª œÑ)
#+end_example

Let's see this in action. Here are our dynamical systems.
#+begin_example agda2
DynamicSystem : Context (‚Ñìsuc Level.zero)
DynamicSystem = do X ‚Üê Set
                   s ‚Üê X
                   n ‚Üê (X ‚Üí X)
                   End {Level.zero}
#+end_example

Then using our macros:
#+begin_example agda2
DynamicSystem 1        ‚â°  Œ† X ‚à∂ Set ‚Ä¢ Œ£ s ‚à∂ X  ‚Ä¢ Œ£ n ‚à∂ X ‚Üí X  ‚Ä¢ ‚ä§
DynamicSystem :waist 1 ‚â°  Œª X ‚à∂ Set ‚Ä¢ Œ£ s ‚à∂ X  ‚Ä¢ Œ£ n ‚à∂ X ‚Üí X  ‚Ä¢ ‚ä§
#+end_example

Each type exposes more and more information about what kind of grouping
structure we have at hand. The definitions could not be simpler.
#+begin_example agda2
A‚Ä≤ : Set‚ÇÅ
B‚Ä≤ : Œ† X ‚à∂ Set ‚Ä¢ Set
C‚Ä≤ : Œ† X ‚à∂ Set ‚Ä¢ Œ† x ‚à∂ X ‚Ä¢ Set
D‚Ä≤ : Œ† X ‚à∂ Set ‚Ä¢ Œ† x ‚à∂ X ‚Ä¢ Œ† s ‚à∂ (X ‚Üí X) ‚Ä¢ Set

A‚Ä≤ = DynamicSystem :waist 0
B‚Ä≤ = DynamicSystem :waist 1
C‚Ä≤ = DynamicSystem :waist 2
D‚Ä≤ = DynamicSystem :waist 3
#+end_example

If the language allows mixfix unicode identifiers, then one declares
grouping mechanisms  with ~do ‚ãØ End~ then forms instances using, say, ~‚ü®‚ãØ‚ü©~.
#+begin_example agda2
-- Helpful syntactic sugar
‚ü® : ‚àÄ {‚Ñì} {S : Set ‚Ñì} ‚Üí S ‚Üí S
‚ü® s = s

_‚ü© : ‚àÄ {‚Ñì} {S : Set ‚Ñì} ‚Üí S ‚Üí S √ó ‚ä§ {‚Ñì}
s ‚ü© = s , tt

‚ü®‚ü© : ‚àÄ {‚Ñì} ‚Üí ‚ä§ {‚Ñì}
‚ü®‚ü© = tt
#+end_example
The following /instances/ of these grouping types demonstrate how /information moves from the body level to the parameter level./
#+begin_example agda2
ùí©‚Å∞ : A‚Ä≤
ùí©‚Å∞ = ‚ü® ‚Ñï , 0 , suc ‚ü©

ùí©¬π : B‚Ä≤ ‚Ñï
ùí©¬π = ‚ü® 0 , suc ‚ü©

ùí©¬≤ : C‚Ä≤ ‚Ñï 0
ùí©¬≤ = ‚ü® suc ‚ü©

ùí©¬≥ : D‚Ä≤ ‚Ñï 0 suc
ùí©¬≥ = ‚ü®‚ü©
#+end_example

It is interesting to note, that if a context =ùíû= has only ùìÉ-many fields, then
there are only ùìÉ-many interesting unbundled forms, after which there are no new
ones: ~ùíû (ùìÉ + k) ‚â° ùíû ùìÉ~.

With ~:waist~ we can fix parameters ahead of time.  For example, above the type =B‚Ä≤
‚Ñï= is the type of ‚Äúdynamic systems over carrier ‚Ñï‚Äù whereas =C‚Ä≤ ‚Ñï 0= is the type of
‚Äúdynamic systems over carrier ‚Ñï and start state 0‚Äù.  Without the unbundling
mechanism we would have had to resort to awkward trivial constraints, as below,
which are tolerable for one-off uses but clearly do not scale at all as
indicated by the need to use equals-for-equals ~subst~-itutions of propositional
equalities.
#+begin_src agda2
C‚Ä≥ : Œ† X ‚à∂ Set ‚Ä¢ Œ† x ‚à∂ X ‚Ä¢ Set‚ÇÅ
C‚Ä≥ X x = Œ£ ùíü ‚à∂ DynamicSystem 0
       ‚Ä¢ Œ£ Carrier-is-X ‚à∂ proj‚ÇÅ ùíü ‚â° X
       ‚Ä¢ proj‚ÇÅ (proj‚ÇÇ ùíü) ‚â° subst id (sym Carrier-is-X) x

ùí©¬≤eek : C‚Ä≥ ‚Ñï 0
ùí©¬≤eek = (‚Ñï , 0 , suc , tt) , refl , refl
#+end_src

Traditionally, unbundling a record requires the use of transport along
propositional equalities, with trivial ~refl~-exivity proofs.
The ~:waist~ approach presented here removes the boilerplate necessary at
the type specialisation location as well as at the instance declaration location.

* COMMENT =termtype=: Algebraic Datatypes are Fixpoints of Derived Functors
With a bit of reflection, records and typeclasses have been coerced into a
unified notation. It remains to bring algebraic datatypes into the fold.

* Semantics for PackageFormer

  The PackageFormer editor extension reads contexts ---in nearly the same
  notation as above--- enclosed in dedicated comments, then generates and
  imports Agda code from them seamlessly in the background whenever typechecking
  transpires. The framework provides a fixed number of meta-primitives for
  producing arbitrary notions of grouping mechanisms, and allows arbitrary
  Emacs Lisp to be invoked in the construction of complex grouping mechanisms.

  One of PackageFormer's primitives is called ~:waist~ and behaves exactly as ours
  above. As such, our current setup provides a formalisation of PackageFormer
  limited to only the ~:waist~ meta-primitive. Moreover, it is nearly as readable
  and is a library method, rather than an editor extension.

  PackageFormer is extensible via Emacs Lisp and one of its possible uses is to
  obtain algebraic data types from a context. With Agda's current reflection
  mechanism, even this is possible! For example, we may obtain a type ~ùîª~ from
  =DynamicSystem= with user-defined constructors =zeroD= and =sucD= as if it where
  defined:
#+begin_example agda2
data ùîª : Set where
     zeroD : ùîª
     sucD  : ùîª ‚Üí ùîª
#+end_example

  #

  Here are the core pieces necessary to form ~termtype~; obtained by viewing an
  algebraic data-type as a fixed-point of the functor obtained from union of the
  sources of its constructors. For example, the above =ùîª= is the fixpoint of ~Œª ùîª ‚Üí
  ùüô ‚äé ùîª~, where the summands are the sources of =ùîª='s constructors.
  #+begin_example agda2
‚áä œÑ = ‚Äúreduce all de brujin indices by 1‚Äù

Œ£‚Üí‚äé (Œ£ a ‚à∂ A ‚Ä¢ Ba) = A ‚äé Œ£‚Üí‚äé (‚áä Ba)
{- Extend ‚ÄòŒ£‚Üí‚äé‚Äô homomorphicly to other syntactic constructs -}

sources (Œª x ‚à∂ (Œ† a ‚à∂ A ‚Ä¢ Ba) ‚Ä¢ ‚ãØ) = (Œª x ‚à∂ A ‚Ä¢ ‚ãØ)
sources (Œª x ‚à∂ A              ‚Ä¢ ‚ãØ) = (Œª x ‚à∂ ‚ä§ ‚Ä¢ ‚ãØ)
{- Extend ‚Äòsources‚Äô homomorphicly to other syntactic constructs -}

data Fix (F : Set ‚Üí Set) : Set where
  Œº : F (Fix F) ‚Üí Fix F

termtype œÑ = Fix (Œ£‚Üí‚äé (sources œÑ))
#+end_example

One can then declare ~ùîª = termtype (DynamicSystem :waist 1)~.

With ~termtype~ in hand, we have provided a theoretical basis for yet another
meta-primitive of PackageFormer, the ~_:kind_~ primitive which dictates how an
abstract grouping mechanism should be viewed in terms of existing Agda syntax.
However, unlike PackageFormer all of our syntax is legitimate Agda syntax.

#+begin_src agda2 :tangle no
data Kind : Set where
  ‚Äµrecord    : Kind
  ‚Äµtypeclass : Kind
  ‚Äµdata      : Kind
#+end_src

Since syntax is being manipulated, we have yet another macro:
#+begin_src agda2 :tangle no
ùíû :kind ‚Äµrecord    = ùíû 0
ùíû :kind ‚Äµtypeclass = ùíû :waist 1
ùíû :kind ‚Äµtypeclass = termtype (ùíû :waist 1)
#+end_src

Interestingly, useful programming datatypes arise from termtypes of theories
(contexts). That is, if =ùíû : Set ‚Üí Context ‚Ñì‚ÇÄ= then =‚ÑÇ‚Ä≤ = Œª X ‚Üí ùíû X :kind ‚Äµdata= can
be used to form ‚Äòfree, lawless, ùíû-instances‚Äô.  For example,
| Theory             | Termtype     |
|--------------------+--------------|
| Dynamical Systems  | ‚Ñï            |
| Pointed Structures | Maybe        |
| Monoids            | Binary Trees |

The final correspondence in the table is a claim mentioned briefly in the first
PackageFormer paper. With our setup we can not only formally express the
relationship but also prove it true. We present the setup and
leave it as a tremendously easy exercise to the reader to present a bijective
pair of functions between =ùïÑ= and =TreeSkeleton=. Hint: Interactively case-split on values
of =ùïÑ= until the declared patterns appear, then replace them with the constructors
of ~TreeSkeleton~.

#+begin_example agda2
ùïÑ : Set
ùïÑ = termtype (Monoid ‚Ñì‚ÇÄ :waist 1)

-- Pattern synonyms for more compact presentation
pattern emptyM      = Œº (inj‚ÇÅ tt)                      -- : ùïÑ
pattern branchM l r = Œº (inj‚ÇÇ (inj‚ÇÅ (l , r , tt)))     -- : ùïÑ ‚Üí ùïÑ ‚Üí ùïÑ
pattern absurdM a   = Œº (inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ (inj‚ÇÇ a))))  -- absurd values of ùüò

data TreeSkeleton : Set where
  empty  : TreeSkeleton
  branch : TreeSkeleton ‚Üí TreeSkeleton ‚Üí TreeSkeleton
#+end_example

To obtain trees over some ‚Äòvalue type‚Äô Œû, one must start at the theory of
‚Äúmonoids containing a given set Œû‚Äù. Similarly, by starting at ‚Äútheories of
pointed sets over a given set Œû‚Äù, the resulting termtype is the ~Maybe~
type constructor ---another simple exercise to the reader: Show ~‚Ñô ‚âÖ Maybe~.
#+begin_example agda2
PointedOver  : Set ‚Üí Context (‚Ñìsuc ‚Ñì‚ÇÄ)
PointedOver Œû    = do Carrier ‚Üê Set ‚Ñì‚ÇÄ
                      point   ‚Üê Carrier
                      embed   ‚Üê (Œû ‚Üí Carrier)
                      End

‚Ñô : Set ‚Üí Set
‚Ñô X = termtype (PointedOver X :waist 1)

-- Pattern synonyms for more compact presentation
pattern nothingP = Œº (inj‚ÇÅ tt)       -- : ‚Ñô
pattern justP e  = Œº (inj‚ÇÇ (inj‚ÇÅ e)) -- : ‚Ñô ‚Üí ‚Ñô
#+end_example

For PackageFormer, we have implemented its primitives ~:waist~ and ~:kind~, the
other core meta-primitives are ~_‚ü¥_~ and ~:alter-elements~. The former is a
syntactic form of function application, ~x ‚ü¥ f ‚âà f x~, which we already have by
juxtaposition in Agda. The latter, however, is a ‚Äúhammer‚Äù that alters the
constituents of a grouping mechanism in an arbitrary fashion using the entire
power of Emacs Lisp ---which includes a large portion of Common Lisp.  We have
currently presented a partial semantics of PackageFormer's syntactic entities by
presenting them here as semantic functions on contexts.

* What about the meta-language's parameters?

Besides ~:waist~, another way to introduce parameters into a context grouping
mechanism is to use the language's existing utility of parameterising a context
by another type ---as was done earlier in ~PointedOver~.

For example, a pointed set needn't necessarily be termined with ~End~.
#+begin_src agda2
PointedSet : Context ‚Ñì‚ÇÅ
PointedSet = do Carrier ‚Üê Set
                point   ‚Üê Carrier
                End {‚Ñì‚ÇÅ}
#+end_src
We instead form a grouping consisting of a single type and a value of that type,
along with an instance of the parameter type =Œû=.
#+begin_src agda2
PointedPF : (Œû : Set‚ÇÅ) ‚Üí Context ‚Ñì‚ÇÅ
PointedPF Œû = do Carrier ‚Üê Set
                 point   ‚Üê Carrier
                 ‚Äµ Œû
#+end_src
Clearly ~PointedPF ‚ä§ ‚âà PointedSet~, so we have a more generic grouping mechanism.
The natural next step is to consider other parameters such as ~PointedSet~
in-place of =Œû=.
:AgdaCheckedEvidence:
#+begin_src agda2
_ : ‚àÄ {n} ‚Üí PointedPF ‚ä§ n ‚â° PointedSet n
_ = refl
#+end_src
:End:
#+begin_src agda2
-- Convenience names
PointedSet·µ£ = PointedSet        :kind ‚Äµrecord
PointedPF·µ£  = Œª Œû ‚Üí PointedPF Œû :kind ‚Äµrecord

-- An extended record type: Two types with a point of each.
TwoPointedSets = PointedPF·µ£ PointedSet·µ£

_ :   TwoPointedSets
    ‚â° ( Œ£ Carrier‚ÇÅ ‚à∂ Set ‚Ä¢ Œ£ point‚ÇÅ ‚à∂ Carrier‚ÇÅ
      ‚Ä¢ Œ£ Carrier‚ÇÇ ‚à∂ Set ‚Ä¢ Œ£ point‚ÇÇ ‚à∂ Carrier‚ÇÇ ‚Ä¢ ‚ä§)
_ = refl

-- Here's an instance
one : PointedSet :kind ‚Äµrecord
one = ùîπ , false , tt

-- Another; a pointed natural extended by a pointed bool,
-- with particular choices for both.
two : TwoPointedSets
two = ‚Ñï , 0 , one
#+end_src
More generally, /record *structure* can be dependent on values:/
#+begin_src agda2
_PointedSets : ‚Ñï ‚Üí Set‚ÇÅ
zero  PointedSets = ‚ä§
suc n PointedSets = PointedPF·µ£ (n PointedSets)

_ :   4 PointedSets
    ‚â° (Œ£ Carrier‚ÇÅ ‚à∂ Set ‚Ä¢ Œ£ point‚ÇÅ ‚à∂ Carrier‚ÇÅ
      ‚Ä¢ Œ£ Carrier‚ÇÇ ‚à∂ Set ‚Ä¢ Œ£ point‚ÇÇ ‚à∂ Carrier‚ÇÇ
      ‚Ä¢ Œ£ Carrier‚ÇÉ ‚à∂ Set ‚Ä¢ Œ£ point‚ÇÉ ‚à∂ Carrier‚ÇÉ
      ‚Ä¢ Œ£ Carrier‚ÇÑ ‚à∂ Set ‚Ä¢ Œ£ point‚ÇÑ ‚à∂ Carrier‚ÇÑ ‚Ä¢ ‚ä§)
_ = refl
#+end_src
Using traditional grouping mechanisms, it is difficult to create the family of
types =n PointedSets= since the number of fields, $2 √ó n$, depends on $n$.

It is interesting to note that the termtype of ~PointedPF~ is the same as the
termtype of ~PointedOver~, the ~Maybe~ type constructor!
#+begin_src agda2
PointedD : (X : Set) ‚Üí Set‚ÇÅ
PointedD X = termtype (PointedPF (Lift _ X) :waist 1)

-- Pattern synonyms for more compact presentation
pattern nothingP = Œº (inj‚ÇÅ tt)
pattern justP x  = Œº (inj‚ÇÇ (lift x))

casingP : ‚àÄ {X} (e : PointedD X)
        ‚Üí (e ‚â° nothingP) ‚äé (Œ£ x ‚à∂ X ‚Ä¢ e ‚â° justP x)
casingP nothingP  = inj‚ÇÅ refl
casingP (justP x) = inj‚ÇÇ (x , refl)
#+end_src

* Next Steps

  We have shown how a bit of reflection allows us to have a compact, yet
  practical, one-stop-shop notation for records, typeclasses, and algebraic
  data types. There are a number of interesting directions to pursue:

  + How to write a function working homogeneously over one variation and having
    it lift to other variations.
    - Recall the ~comap~ from the introductory section was written over
      ~Graph :kind ‚Äµtypeclass~; how could that particular implementation
       be massaged to work over ~Graph :kind ùìÄ~ for any ~ùìÄ~.

  + The current implementation for deriving termtypes presupposes only one
    carrier set positioned as the first entity in the grouping mechanism.
    - How do we handle multiple carriers or choose a carrier from an arbitrary
      position or by name? =PackageFormer= handles this by comparing names.

  + How do we lift properties or invariants, simple ~‚â°~-types that ‚Äòdefine‚Äô
    a previous entity to be top-level functions in their own right?

Lots to do, so little time.

* COMMENT DSTerms

* COMMENT Old Ideas
** COMMENT Introduction [0/4]                                :boring:unclear:

   + [ ] Show example of a PackageFormer.
         - Demonstrate how: PackageFormer  ‚âà  named context + header.
   + [ ] Show example of how it can be used to give a record.
   + [ ] Show how it can be used to give us a homomorphism definition.
   + [ ] What are the pre- and post-conditions of the homomorphism construction?
         - This is what we are trying to solve.

** COMMENT A Grammar for PackageFormer [0/5]               :rather:promising:

   + [ ] Grammar for PackageFormer heading.
   + [ ] Grammar for element datatype.
   + [ ] Grammar for ‚Äútypes‚Äù.
     - We clearly cannot use any Agda/MLTT types.
   + [ ] Define a fold for PackageFormer ---the homepage currently calls this ~graph-map~ due to
         the graph theoretic nature of element dependencies.
   + [ ] Prove that this fold preserves well-formedness & well-typedness of PackageFormers.
     - This is the semantics function!
     - *PackageFormers are an M-Set and fold is an M-Set homomorphism!*

       Call this M-Set ‚Äúùë∑ùë≠‚Äù.
       1. Two sorts: ~PackageFormer~ and ~Element~.
       2. Action: ~_‚óÅ_ : PackageFormer ‚Üí Element ‚Üí PackageFormer~
       3. Monoid on ~PackageFormer~
          - Unit: The empty PackageFormer
          - Bop: Union of contexts
            + If they agree on their intersection, then union of element lists;
              otherwise ‚Äòcrash‚Äô by yielding ANN.
            + ANN is the annihilating PackageFormer: It is a postulated value
              that acts as the zero of union.
            - This ensures that a crash propagates and so a union of PF's
                is ANN if any two items conflict.
            - E.g., ‚Äúcrash : PackageFormer‚ä• ‚Üí PackageFormer‚ä• ‚Üí Boolean‚Äù
                is defined with ‚Äúcrash ‚ä• x ‚âà true‚Äù and symmetrically so.
            - Taking ANN = ‚ä•, as a bottom element; e.g., ~nothing~.
            + Proof outline of associativity:
            - Case 1: No crashes, then ordinary list catenation, which is associative.
            - Case 2: Some two items conflict, then ANN is propagated and both sides equal ANN.

*** Deriving Fold

    1. Define a ‚ÄúRight M-Set‚Äù ( close, but not really ):
       #+BEGIN_SRC agda
PackageFormer M-Set : Set‚ÇÅ where
   Carrier‚ÇÅ     : Set
   Carrier‚ÇÇ     : Set
   _‚óÅ_          : Carrier‚ÇÅ ‚Üí Carrier‚ÇÇ ‚Üí Carrier‚ÇÅ
   ‚àÖ            : Carrier‚ÇÅ
   _‚à™_          : Carrier‚ÇÅ ‚Üí Carrier‚ÇÅ ‚Üí Carrier‚ÇÅ
   leftId       : {ùìã : Carrier‚ÇÇ}  ‚Üí  ‚àÖ ‚óÅ ùìã  ‚â°  ùìã
   assoc        : {a b : Carrier‚ÇÅ} {ùìã : Carrier‚ÇÇ} ‚Üí (a ‚à™ b) ‚óÅ ùìã  ‚â°  a ‚à™ (b ‚óÅ ùìã)
 #+END_SRC

    2. Let ‚Ñ≥ denote an M-Set.

    3. For ~fold : ùë∑ùë≠ ‚ü∂ ‚Ñ≥~ to be an M-Set homomorphism, we are *forced* to have ‚Ä¶

    4. Two maps, ~fold·µ¢ : ùë∑ùë≠.Carrier·µ¢ ‚Üí ‚Ñ≥.Carrier·µ¢~
    5. ~fold‚ÇÅ~ is a monoid homomorphism
       1. Unit‚ÇÅ: ~fold‚ÇÅ ‚àÖ ‚âà ‚àÖ~
       2. Assoc‚ÇÅ: ~fold‚ÇÅ (p ‚à™ q) ‚âà fold‚ÇÅ p ‚à™ fold‚ÇÅ q~
    6. Equivariance:
       ~fold‚ÇÅ (p ‚óÅ e) ‚âà fold‚ÇÅ p ‚óÅ fold‚ÇÇ e~

       \newpage

    7. Since a PackageFormer, by extensionality, can always be expressed
       as a finite sequence of extensions we find:
        #+BEGIN_SRC agda
  fold‚ÇÅ p
= {- Extensionality, with e·µ¢ elements of p -}
  fold‚ÇÅ (‚àÖ ‚óÅ e‚ÇÅ ‚óÅ e‚ÇÇ ‚óÅ ‚ãØ ‚óÅ e‚Çô)
= {- Equivariance (6) -}
  fold‚ÇÅ ‚àÖ ‚óÅ fold‚ÇÇ e‚ÇÅ ‚óÅ ‚ãØ ‚óÅ fold‚ÇÇ e‚Çô
= {- Unit (5.1) -}
  ‚àÖ ‚óÅ fold‚ÇÇ e‚ÇÅ ‚óÅ ‚ãØ ‚óÅ fold‚ÇÇ e‚Çô
= {- M-Set.leftId -}
  fold‚ÇÇ e‚ÇÅ ‚óÅ ‚ãØ ‚óÅ fold‚ÇÇ e‚Çô
 #+END_SRC

    8. Whence it seems ~fold‚ÇÅ~ is defined uniquely in terms of ~fold‚ÇÇ~ ---which is unsurprising:
       *PackageFormers are an inductive type!*

    9. TODO: Realise this argument _within_ Agda!

** COMMENT An Application to Universal Algebra                :super_sketchy:
   + [ ] Grammar for the minimal language necessary to form homomorphism contexts.
     - How? What? Huh!?
     - I'm not sure I know what I'm thinking here.
     - I'm trying to ‚Äúknow‚Äù what the ~hom~ variational, from the webpage does!
   + [ ] Define a function: ~ùëØ : PFSyntax ‚Üí List HomoSyntax~.
   + [ ] Show a coherence such as ~ùëØ(T ‚óÅ e) = ùëØ T ‚óÅ ùëØ e~
         where ‚óÅ denotes context extension; i.e., append.
     - This would ensure that we have a ‚Äòmodular‚Äô way to define homomorphisms.

   Applications to structures that CS people are interested in?
   - Monoids    ‚áê for-loops
   - Graphs     ‚áê databases
   - Lattices   ‚áê optimisation

     \vfill

** COMMENT Conclusion & Next Steps                                  :sketchy:

   + Initial semantics is enough?
   + Limitations?
   + Dependent-type?
   + A counterexample not covered by the semantics?
   + Soundness?

** space COMMENT newpage                                             :ignore:
   \newpage
** COMMENT Bib                                                       :ignore:

  #+latex: \bibliography{References}
  #+latex: \bibliographystyle{plainnat}
  # latex: \bibliographystyle{ACM-Reference-Format}

** OLD COMMENT Idea: Making Staging Accessible by Generating Partial Evaluators (Short Paper)
*** Abstract                                                         :ignore:
  # Do not use footnotes and references in the abstract!

  #+begin_abstract


    Interpreters are generally written with a syntax first then an interpretation second.
    The relationship between the two is sometimes made explicit by having the
    interpretation function target an existing record type ---e.g., syntactic
    datatype constructors are mapped to semantic projections of record values.
    However, this process only needs the record definition ---all else is needless
    duplication.

    Using ~PackageFormer~, a recent Emacs editor extension to the dependently typed language
    Agda, we demonstrate how partially-static data may be mechanically derived from
    theory presentations. Moreover, we also show how to mechanically obtain
    the necessary tools to work with staged interpreters; namely, automatically deriving
    evaluation functions and notions of ground terms.
  #+end_abstract

   \maketitle
*** Relevant Links
    + [[http://www.cs.tsukuba.ac.jp/~kam/papers/pepm2018.pdf][Program Generation for ML Modules]] --- Kameyama et al.
    + [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.438.6924&rep=rep1&type=pdf][A Gentle Introduction to Multi-stage Programming]] -- Walid Taha
    + [[https://www.cl.cam.ac.uk/~jdy22/papers/partially-static-data-as-free-extension-of-algebras.pdf][Partially-Static Data as Free Extension of Algebras]] -- Yallop et al.
    + [[http://okmij.org/ftp/meta-programming/StagingNG.pdf][Staging Beyond Terms: Prospects and Challenges]] --- Oleg et al.

*** Introduction: The Difficulties of Staging

  + Easy to get things wrong!

*** Automatically Introducing Dynamic Forms

  + A view that adds on variables and forms partial evaluators

  #+BEGIN_SRC agda
data BindingTime : Set where Static Dynamic : BindingTime

{- Aliases -}
Now   = Static
Later = Dynamic
          #+END_SRC

  Then:
  #+BEGIN_SRC agda
{- Given -}
record Magma : Set‚ÇÅ where
  field
    Carrier : Set
    _‚äï_     : Carrier ‚Üí Carrier ‚Üí Carrier

power‚ÇÄ : {{‚Ñ≥ : Magma }} (let M = Magma.Carrier ‚Ñ≥)
      ‚Üí M ‚Üí ‚Ñï ‚Üí M
power‚ÇÄ x zero    = x
power‚ÇÄ x (suc n) = x ‚äï power‚ÇÄ x n

instance
  ùí© : Magma
  ùí© = record {Carrier = ‚Ñï; _‚äï_ = _√ó_}

{- Obtain -}

---------------------------------------------------------------------------------------

{- Tree = Magma termtype with injection ‚ÄúLeaf‚Äù -}
data Tree (A : Set) ‚Üí Set where
   Leaf   : A ‚Üí Tree A
   Branch : Tree A ‚Üí Tree A ‚Üí Tree A

{- Proof obligation -}
instance
   tree-is-magma : ‚àÄ {A} ‚Üí Magma
   tree-is-magma {A} = record {Carrier = Tree A; _‚äï_ = Branch}

{- Evaluator; terms reduce completely. -}
eval : (‚Ñ≥ : Magma) ‚Üí let M = Magma.Carrier ‚Ñ≥
                      in  Tree M ‚Üí M
eval (Leaf m) = m
eval (Branch l r) = eval l ‚äï evla r

{- An instance of power‚ÇÄ -}
power‚ÇÅ : {A : Set} ‚Üí Tree A ‚Üí ‚Ñï ‚Üí Tree A
power‚ÇÅ x zero    = x
power‚ÇÅ x (suc n) = Branch x (power‚ÇÅ x n)

----------------------------------------------------------------------------------------
{- Terms with variables -}
data TreeV (A B : Set) ‚Üí Set where
   Value    : A ‚Üí TreeV A B
   Variable : B ‚Üí TreeV A B
   Branch   : TreeV A B ‚Üí TreeV A B ‚Üí TreeV A B

{- Reduction for ‚ÄúTreeV String ùí©‚Äù may be blocked by variables -}
evalV : (‚Ñ≥ : Magma) {V : Set} ‚Üí
          let M = Magma.Carrier ‚Ñ≥
          in (V ‚Üí M) ‚Üí TreeV M V ‚Üí M
evalV œÉ (Value m)    = m
evalV œÉ (Variable v) = œÉ v
evalV œÉ (Branch l r) = evalV œÉ l ‚äï evalV œÉ r

{- *NOT* an instance of power‚ÇÄ; but a generalisation thereof! -}
power : {{‚Ñ≥ : Magma }} (let M = Magma.Carrier ‚Ñ≥)
      ‚Üí TreeV M V ‚Üí ‚Ñï ‚Üí TreeV M V
power x zero    = x
power x (suc n) = x ‚äï power x n
  #+END_SRC

*** Multistaging via PackageFormers

    + How writing different PackageFormers allows us to merely select to what degree we want
      staging to occur; e.g., stage·µ¢.
*** Conclusion and Next Steps

    + Theory?
    + Applications?
    + Pedagogy?

** COMMENT footer                                                    :ignore:

 # Local Variables:
 # eval: (progn (org-babel-goto-named-src-block "make-acmart-class") (org-babel-execute-src-block))
 # compile-command: (progn (org-babel-tangle) (org-latex-export-to-pdf) (async-shell-command "open Paper1.pdf"))
 # End:
