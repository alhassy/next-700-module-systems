# (org-babel-tangle)
# C-c C-v t
# ~200 items tangled


# Org-ref with helm-bibtex is rather nifty way to
# navigate bib database, so may dismiss this org-mode
# file in-favour of raw .bib.
#

# URLs and ISSNs are superfluous when a DOI is provided.
# add DOIs if available (then remove the URLs).

#+TITLE: References for The Next 700 Module Systems
#+DESCRIPTION: Bib references for use in this repo
#+AUTHOR: [[mailto:alhassm@mcmaster.ca][Musa Al-hassy]]
#+EMAIL: alhassy@gmail.com
#+OPTIONS: toc:nil d:nil title:nil
#+PROPERTY: header-args :tangle References.bib :comments link

# Using biblio-lookup tool in emacs to make my bibtexs.
#
# In doubt, use http://www.citationmachine.net/bibtex
# Give it a site and it tries to generate a bibtex.

* For GPCE.org
#+BEGIN_SRC latex
@online{alhassy_thesis_proposal,
  author    = {Musa Al-hassy},
  title     = {The Next 700 Module Systems: Extending Dependently-Typed Languages to Implement Module System Features In The Core Language},
  school    = {McMaster University},
  year      = {2019},
  url       = {https://alhassy.github.io/next-700-module-systems-proposal/thesis-proposal.pdf}
}

@Online{types_overview,
  author       = {Nino Guallart},
  title        = {An Overview of Type Theories},
  year         = 2014,
  archiveprefix= {arXiv},
  eprint       = {1411.1029v2},
  primaryclass = {math.LO}
}

@PhdThesis{Norell-2007,
  author =   {Ulf Norell},
  title =    {Towards a Practical Programming Language Based on Dependent Type Theory},
  OPTschool  = {Department of Computer Science and Engineering, Chalmers University of Technology},
  school  = {Dept.\null{} Comp.\null{} Sci.\null{} and Eng., Chalmers Univ.\null{} of Technology},
  year =     2007,
  month = SEP,
}

@online{Hales-blog-post,
  author    = {Tom Hales},
  title     = {A Review of the Lean Theorem Prover},
  year      = {2018},
  url       = {https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/}
}
#+END_SRC

* For thesis-proposal.org
** Theory Presentation Combinators :tpc:
#+BEGIN_SRC latex
@Article{tpc,
  author       = {Carette, Jacques and O’Connor, Russell},
  title        = {Theory Presentation Combinators},
  year         = 2012,
  pages        = {202–215},
  doi          = {10.1007/978-3-642-31374-5_14},
  journal      = {Intelligent Computer Mathematics},
  publisher    = {Springer Berlin Heidelberg}
}
#+END_SRC
** Computing with Semirings and Weak Rig Groupoids :rig_computations:
#+BEGIN_SRC latex
@InProceedings{rig_computations,
  author       = {Jacques Carette and Amr Sabry},
  title        = {Computing with Semirings and Weak Rig Groupoids},
  year         = 2016,
  booktitle    = {Programming Languages and Systems - 25th European
          Symposium on Programming, {ESOP} 2016, Held as Part
          of the European Joint Conferences on Theory and
          Practice of Software, {ETAPS} 2016, Eindhoven, The
          Netherlands, April 2-8, 2016, Proceedings},
  pages        = {123-148},
  doi          = {10.1007/978-3-662-49498-1\_6},
  url          = {https://doi.org/10.1007/978-3-662-49498-1\_6},
  crossref     = {DBLP:conf/esop/2016},
  timestamp    = {Fri, 02 Nov 2018 09:46:30 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/esop/CaretteS16},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Hasochism: the pleasure and pain of dependently typed haskell programming :hasochism:
#+BEGIN_SRC latex
@InProceedings{hasochism,
  author       = {Sam Lindley and Conor McBride},
  title        = {Hasochism: the pleasure and pain of dependently
          typed haskell programming},
  year         = 2013,
  booktitle    = {Proceedings of the 2013 {ACM} {SIGPLAN} Symposium on
          Haskell, Boston, MA, USA, September 23-24, 2013},
  pages        = {81-92},
  doi          = {10.1145/2503778.2503786},
  url          = {https://doi.org/10.1145/2503778.2503786},
  timestamp    = {Tue, 06 Nov 2018 16:58:22 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/haskell/LindleyM13},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Deriving Via                                                :deriving_via:
#+BEGIN_SRC latex
@InProceedings{deriving_via,
  author       = {Baldur Bl{\"{o}}ndal and Andres L{\"{o}}h and Ryan
          Scott},
  title        = {Deriving via: or, how to turn hand-written instances
          into an anti-pattern},
  year         = 2018,
  booktitle    = {Proceedings of the 11th {ACM} {SIGPLAN}
          International Symposium on Haskell, Haskell@ICFP
          2018, St. Louis, MO, USA, September 27-17, 2018},
  pages        = {55-67},
  doi          = {10.1145/3242744.3242746},
  url          = {https://doi.org/10.1145/3242744.3242746},
  timestamp    = {Tue, 11 Dec 2018 19:30:58 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/haskell/BlondalLS18},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Realms: A Structure for Consolidating Knowledge about Mathematical Theories :realms:
#+BEGIN_SRC latex
@Online{realms,
  author       = {Jacques Carette AND William M. Farmer AND Michael
          Kohlhase},
  title        = {{Realms: A Structure for Consolidating Knowledge
          about Mathematical Theories}},
  year         = 2014,
  archiveprefix= {arXiv},
  eprint       = {1405.5956v1},
  primaryclass = {cs.MS}
}
#+END_SRC
** programatica, haskell_modules_formally, haskell_in_haskell, classic_haskell_genericity
#+BEGIN_SRC latex
@InProceedings{classic_haskell_genericity,
  author = {Tim Sheard},
  title = {Generic Unification via Two-Level Types and Parameterized Modules},
  booktitle = {ICFP 2001},
  publisher = {acm press},
  note = {to appear},
}

@Unpublished{haskell_in_haskell,
  author = {Tim Sheard and William Harrison and James Hook},
  title = {Modeling the Fine Control of Demand in Haskell.},
  note = {(submitted to Haskell workshop 2001)},
  OPTkey = {},
  OPTmonth = {},
  year = 2001,
}

@InProceedings{haskell_modules_formally,
  author = {Iavor S. Diatchki and Mark P. Jones and Thomas Hallgren },
  title = {A formal specification of the {Haskell 98} module system },
  crossref = {Haskell2002},
  pages = {17--28},
  URL = {http://doi.acm.org/10.1145/581690.581692},
  abstract = {Many programming languages provide means to split large
      programs into smaller modules. The module system of a language
      specifies what constitutes a module and how modules interact.This
      paper presents a formal specification of the module system for the
      functional programming language Haskell. Although many aspects of
      Haskell have been subjected to formal analysis, the module system
      has, to date, been described only informally as part of the Haskell
      language report. As a result, some aspects of it are not well
      understood or are under-specified; this causes difficulties in
      reasoning about Haskell programs, and leads to practical problems
      such as inconsistencies between different implementations. One
      significant aspect of our work is that the specification is written
      in Haskell, which means that it can also be used as an executable
      test-bed, and as a starting point for Haskell implementers.}
}

@InProceedings{programatica,
  author = {Thomas Hallgren and James Hook and Mark P. Jones and Richard B. Kieburtz},
  title =        {An Overview of the Programatica Toolset},
  booktitle =  {HCSS '04},
  URL =          {http://www.cse.ogi.edu/PacSoft/projects/programatica/},
  bibliographies = {HHOL},
}
#+END_SRC
** packaging_mathematical_structures
#+BEGIN_SRC latex
@InProceedings{packaging_mathematical_structures,
  author       = {Garillot, Fran{\c c}ois and Gonthier, Georges and
          Mahboubi, Assia and Rideau, Laurence},
  title        = {{Packaging Mathematical Structures}},
  year         = 2009,
  booktitle    = {{Theorem Proving in Higher Order Logics}},
  editor       = {Tobias Nipkow and Christian Urban},
  volume       = 5674,
  series       = {Lecture Notes in Computer Science},
  publisher    = {{Springer}},
  url          = {https://hal.inria.fr/inria-00368403},
  address      = {Munich, Germany},
  keywords     = {Formalization of Algebra ; Coercive subtyping ; Type
          inference ; Coq ; SSReflect},
  pdf          = {https://hal.inria.fr/inria-00368403/file/main.pdf},
  hal_id       = {inria-00368403},
  hal_version  = {v2}
}
#+END_SRC
** A modular module system
#+BEGIN_SRC latex
@Article{modular_modules,
  author       = {Xavier Leroy},
  title        = {A modular module system},
  year         = 2000,
  volume       = 10,
  number       = 3,
  pages        = {269-303},
  journal      = {J. Funct. Program.},
  timestamp    = {Fri, 10 Jun 2011 14:42:13 +0200},
  doi = {10.1017/S0956796800003683},
  biburl       = {https://dblp.org/rec/bib/journals/jfp/Leroy00},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** A type system for higher-order modules :types_for_modules:
#+BEGIN_SRC latex
@InProceedings{types_for_modules,
  author       = {Derek Dreyer and Karl Crary and Robert Harper},
  title        = {A type system for higher-order modules},
  year         = 2003,
  booktitle    = {Conference Record of {POPL} 2003: The 30th
          {SIGPLAN-SIGACT} Symposium on Principles of
          Programming Languages, New Orleans, Louisisana, USA,
          January 15-17, 2003},
  pages        = {236-249},
  doi          = {10.1145/640128.604151},
  url          = {https://doi.org/10.1145/640128.604151},
  timestamp    = {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/popl/DreyerCH03},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Understanding TypeScript                       :understanding_typescript:
#+BEGIN_SRC latex
@InProceedings{understanding_typescript,
  author       = {Gavin M. Bierman and Mart{\'{\i}}n Abadi and Mads
          Torgersen},
  title        = {Understanding TypeScript},
  year         = 2014,
  booktitle    = {{ECOOP} 2014 - Object-Oriented Programming - 28th
          European Conference, Uppsala, Sweden, July 28 -
          August 1, 2014. Proceedings},
  pages        = {257-281},
  doi          = {10.1007/978-3-662-44202-9\_11},
  url          = {https://doi.org/10.1007/978-3-662-44202-9\_11},
  timestamp    = {Tue, 18 Jul 2017 16:43:00 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/ecoop/BiermanAT14},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Type inference in mathematics :type_inference_in_math:
#+BEGIN_SRC latex
@Online{type_inference_in_math,
  author       = {Jeremy Avigad},
  title        = {{Type inference in mathematics}},
  year         = 2011,
  archiveprefix= {arXiv},
  eprint       = {1111.5885v2},
  primaryclass = {cs.LO}
}
#+END_SRC

** First-class modules for component-based programming: Case for support :first_class_modules_support:
#+BEGIN_SRC latex
@misc{first_class_modules_support,
title={First-class modules for component-based programming: Case for support}, url={https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.48.5793}, journal={CiteSeerX}}
#+END_SRC

** Using Dependent Types to Express Modular Structure :dtls_give_modules:
#+BEGIN_SRC latex
@InProceedings{dtls_give_modules,
  author       = {David B. MacQueen},
  title        = {Using Dependent Types to Express Modular Structure},
  year         = 1986,
  booktitle    = {Conference Record of the Thirteenth Annual {ACM}
          Symposium on Principles of Programming Languages,
          St. Petersburg Beach, Florida, USA, January 1986},
  pages        = {277-286},
  doi          = {10.1145/512644.512670},
  url          = {https://doi.org/10.1145/512644.512670},
  timestamp    = {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/popl/MacQueen86},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** (Re-)Creating sharing in Agda's GHC backend :perna:
#+BEGIN_SRC latex
@misc{perna, title={(Re-)Creating sharing in Agda's GHC backend}, url={https://macsphere.mcmaster.ca/handle/11375/22177}, journal={MacSphere}, author={Natalie Perna}, year={2017}, month={Jan}}
#+END_SRC
** A New Style of Proof for Mathematics Organized as a Network of Axiomatic Theories :purposes_of_proof:
#+BEGIN_SRC latex
@Online{purposes_of_proof,
  author       = {William M. Farmer},
  title        = {{A New Style of Proof for Mathematics Organized as a
          Network of Axiomatic Theories}},
  year         = 2018,
  archiveprefix= {arXiv},
  eprint       = {1806.00810v2},
  primaryclass = {cs.LO}
}
#+END_SRC

** Backpack: retrofitting Haskell with interfaces} :haskell_backpack:
#+BEGIN_SRC latex
@InProceedings{haskell_backpack,
  author       = {Scott Kilpatrick and Derek Dreyer and Simon
          L. {Peyton Jones} and Simon Marlow},
  title        = {Backpack: retrofitting Haskell with interfaces},
  year         = 2014,
  booktitle    = {The 41st Annual {ACM} {SIGPLAN-SIGACT} Symposium on
          Principles of Programming Languages, {POPL} '14, San
          Diego, CA, USA, January 20-21, 2014},
  pages        = {19-32},
  doi          = {10.1145/2535838.2535884},
  url          = {https://doi.org/10.1145/2535838.2535884},
  timestamp    = {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/popl/KilpatrickDJM14},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** The next 700 syntactical models of type theory :seven_hundred_tt_models:
#+BEGIN_SRC latex
@InProceedings{seven_hundred_tt_models,
  author       = {Simon Boulier and Pierre{-}Marie P{\'{e}}drot and
          Nicolas Tabareau},
  title        = {The next 700 syntactical models of type theory},
  year         = 2017,
  booktitle    = {Proceedings of the 6th {ACM} {SIGPLAN} Conference on
          Certified Programs and Proofs, {CPP} 2017, Paris,
          France, January 16-17, 2017},
  pages        = {182-194},
  doi          = {10.1145/3018610.3018620},
  url          = {https://doi.org/10.1145/3018610.3018620},
  timestamp    = {Tue, 06 Nov 2018 16:59:23 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/cpp/BoulierPT17},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Isabelle: The Next 700 Theorem Provers            :seven_hundred_provers:
#+BEGIN_SRC latex
@Article{seven_hundred_provers,
  author       = {Lawrence C. Paulson},
  title        = {Isabelle: The Next 700 Theorem Provers},
  year         = 1993,
  volume       = {cs.LO/9301106},
  url          = {http://arxiv.org/abs/cs.LO/9301106},
  journal      = {CoRR},
  timestamp    = {Mon, 13 Aug 2018 16:48:11 +0200},
  biburl       =
          {https://dblp.org/rec/bib/journals/corr/cs-LO-9301106},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** The Next 700 Challenge Problems for Reasoning with HOAS
#+BEGIN_SRC latex
@Article{seven_hundred_hoas,
  author       = {Amy P. Felty and Alberto Momigliano and Brigitte
          Pientka},
  title        = {The Next 700 Challenge Problems for Reasoning with
          Higher-Order Abstract Syntax Representations - Part
          2 - {A} Survey},
  year         = 2015,
  volume       = 55,
  number       = 4,
  pages        = {307-372},
  doi          = {10.1007/s10817-015-9327-3},
  url          = {https://doi.org/10.1007/s10817-015-9327-3},
  journal      = {J. Autom. Reasoning},
  timestamp    = {Fri, 15 Sep 2017 17:21:46 +0200},
  biburl       = {https://dblp.org/rec/bib/journals/jar/FeltyMP15},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** The next 700 programming libraries
#+BEGIN_SRC latex
@InProceedings{seven_hundred_libraries,
  author       = {Ant{\'{o}}nio Menezes Leit{\~{a}}o},
  title        = {The next 700 programming libraries},
  year         = 2007,
  booktitle    = {International Lisp Conference, {ILC} 2007,
          Cambridge, UK, April 1-4, 2007},
  pages        = 21,
  doi          = {10.1145/1622123.1622147},
  url          = {https://doi.org/10.1145/1622123.1622147},
  crossref     = {DBLP:conf/lfp/2007},
  timestamp    = {Tue, 06 Nov 2018 16:58:56 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/lfp/Leitao07},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** The next 700 programming languages
#+BEGIN_SRC latex
@Article{seven_hundred_langs,
  author       = {Peter J. Landin},
  title        = {The next 700 programming languages},
  year         = 1966,
  volume       = 9,
  number       = 3,
  pages        = {157-166},
  doi          = {10.1145/365230.365257},
  url          = {https://doi.org/10.1145/365230.365257},
  journal      = {Commun. {ACM}},
  timestamp    = {Wed, 14 Nov 2018 10:22:35 +0100},
  biburl       = {https://dblp.org/rec/bib/journals/cacm/Landin66},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** The next 700 data description languages
#+BEGIN_SRC latex
@Article{seven_hundred_data,
  author       = {Kathleen Fisher and Yitzhak Mandelbaum and David
          Walker},
  title        = {The next 700 data description languages},
  year         = 2010,
  volume       = 57,
  number       = 2,
  pages        = {10:1--10:51},
  doi          = {10.1145/1667053.1667059},
  url          = {https://doi.org/10.1145/1667053.1667059},
  journal      = {J. {ACM}},
  timestamp    = {Tue, 06 Nov 2018 12:51:46 +0100},
  biburl       = {https://dblp.org/rec/bib/journals/jacm/FisherMW10},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Locales and Locale Expressions in Isabelle/Isar :locales:
#+BEGIN_SRC latex
@InProceedings{locales,
  author       = {Clemens Ballarin},
  title        = {Locales and Locale Expressions in Isabelle/Isar},
  year         = 2003,
  booktitle    = {Types for Proofs and Programs, International
          Workshop, {TYPES} 2003, Torino, Italy, April 30 -
          May 4, 2003, Revised Selected Papers},
  pages        = {34-50},
  doi          = {10.1007/978-3-540-24849-1\_3},
  url          = {https://doi.org/10.1007/978-3-540-24849-1\_3},
  timestamp    = {Thu, 15 Jun 2017 21:39:32 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/types/Ballarin03},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** All about maude :maude:
#+BEGIN_SRC latex
@Book{maude,
  title        = {All About Maude - {A} High-Performance Logical
          Framework, How to Specify, Program and Verify
          Systems in Rewriting Logic},
  year         = 2007,
  editor       = {Manuel Clavel and Francisco Dur{\'{a}}n and Steven
          Eker and Patrick Lincoln and Narciso
          Mart{\'{\i}}{-}Oliet and Jos{\'{e}} Meseguer and
          Carolyn L. Talcott},
  volume       = 4350,
  series       = {Lecture Notes in Computer Science},
  publisher    = {Springer},
  isbn         = {978-3-540-71940-3},
  doi          = {10.1007/978-3-540-71999-1},
  url          = {https://doi.org/10.1007/978-3-540-71999-1},
  timestamp    = {Wed, 14 Mar 2018 11:45:08 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/maude/2007},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Beluga: Programming with Dependent Types, Contextual                  Data, and Contexts :beluga:
#+BEGIN_SRC latex
@InProceedings{beluga,
  author       = {Brigitte Pientka},
  title        = {Beluga: Programming with Dependent Types, Contextual
          Data, and Contexts},
  year         = 2010,
  booktitle    = {Functional and Logic Programming, 10th International
          Symposium, {FLOPS} 2010, Sendai, Japan, April 19-21,
          2010. Proceedings},
  pages        = {1-12},
  doi          = {10.1007/978-3-642-12251-4\_1},
  url          = {https://doi.org/10.1007/978-3-642-12251-4\_1},
  timestamp    = {Sun, 21 May 2017 00:19:14 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/flops/Pientka10},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Canonical Structures for the working Coq user :coq_canonical_tutorial:
#+BEGIN_SRC latex
@InProceedings{coq_canonical_tutorial,
  author       = {Mahboubi, Assia and Tassi, Enrico},
  title        = {{Canonical Structures for the working Coq user}},
  year         = 2013,
  booktitle    = {{ITP 2013, 4th Conference on Interactive Theorem
          Proving}},
  editor       = {Sandrine Blazy and Christine Paulin and David
          Pichardie},
  volume       = 7998,
  series       = {LNCS},
  publisher    = {{Springer}},
  month        = Jul,
  pages        = {19-34},
  doi          = {10.1007/978-3-642-39634-2\_5},
  url          = {https://hal.inria.fr/hal-00816703},
  address      = {Rennes, France},
  pdf          = {https://hal.inria.fr/hal-00816703/file/main.pdf},
  hal_id       = {hal-00816703},
  hal_version  = {v2}
}
#+END_SRC

** How to make ad hoc proof automation less ad hoc           :coq_canonical:
#+BEGIN_SRC latex
@Article{coq_canonical,
  author       = {Georges Gonthier and Beta Ziliani and Aleksandar
          Nanevski and Derek Dreyer},
  title        = {How to make ad hoc proof automation less ad hoc},
  year         = 2013,
  volume       = 23,
  number       = 4,
  pages        = {357-401},
  doi          = {10.1017/S0956796813000051},
  url          = {https://doi.org/10.1017/S0956796813000051},
  journal      = {J. Funct. Program.},
  timestamp    = {Sat, 27 May 2017 14:24:34 +0200},
  biburl       = {https://dblp.org/rec/bib/journals/jfp/GonthierZND13},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Mizar Course in Logic and Set Theory :mizar_logic_course:
#+BEGIN_SRC latex
@InCollection{mizar_logic_course,
   author = {Borak, Ewa and Zalewska, Anna},
   affiliation = {University of Bialystok, Institute of Computer Science, Białystok Poland},
   title = {Mizar Course in Logic and Set Theory},
   booktitle = {Towards Mechanized Mathematical Assistants},
   series = {Lecture Notes in Computer Science},
   editor = {Kauers, Manuel and Kerber, Manfred and Miner, Robert and Windsteiger, Wolfgang},
   publisher = Springer,
   pages = {191--204},
   volume = {4573},
   DOIURL = {http://dx.doi.org/10.1007/978-3-540-73086-6_17},
   DOI = {10.1007/978-3-540-73086-6_17},
   abstract = {From the very beginning of the development of the Mizar system experiments with using Mizar as a tool for teaching mathematics have been conducted. Numerous organized courses were based on different versions of the system: starting from the first implementation of its processor, through Mizar-MSE, Mizar–4 and PC–Mizar up till its present version. Now Mizar with its mathematical library gives us quite new didactic possibilities.  The purpose of this paper is to present a certain course on logic and set theory offered by our Institute for freshman students. The course employs Mizar as the main tool of instruction. In the paper we discuss the organization of this course and describe some examples of students’ tasks. Finally, some conclusions and remarks are given.},
   year = {2007}
}
#+END_SRC
** Mizar in a Nutshell :mizar_nutshell:
#+BEGIN_SRC latex
@Article{mizar_nutshell,
  author =       {Grabowski, Adam and Korni{\l}owicz, Artur and Naumowicz, Adam},
  title =        {Mizar in a Nutshell},
  journal =      {J.~Formalized Reasoning},
  year =         2010,
  volume =    3,
  number =    2,
  pages =     {153--245}
}
#+END_SRC

** Theory Interpretation in Simple Type Theory :theory_interpretations_farmer:

#+BEGIN_SRC latex
@proceedings{theory_interpretations_farmer,
    author={William M. Farmer},
    title={Theory Interpretation in Simple Type Theory},
    year={1993},
    month={September},
    Journal={International Workshop on Higher-Order Algebra, Logic, and Term Rewriting},
    publisher={Springer-Verlag},
    ISBN={3-540-58233-9},
    url={http://imps.mcmaster.ca/doc/interpretations.pdf},
    keywords = {theory interpretations; axiomatic method; interactive theorem proving},
    abstract = {Theory interpretation is a logical technique for relating one
        axiomatic theory to another with important applications in mathematics
        and computer science as well as in logic itself. This paper presents a
        method for theory interpretation in a version of simple type theory, called
        lutins, which admits partial functions and subtypes. The method is
        patterned on the standard approach to theory interpretation in firstorder
        logic. Although the method is based on a nonclassical version of
        simple type theory, it is intended as a guide for theory interpretation in
        classical simple type theories as well as in predicate logics with partial
        functions.},
    note={Theory interpretations formalise folklore of subtheories inheriting properties
      from parent theories such as satisfiability and consistency.

      The idea of interpreting a theory into itself is commonly done in the RATH-Agda project,
      for example, to obtain dual results such as those for lattices and other categorical structures.
    },
}
#+END_SRC

** Dependent Types Ensure Partial Correctness of Theorem Provers :twelf_proves_tp_correctness:
#+BEGIN_SRC latex
@Article{twelf_proves_tp_correctness,
  author       = {Andrew W. Appel and Amy P. Felty},
  title        = {Dependent types ensure partial correctness of
          theorem provers},
  year         = 2004,
  volume       = 14,
  number       = 1,
  pages        = {3-19},
  doi          = {10.1017/S0956796803004921},
  url          = {https://doi.org/10.1017/S0956796803004921},
  journal      = {J. Funct. Program.},
  timestamp    = {Sat, 27 May 2017 14:24:34 +0200},
  biburl       = {https://dblp.org/rec/bib/journals/jfp/AppelF04},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** {IDRIS} --- Systems Programming Meets Full Dependent Types :idris_main:
#+BEGIN_SRC latex
@InProceedings{idris_main,
 author = {Brady, Edwin C.},
 title = {{IDRIS} --- Systems Programming Meets Full Dependent Types},
 booktitle = {Proceedings of the 5th ACM workshop on Programming languages meets program verification},
 series = {PLPV '11},
 year = {2011},
 isbn = {978-1-4503-0487-0},
 location = {Austin, Texas, USA},
 pages = {43--54},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1929529.1929536},
 doi = {http://doi.acm.org/10.1145/1929529.1929536},
 acmid = {1929536},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {data description, dependent types},
 abstract = {Dependent types have emerged in recent years as a promising approach to ensuring program
correctness. However, existing dependently typed languages such as Agda and Coq work at a very high
level of abstraction, making it difficult to map verified programs to suitably efficient executable code.
This is particularly problematic for programs which work with bit level data, e.g. network packet
processing, binary file formats or operating system services. Such programs, being fundamental to the
operation of computers in general, may stand to benefit significantly from program verification techniques.
This paper describes the use of a dependently typed programming language, Idris, for specifying and verifying
properties of low-level systems programs, taking network packet processing as an extended example.
We give an overview of the distinctive features of Idris which allow it to interact with external systems code,
with precise types. Furthermore, we show how to integrate tactic scripts and plugin decision procedures to
reduce the burden of proof on application developers. The ideas we present are readily adaptable to languages
with related type systems.}
}
#+END_SRC

** The {Coq} Reference Manual, version 8.4/8.8                  :coq_manual:
#+BEGIN_SRC latex
@Misc{coq_manual,
  author       = {The {Coq Development Team}},
  title        = {{The Coq Proof Assistant, version 8.8.0}},
  year         = 2018,
  month        = Apr,
  doi          = {10.5281/zenodo.1219885},
  url          = {https://hal.inria.fr/hal-01954564},
  hal_id       = {hal-01954564},
  hal_version  = {v1},
}
#+END_SRC

#+BEGIN_SRC latex :tangle no
@Manual{coq_manual,
  author      = {The {Coq Development Team}},
  title       = {The {Coq} Reference Manual, version 8.4},
  month       = Aug,
  year        = {2012},
  note        = {Available electronically at \url{http://coq.inria.fr/doc}}
}
#+END_SRC
** COMMENT Mechanizing the Metatheory of {LF} :twelf_mechanise_lf:
#+BEGIN_SRC latex
@TechReport{twelf_mechanise_lf,
  author =	 Christian Urban and James Cheney and Stefan Berghofer,
  title =	 {Mechanizing the Metatheory of {LF}},
  institution =  {arXiv.org},
  year =	 2008,
  number =	 {arXiv:0804.1667v1 [cs.LO]},
  month =	 APR,
  note = {Expanded technical report for LICS 2008 conference paper},
  URL =		 {http://arxiv.org/abs/0804.1667v1},
  WKloc = {doc/pap/BIB},
  bibliographies = {HHOL},
  abstract =	 {LF is a dependent type theory in which many other
          formal systems can be conveniently
          embedded. However, correct use of LF relies on
          nontrivial metatheoretic developments such as proofs
          of correctness of decision procedures for LF's
          judgments. Although detailed informal proofs of
          these properties have been published, they have not
          been formally verified in a theorem prover. We have
          formalized these properties within Isabelle/HOL
          using the Nominal Datatype Package, closely
          following a recent article by Harper and
          Pfenning. In the process, we identified and resolved
          a gap in one of the proofs and a small number of
          minor lacunae in others. Besides its intrinsic
          interest, our formalization provides a foundation
          for studying the adequacy of LF encodings, the
          correctness of Twelf-style metatheoretic reasoning,
          and the metatheory of extensions to LF.}
}
#+END_SRC
** COMMENT Pattern Matching with Dependent Types :dtl_pattern_matching:
#+BEGIN_SRC latex
@InProceedings{dtl_pattern_matching,
  author =	 {Thierry Coquand},
  title =	 {Pattern Matching with Dependent Types},
  booktitle =	 {Electronic Proceedings of the
    Third Annual {BRA} Workshop on Logical Frameworks
    ({B{\oring{a}}stad, Sweden})},
  year =	 1992,
}
#+END_SRC
** COMMENT An Algorithm for Type-Checking Dependent Types :dtl_type_checking:
#+BEGIN_SRC latex
@Misc{dtl_type_checking,
  author = Thierry Coquand,
  title = {An Algorithm for Type-Checking Dependent Types},
  year = 1996,
}
#+END_SRC
** TODO COMMENT “To Read” A Logical Framework with Dependently Typed Records
#+BEGIN_SRC latex
@Article{Coquand-Pollack-Takeyama-2005,
  author =	 {Thierry Coquand and Randy Pollack and Makoto Takeyama},
  title =	 {A Logical Framework with Dependently Typed Records},
  journal =	 FUNDI,
  year =	 2005,
  volume =	 65,
  number =	 {1--2},
  pages =	 {113--134},
  bibliographies = {HHOL},
  annote = {see \url{http://unit.aist.go.jp/cvs/Agda/} for Agda}
}
#+END_SRC

** TODO COMMENT “To Read” Interfaces as functors, programs as coalgebras --- A final coalgebra theorem in intensional type theory
#+BEGIN_SRC latex
@Article{Michelbrink-2006,
  author =	 {Markus Michelbrink},
  title =	 {Interfaces as functors, programs as coalgebras ---
          A final coalgebra theorem in intensional type theory},
  journal =	 TCS,
  year =	 {2006},
  OPTkey =	 {},
  OPTvolume =	 {360},
  OPTnumber =	 {1--3},
  OPTpages =	 {415--439},
  OPTmonth =	 AUG,
  DOI =		 {http://dx.doi.org/10.1016/j.tcs.2006.05.033},
  WKloc = {doc/pap/BIB},
  abstract =	 {In [P. Hancock, A. Setzer, Interactive programs in dependent type theory, in: P. Clote, H. Schwichtenberg (Eds.), Proc. 14th Annu. Conf. of EACSL, CSL'00, Fischbau, Germany, 21--26 August 2000, Vol. 1862, Springer, Berlin, 2000, pp. 317--331, \url{citeseer.ist.psu.edu/article/hancock00interactive.html}; P. Hancock, A. Setzer, Interactive programs and weakly final coalgebras in dependent type theory, in: L. Crosilla, P. Schuster (Eds.), From Sets and Types to Topology and Analysis. Towards Practicable Foundations for Constructive Mathematics, Oxford Logic Guides, Clarendon Press, 2005, \url{www.cs.swan.ac.uk/~csetzer/}] Hancock and Setzer introduced rules to extend Martin-Löf's type theory in order to represent interactive programming. The rules essentially reflect the existence of weakly final coalgebras for a general form of polynomial functor. The standard rules of dependent type theory allow the definition of inductive types, which correspond to initial algebras. Coalgebraic types are not represented in a direct way. In this article we show the existence of final coalgebras in intensional type theory for these kind of functors, where we require uniqueness of identity proofs $...$ for the set of states $...$ and the set of commands $...$ which determine the functor. We obtain the result by identifying programs which have essentially the same behaviour, viz. are bisimular. This proves the rules of Setzer and Hancock admissible in ordinary type theory, if we replace definitional equality by bisimulation. All proofs [M. Michelbrink, Verifications of final coalgebra theorem in: Interfaces as Functors, Programs as Coalgebras --- A Final Coalgebra Theorem in Intensional Type Theory, 2005, \url{www.cs.swan.ac.uk/~csmichel/}] are verified in the theorem prover agda [C. Coquand, Agda, Internet, \url{www.cs.chalmers.se/~catarina/agda/}; K. Peterson, A programming system for type theory, Technical Report, S-412 96, Chalmers University of Technology, Göteborg, 1982], which is based on intensional Martin-Löf type theory.}
}
#+END_SRC

** Experience Implementing a Performant Category-Theory Library in {C}oq :coq_cat_experiences:
#+BEGIN_SRC latex
@Online{coq_cat_experiences,
  author       = {Jason Gross AND Adam Chlipala AND David I. Spivak},
  title        = {{Experience Implementing a Performant
          Category-Theory Library in Coq}},
  year         = 2014,
  archiveprefix= {arXiv},
  eprint       = {1401.7694v2},
  primaryclass = {math.CT}
}
#+END_SRC
** Certified Functional Programming --- Program Extraction within {Coq} Proof Assistant :coq_program_extraction:
#+BEGIN_SRC latex
@PhdThesis{coq_program_extraction,
  author =	 {Pierre Letouzey},
  title =	 {Certified Functional Programming --- Program Extraction within {Coq} Proof Assistant},
  school =	 {Universit\'e Paris 7 Denis Diderot},
  year =	 2004,
  address =	 {Jussieu},
  month =	 JUL,
  URL =		 {http://www.pps.jussieu.fr/~letouzey/download/these_letouzey_English.ps.gz},
}
#+END_SRC
** The Calculus of Inductive Definitions and its Implementation: the Coq Proof Assistant :coq_implementation:
#+BEGIN_SRC latex
@InProceedings{coq_implementation,
  author = {Christine Paulin-Mohring},
  title = {The Calculus of Inductive Definitions and its
          Implementation: the Coq Proof Assistant},
  crossref = {LPAR94},
  note = {invited tutorial},
  authorsAddress = {LIP/ENS Lyon  cpaulin\@lip.ens-lyon.fr},
  abstract = {Type Theory serves as a basis for several environments
          dedicated to the formalization of reasoning. We
          shall present the theory and practice of one of
          them: the Coq Proof Assistant.

          This environment is based on a typed lambda-calculus
          called the Calculus of Inductive Definitions. It is
          a powerful language which extends the Calculus of
          Constructions, introduced by Coquand and Huet, with
          a mechanism for general inductive definitions in the
          spirit of Martin-Lof's Intuitionistic Type Theory.

          The Coq proof assistant can be decomposed into three parts.
          \begin{itemize}
          \item A specification language which combines
          higher-order logic, functional programming and
          inductive definitions of relations.
          \item A tactic language which provides several tools
          for the interactive development of proofs of formulas.
          \item An environment for manipulating  proof-terms
          built by the system, especially for extracting ML
          programs out of constructive proofs of specifications.
          \end{itemize}},
}
#+END_SRC
** Program Calculation in Coq :coq_program_calculation:
#+BEGIN_SRC latex
@InProceedings{coq_program_calculation,
   author = {Tesson, Julien and Hashimoto, Hideki and Hu, Zhenjiang and Loulergue, Frédéric and Takeichi, Masato},
   affiliation = {LIFO, Université d’Orléans, France},
   title = {Program Calculation in Coq},
   crossref = {AMAST2010},
   pages = {163-179},
   DOIURL = {http://dx.doi.org/10.1007/978-3-642-17796-5_10},
   DOI = {10.1007/978-3-642-17796-5_10},
   abstract = {Program calculation, being a programming technique that derives programs from specification by means of formula manipulation, is a challenging activity. It requires human insights and creativity, and needs systems to help human to focus on clever parts of the derivation by automating tedious ones and verifying correctness of transformations. Different from many existing systems, we show in this paper that Coq, a popular theorem prover, provides a cheap way to implement a powerful system to support program calculation, which has not been recognized so far. We design and implement a set of tactics for the Coq proof assistant to help the user to derive programs by program calculation and to write proofs in calculational form. The use of these tactics is demonstrated through program calculations in Coq based on the theory of lists.},
}
#+END_SRC
** A Brief Overview of Agda --- A Functional Language with Dependent Types :agda_overview:
#+BEGIN_SRC latex
@InProceedings{agda_overview,
  author       = {Ana Bove and Peter Dybjer and Ulf Norell},
  title        = {A Brief Overview of {Agda} --- {A} Functional Language
                  with Dependent Types},
  year      = {2009},
  booktitle    = {Theorem Proving in Higher Order Logics, 22nd
                  International Conference, TPHOLs 2009, Munich,
                  Germany, August 17--20, 2009. Proceedings},
  pages        = {73--78},
  doi          = {10.1007/978-3-642-03359-9\_6},
  DOIURL          = {https://doi.org/10.1007/978-3-642-03359-9\_6},
  timestamp    = {Tue, 14 May 2019 10:00:48 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/tphol/BoveDN09},
  bibsource    = {dblp computer science bibliography,
                  https://dblp.org}
}
#+END_SRC
** Towards a Practical Programming Language Based on Dependent Type Theory :agda_thesis:
#+BEGIN_SRC latex
@PhdThesis{agda_thesis,
  author =	 {Ulf Norell},
  title =	 {Towards a Practical Programming Language Based on Dependent Type Theory},
  OPTschool  = {Department of Computer Science and Engineering, Chalmers University of Technology},
  school  = {Dept.\null{} Comp.\null{} Sci.\null{} and Eng., Chalmers Univ.\null{} of Technology},
  year =	 2007,
  month = SEP,
  DirectURL =	 {http://www.cs.chalmers.se/~ulfn/papers/thesis.html},
  WKloc =	 {doc/pap/BIB},
  note = {See also \href{http://wiki.portal.chalmers.se/agda/pmwiki.php}{\textsf{http://wiki.portal.chalmers.se/agda/pmwiki.php}}},
  abstract =	 {Dependent type theories have a long history
    of being used for theorem proving.
    One aspect of type theory
    which makes it very powerful as a proof language
    is that it mixes deduction with computation.
    This also makes type theory a good candidate for programming ---
    the strength of the type system allows properties of programs
    to be stated and established,
    and the computational properties provide semantics for the programs.

    This thesis is concerned with bridging the gap
    between the theoretical presentations of type theory
    and the requirements on a practical programming language.
    Although there are many challenging research problems
    left to solve before we have
    an industrial scale programming language based on type theory,
    this thesis takes us a good step along the way.

    In functional programming languages
    pattern matching provides a concise notation for defining functions.
    In dependent type theory, pattern matching becomes even more powerful,
    in that inspecting the value of a particular term
    can reveal information about the types and values of other terms.
    In this thesis we give a type checking algorithm
    for definitions by pattern matching in type theory,
    supporting overlapping patterns,
    and pattern matching on intermediate results using the with rule.

    Traditional presentations of type theory
    suffers from rather verbose notation,
    cluttering programs and proofs with,
    for instance, explicit type information.
    One solution to this problem is to allow
    terms that can be inferred automatically to be omitted.
    This is usually implemented
    by inserting metavariables in place of the omitted terms
    and using unification to solve these metavariables during type checking.
    We present a type checking algorithm for a theory with metavariables
    and prove its soundness
    independent of whether the metavariables are solved or not.

    In any programming language it is important
    to be able to structure large programs into separate units or modules
    and limit the interaction between these modules.
    In this thesis we present a simple, but powerful module system
    for a dependently typed language.
    The main focus of the module system
    is to manage the name space of a program,
    and an important characteristic
    is a clear separation between the module system and the type checker,
    making it largely independent of the underlying language.

    As a side track,
    not directly related to the use of type theory for programming,
    we present a connection between type theory
    and a first-order logic theorem prover.
    This connection saves the user the burden of proving simple,
    but tedious first-order theorems by leaving them for the prover.
    We use a transparent translation to first-order logic
    which makes the proofs constructed by the theorem prover human readable.
    The soundness of the connection is established by a general metatheorem.

    Finally we put our work into practise
    in the implementation of a programming language, Agda,
    based on type theory.
    As an illustrating example we show how to program
    a simple certfied prover for equations in a commutative monoid,
    which can be used internally in Agda.
    Much more impressive examples have been done by others,
    showing that the ideas developed in this thesis are viable in practise. },
}
#+END_SRC
** Working with Mathematical Structures in Type Theory :math_structs_in_types:

#+BEGIN_SRC latex
@InProceedings{math_structs_in_types,
  author       = {Claudio Sacerdoti Coen and Enrico Tassi},
  title        = {Working with Mathematical Structures in Type Theory},
  year         = 2007,
  booktitle    = {Types for Proofs and Programs, International
          Conference, {TYPES} 2007, Cividale del Friuli,
          Italy, May 2-5, 2007, Revised Selected Papers},
  pages        = {157-172},
  doi          = {10.1007/978-3-540-68103-8\_11},
  url          = {https://doi.org/10.1007/978-3-540-68103-8\_11},
  timestamp    = {Thu, 15 Jun 2017 21:39:32 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/types/CoenT07},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** The Zipper                                                       :zipper:
#+BEGIN_SRC latex
@article{zipper,
 author = {Huet, G{\'e}rard},
 title = {The Zipper},
 journal = {J. Funct. Program.},
 issue_date = {September 1997},
 volume = {7},
 number = {5},
 month = sep,
 year = {1997},
 issn = {0956-7968},
 pages = {549--554},
 numpages = {6},
 url = {http://dx.doi.org/10.1017/S0956796897002864},
 doi = {10.1017/S0956796897002864},
 acmid = {969872},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA},
 abstract={Almost every programmer has faced the problem of representing a tree together
       with a subtree that is the focus of attention, where that focus may move left,
       right, up or down the tree. The Zipper is Huet's nifty name for a nifty data
       structure which fulfills this need. I wish I had known of it when I faced this
       task, because the solution I came up with was not quite so efficient or elegant
       as the Zipper.},
 keywords = {functional programming, zipper},
 note={
     A succinct introduction to focusing onto particular neighbourhoods within
     a data structure is provided. Along with the definitions of primitives to
     move up and down the structure. Then the results are generalised to first
     order terms, thereby providing a notion of neighbourhood-focusing for terms
     formed from a given signature. Neat stuff.
    },
}
#+END_SRC

** Reason Isomorphically!                                    :iso_reasoning:
#+BEGIN_SRC latex
@inproceedings{iso_reasoning,
 author = {Hinze, Ralf and James, Daniel W.H.},
 title = {Reason Isomorphically!},
 booktitle = {Proceedings of the 6th ACM SIGPLAN Workshop on Generic Programming},
 series = {WGP '10},
 year = {2010},
 isbn = {978-1-4503-0251-7},
 location = {Baltimore, Maryland, USA},
 pages = {85--96},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1863495.1863507},
 doi = {10.1145/1863495.1863507},
 acmid = {1863507},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {adjunctions, category theory, isomorphism, yoneda lemma},
 abstract = {When are two types the same? In this paper we argue that isomorphism is a
        more useful notion than equality. We explain a succinct and elegant
        approach to establishing isomorphisms, with our focus on showing their
        existence over deriving the witnesses. We use category theory as a
        framework, but rather than chasing diagrams or arguing with arrows,
        we present our proofs in a calculational style. In particular, we hope to
        showcase to the reader why the Yoneda lemma and adjunctions should be in
        their reasoning toolbox.},
 note={
     An excellent paper summarising elementary category theory with the practical
     aim of showing that rose trees and binary trees, and others, are isomorphic.

     It uses a calculational approach to show that isomorphisms can be proven by
     working with types, i.e., functors, rather than necessarily explicitly providing
     two arrows that are inverse.

     They also provide a theory of fixpoints and a flurry of functional programming
     examples and remarks.
    },
}
#+END_SRC

** Little Theories                                         :little_theories:

#+BEGIN_SRC latex
@InProceedings{little_theories,
author="Farmer, William M.
and Guttman, Joshua D.
and Javier Thayer, F.",
editor="Kapur, Deepak",
title="Little theories",
booktitle="Automated Deduction---CADE-11",
year="1992",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="567--581",
abstract="In the ``little theories'' version of the axiomatic method, different portions of mathematics are developed in various different formal axiomatic theories. Axiomatic theories may be related by inclusion or by theory interpretation. We argue that the little theories approach is a desirable way to formalize mathematics, and we describe how IMPS, an Interactive Mathematical Proof System, supports it.",
isbn="978-3-540-47252-0"
}
#+END_SRC

** The MathScheme Library: Some Preliminary Experiments :mathscheme:
#+BEGIN_SRC latex
@Online{mathscheme,
  author       = {Jacques Carette AND William M. Farmer AND Filip
                  Jeremic AND Vincent Maccio AND Russell O'Connor AND
                  Quang M. Tran},
  title        = {{The MathScheme Library: Some Preliminary
                  Experiments}},
  year         = 2011,
  archiveprefix= {arXiv},
  eprint       = {1106.1862v1},
  primaryclass = {cs.MS}
}
#+END_SRC

** Agda Wiki :agda_wiki:
#+BEGIN_SRC latex
@online{agda_wiki,
  author = {The {Agda Team}},
  title = {Agda Wiki},
  year = 2018,
  url = {http://wiki.portal.chalmers.se/agda/pmwiki.php},
  urldate = {2018-10-12}
}
#+END_SRC
** Constructive Mathematics and Computer Programming :lof_constructive_math:

#+BEGIN_SRC latex
@inproceedings{lof_constructive_math,
 author = {Martin-L\"{o}f, P.},
 title = {Constructive Mathematics and Computer Programming},
 booktitle = {Proc. Of a Discussion Meeting of the Royal Society of London on Mathematical Logic and Programming Languages},
 year = {1985},
 isbn = {0-13-561465-1},
 location = {London, United Kingdom},
 pages = {167--184},
 numpages = {18},
 url = {http://dl.acm.org/citation.cfm?id=3721.3731},
 acmid = {3731},
 publisher = {Prentice-Hall, Inc.},
 address = {Upper Saddle River, NJ, USA},
}
#+END_SRC

** Intuitionistic type theory                                      :lof_itt:

#+BEGIN_SRC latex
@book{lof_itt,
  title={Intuitionistic type theory},
  author={Martin-L{\"o}f, P. and Sambin, G.},
  series={Studies in proof theory},
  url={https://books.google.ca/books?id=\_D0ZAQAAIAAJ},
  year={1984},
  publisher={Bibliopolis}
}
#+END_SRC

** Programming in Martin-Lo\&Uml;F's Type Theory: An Introduction

#+BEGIN_SRC latex
@book{lof_programming,
 author = {Nordstr\"{o}m, Bengt and Petersson, Kent and Smith, Jan M.},
 title = {Programming in Martin-Lo\&Uml;F's Type Theory: An Introduction},
 year = {1990},
 isbn = {0-19-853814-6},
 publisher = {Clarendon Press},
 address = {New York, NY, USA},
}
#+END_SRC
** Coq Website :coq_website:
#+BEGIN_SRC latex
@online{coq_website,
  author = {The {Coq Team}},
  title = {The Coq Proof Assistant},
  year = 2018,
  url = {https://coq.inria.fr/},
  urldate = {2018-10-12}
}
#+END_SRC
** Inductively Defined Types in the Calculus of Constructions :coq_inductive_coc:

#+BEGIN_SRC latex
@inproceedings{coq_inductive_coc,
  author    = {Frank Pfenning and
           Christine Paulin{-}Mohring},
  title     = {Inductively Defined Types in the Calculus of Constructions},
  booktitle = {Mathematical Foundations of Programming Semantics, 5th International
           Conference, Tulane University, New Orleans, Louisiana, USA, March
           29 - April 1, 1989, Proceedings},
  pages     = {209--228},
  year      = {1989},
  crossref  = {DBLP:conf/mfps/1989},
  url       = {https://doi.org/10.1007/BFb0040259},
  doi       = {10.1007/BFb0040259},
  timestamp = {Fri, 19 May 2017 13:10:47 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/mfps/PfenningP89},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** The Calculus of Constructions :coq_coc:

#+BEGIN_SRC latex
@article{coq_coc,
  author    = {Thierry Coquand and
           G{\'{e}}rard P. Huet},
  title     = {The Calculus of Constructions},
  journal   = {Inf. Comput.},
  volume    = {76},
  number    = {2/3},
  pages     = {95--120},
  year      = {1988},
  url       = {https://doi.org/10.1016/0890-5401(88)90005-3},
  doi       = {10.1016/0890-5401(88)90005-3},
  timestamp = {Thu, 18 May 2017 09:54:18 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/iandc/CoquandH88},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Lean Website :lean_website:
#+BEGIN_SRC latex
@online{lean_website,
  author = {The {Lean Team}},
  title = {Lean Theorem Prover},
  year = 2018,
  url = {http://leanprover.github.io/},
  urldate = {2018-10-12}
}
#+END_SRC
** The Lean Theorem Prover (System Description)           :lean_system_desc:

#+BEGIN_SRC latex
@inproceedings{lean_system_desc,
  author    = {Leonardo Mendon{\c{c}}a de Moura and
           Soonho Kong and
           Jeremy Avigad and
           Floris van Doorn and
           Jakob von Raumer},
  title     = {The Lean Theorem Prover (System Description)},
  booktitle = {Automated Deduction - {CADE-25} - 25th International Conference on
           Automated Deduction, Berlin, Germany, August 1-7, 2015, Proceedings},
  pages     = {378--388},
  year      = {2015},
  crossref  = {DBLP:conf/cade/2015},
  url       = {https://doi.org/10.1007/978-3-319-21401-6\_26},
  doi       = {10.1007/978-3-319-21401-6\_26},
  timestamp = {Sun, 21 May 2017 00:17:17 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/cade/MouraKADR15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Formalizing Mathematics using the Lean Theorem Prover :lean_formalizing_math:

#+BEGIN_SRC latex
@inproceedings{lean_formalizing_math,
  author    = {Leonardo de Moura},
  title     = {Formalizing Mathematics using the Lean Theorem Prover},
  booktitle = {International Symposium on Artificial Intelligence and Mathematics,
           {ISAIM} 2016, Fort Lauderdale, Florida, USA, January 4-6, 2016.},
  year      = {2016},
  crossref  = {DBLP:conf/isaim/2016},
  url       = {http://isaim2016.cs.virginia.edu/papers/ISAIM2016\_Proofs\_DeMoura.pdf},
  timestamp = {Thu, 18 Jan 2018 13:13:58 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/isaim/Moura16},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Type classes for mathematics in type theory :typeclasses_for_maths:

#+BEGIN_SRC latex
@article{typeclasses_for_maths,
  author    = {Bas Spitters and
           Eelis van der Weegen},
  title     = {Type classes for mathematics in type theory},
  journal   = {Mathematical Structures in Computer Science},
  volume    = {21},
  number    = {4},
  pages     = {795--825},
  year      = {2011},
  url       = {https://doi.org/10.1017/S0960129511000119},
  doi       = {10.1017/S0960129511000119},
  timestamp = {Wed, 14 Jun 2017 20:39:05 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/mscs/SpittersW11},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Theories as Types :theories_as_types:

#+BEGIN_SRC latex
@inproceedings{theories_as_types,
  author    = {Dennis M{\"{u}}ller and
           Florian Rabe and
           Michael Kohlhase},
  title     = {Theories as Types},
  booktitle = {Automated Reasoning - 9th International Joint Conference, {IJCAR}
           2018, Held as Part of the Federated Logic Conference, FloC 2018, Oxford,
           UK, July 14-17, 2018, Proceedings},
  pages     = {575--590},
  year      = {2018},
  crossref  = {DBLP:conf/cade/2018},
  url       = {https://doi.org/10.1007/978-3-319-94205-6\_38},
  doi       = {10.1007/978-3-319-94205-6\_38},
  timestamp = {Mon, 09 Jul 2018 13:01:56 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/cade/MullerRK18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** A calculus of open modules: call-by-need strategy and confluence :open_modules:

#+BEGIN_SRC latex
@article{open_modules,
  author    = {Sonia Fagorzi and
           Elena Zucca},
  title     = {A calculus of open modules: call-by-need strategy and confluence},
  journal   = {Mathematical Structures in Computer Science},
  volume    = {17},
  number    = {4},
  pages     = {675--751},
  year      = {2007},
  url       = {https://doi.org/10.1017/S0960129507006238},
  doi       = {10.1017/S0960129507006238},
  timestamp = {Sun, 28 May 2017 13:25:37 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/mscs/FagorziZ07},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** A Theory of Mixin Modules: Algebraic Laws and Reduction Semantics :mixin_modules:

#+BEGIN_SRC latex
@article{mixin_modules,
  author    = {Davide Ancona and
           Elena Zucca},
  title     = {A Theory of Mixin Modules: Algebraic Laws and Reduction Semantics},
  journal   = {Mathematical Structures in Computer Science},
  volume    = {12},
  number    = {6},
  pages     = {701--737},
  year      = {2002},
  url       = {https://doi.org/10.1017/S0960129502003687},
  doi       = {10.1017/S0960129502003687},
  timestamp = {Sun, 28 May 2017 13:25:37 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/mscs/AnconaZ02},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** A Cateogry-Theoretic Account of Program Modules :modules_categorically:

#+BEGIN_SRC latex
@article{modules_categorically,
  author    = {Eugenio Moggi},
  title     = {A Cateogry-Theoretic Account of Program Modules},
  journal   = {Mathematical Structures in Computer Science},
  volume    = {1},
  number    = {1},
  pages     = {103--139},
  year      = {1991},
  url       = {https://doi.org/10.1017/S0960129500000074},
  doi       = {10.1017/S0960129500000074},
  timestamp = {Sun, 28 May 2017 13:25:36 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/mscs/Moggi91},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** An Agda Formalization Asynchronous Fixed-Point Theory :agda_fixpoints:

#+BEGIN_SRC latex
@inproceedings{agda_fixpoints,
  author    = {Ran Zmigrod and
           Matthew L. Daggitt and
           Timothy G. Griffin},
  title     = {An Agda Formalization of {\"{U}}resin and Dubois' Asynchronous
           Fixed-Point Theory},
  booktitle = {Interactive Theorem Proving - 9th International Conference, {ITP}
           2018, Held as Part of the Federated Logic Conference, FloC 2018, Oxford,
           UK, July 9-12, 2018, Proceedings},
  pages     = {623--639},
  year      = {2018},
  crossref  = {DBLP:conf/itp/2018},
  url       = {https://doi.org/10.1007/978-3-319-94821-8\_37},
  doi       = {10.1007/978-3-319-94821-8\_37},
  timestamp = {Wed, 03 Oct 2018 12:55:05 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/itp/ZmigrodDG18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Formalizing Constructive Quantifier Elimination in Agda :agda_quantifier_elim:

#+BEGIN_SRC latex
@inproceedings{agda_quantifier_elim,
  author    = {Jeremy Pope},
  title     = {Formalizing Constructive Quantifier Elimination in Agda},
  booktitle = {Proceedings of the 7th Workshop on Mathematically Structured Functional
           Programming, MSFP@FSCD 2018, Oxford, UK, 8th July 2018.},
  pages     = {2--17},
  year      = {2018},
  crossref  = {DBLP:journals/corr/abs-1807-03732},
  url       = {https://doi.org/10.4204/EPTCS.275.2},
  doi       = {10.4204/EPTCS.275.2},
  timestamp = {Mon, 10 Sep 2018 16:20:34 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1807-04083},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Modelling Bitcoin in Agda :agda_bitcoin:

#+BEGIN_SRC latex
@article{agda_bitcoin,
  author    = {Anton Setzer},
  title     = {Modelling Bitcoin in Agda},
  journal   = {CoRR},
  volume    = {abs/1804.06398},
  year      = {2018},
  url       = {http://arxiv.org/abs/1804.06398},
  archivePrefix = {arXiv},
  eprint    = {1804.06398},
  timestamp = {Mon, 13 Aug 2018 16:46:25 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1804-06398},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Proving Non-Deterministic Computations in Agda :agda_nondeterministic:

#+BEGIN_SRC latex
@inproceedings{agda_nondeterministic,
  author    = {Sergio Antoy and
           Michael Hanus and
           Steven Libby},
  title     = {Proving Non-Deterministic Computations in Agda},
  booktitle = {Proceedings 29th and 30th Workshops on (Constraint) Logic Programming
           and 24th International Workshop on Functional and (Constraint) Logic
           Programming, and 24th International Workshop on Functional and (Constraint)
           Logic Programming, {WLP} 2015 / {WLP} 2016 / {WFLP} 2016, Dresden
           and Leipzig, Germany, 22nd September 2015 and 12-14th September 2016.},
  pages     = {180--195},
  year      = {2017},
  crossref  = {DBLP:journals/corr/SchwarzV17},
  url       = {https://doi.org/10.4204/EPTCS.234.13},
  doi       = {10.4204/EPTCS.234.13},
  timestamp = {Wed, 12 Sep 2018 01:05:16 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/AntoyHL17},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Pi-Ware: Hardware Description and Verification in Agda :agda_hardware:

#+BEGIN_SRC latex
@inproceedings{agda_hardware,
  author    = {Jo{\~{a}}o Paulo Pizani Flor and
           Wouter Swierstra and
           Yorick Sijsling},
  title     = {Pi-Ware: Hardware Description and Verification in Agda},
  booktitle = {21st International Conference on Types for Proofs and Programs, {TYPES}
           2015, May 18-21, 2015, Tallinn, Estonia},
  pages     = {9:1--9:27},
  year      = {2015},
  crossref  = {DBLP:conf/types/2015},
  url       = {https://doi.org/10.4230/LIPIcs.TYPES.2015.9},
  doi       = {10.4230/LIPIcs.TYPES.2015.9},
  timestamp = {Thu, 23 Aug 2018 15:56:39 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/types/FlorSS15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Painless DTP: Fully Certified Merge Sort in Agda :agda_mergesort:

#+BEGIN_SRC latex
@inproceedings{agda_mergesort,
  author    = {Ernesto Copello and
           Alvaro Tasistro and
           Bruno Bianchi},
  title     = {Case of (Quite) Painless Dependently Typed Programming: Fully Certified
           Merge Sort in Agda},
  booktitle = {Programming Languages - 18th Brazilian Symposium, {SBLP} 2014, Maceio,
           Brazil, October 2-3, 2014. Proceedings},
  pages     = {62--76},
  year      = {2014},
  crossref  = {DBLP:conf/sblp/2014},
  url       = {https://doi.org/10.1007/978-3-319-11863-5\_5},
  doi       = {10.1007/978-3-319-11863-5\_5},
  timestamp = {Fri, 26 May 2017 00:49:32 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/sblp/CopelloTB14},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Dependently Typed Web Client Applications - {FRP} in Agda in {HTML5}} :agda_web:

#+BEGIN_SRC latex
@inproceedings{agda_web,
  author    = {Alan Jeffrey},
  title     = {Dependently Typed Web Client Applications - {FRP} in Agda in {HTML5}},
  booktitle = {Practical Aspects of Declarative Languages - 15th International Symposium,
           {PADL} 2013, Rome, Italy, January 21-22, 2013. Proceedings},
  pages     = {228--243},
  year      = {2013},
  crossref  = {DBLP:conf/padl/2013},
  url       = {https://doi.org/10.1007/978-3-642-45284-0\_16},
  doi       = {10.1007/978-3-642-45284-0\_16},
  timestamp = {Tue, 18 Jul 2017 14:13:01 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/padl/Jeffrey13},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Modular type-safety proofs in Agda :agda_type_Safety:

#+BEGIN_SRC latex
@inproceedings{agda_type_Safety,
  author    = {Christopher Schwaab and
           Jeremy G. Siek},
  title     = {Modular type-safety proofs in Agda},
  booktitle = {Proceedings of the 7th Workshop on Programming languages meets program
           verification, {PLPV} 2013, Rome, Italy, January 22, 2013},
  pages     = {3--12},
  year      = {2013},
  crossref  = {DBLP:conf/plpv/2013},
  url       = {http://doi.acm.org/10.1145/2428116.2428120},
  doi       = {10.1145/2428116.2428120},
  timestamp = {Thu, 15 Jun 2017 21:35:58 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/plpv/SchwaabS13},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Agda as a platform for the development of verified railway interlocking systems :agda_trains:

#+BEGIN_SRC latex
@phdthesis{agda_trains,
  author    = {Karim Kanso},
  title     = {Agda as a platform for the development of verified railway interlocking
           systems},
  school    = {Swansea University, {UK}},
  year      = {2012},
  url       = {http://ethos.bl.uk/OrderDetails.do?uin=uk.bl.ethos.678306},
  timestamp = {Fri, 19 Aug 2016 19:15:39 +0200},
  biburl    = {https://dblp.org/rec/bib/phd/ethos/Kanso12},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Algebra of programming in Agda: Dependent types for relational program derivation :agda_aop:

#+BEGIN_SRC latex
@article{agda_aop,
  author    = {Shin{-}Cheng Mu and
           Hsiang{-}Shang Ko and
           Patrik Jansson},
  title     = {Algebra of programming in Agda: Dependent types for relational program
           derivation},
  journal   = {J. Funct. Program.},
  volume    = {19},
  number    = {5},
  pages     = {545--579},
  year      = {2009},
  url       = {https://doi.org/10.1017/S0956796809007345},
  doi       = {10.1017/S0956796809007345},
  timestamp = {Tue, 06 Jun 2017 22:25:48 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jfp/MuKJ09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** A Proof-Theoretic Approach to Tactics :tactics:

#+BEGIN_SRC latex
@inproceedings{tactics,
  author    = {Kamal Aboul{-}Hosn},
  title     = {A Proof-Theoretic Approach to Tactics},
  booktitle = {Mathematical Knowledge Management, 5th International Conference, {MKM}
           2006, Wokingham, UK, August 11-12, 2006, Proceedings},
  pages     = {54--66},
  year      = {2006},
  crossref  = {DBLP:conf/mkm/2006},
  url       = {https://doi.org/10.1007/11812289\_6},
  doi       = {10.1007/11812289\_6},
  timestamp = {Fri, 02 Jun 2017 13:01:08 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/mkm/Aboul-Hosn06},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Programming Language Foundations in Agda :agda_plf:


#+BEGIN_SRC latex
@online{agda_plf,
  title = {Programming Language Foundations in Agda},
  author    = {Philip Wadler and
           Wen Kokke},
  year = 2018,
  url = {https://plfa.github.io/},
  urldate = {2018-10-12}
}
#+END_SRC
** Teaching Agda :agda_teaching:

#+BEGIN_SRC latex
@online{agda_teaching,
  title = {Teaching Agda},
  author    = {Anton Setzer},
  year = 2018,
  url = {http://www.cse.chalmers.se/research/group/logic/AIM/AIM6/SetzerTeachingAgda.pdf},
  urldate = {2018-10-12}
}
#+END_SRC
** Verified Functional Programming in Agda                  :agda_iowa_book:
#+BEGIN_SRC latex
@book{agda_iowa_book,
 author = {Stump, Aaron},
 title = {Verified Functional Programming in Agda},
 year = {2016},
 isbn = {978-1-97000-127-3},
 publisher = {Association for Computing Machinery and Morgan \&\#38; Claypool},
 address = {New York, NY, USA},
}
#+END_SRC
** Agda's Documentation :agda_docs:

#+BEGIN_SRC latex
@online{agda_docs,
  author = {The {Agda Team}},
  title = {Agda's Documentation},
  year = 2018,
  url = {https://agda.readthedocs.io/en/v2.5.4.1/index.html},
  urldate = {2018-10-12}
}
#+END_SRC
** Relation-Algebraic Theories in Agda :RATH:

#+BEGIN_SRC latex
@online{RATH,
  title = {Relation-Algebraic Theories in Agda},
  author  = {Wolfram Kahl},
  year = 2018,
  url = {http://relmics.mcmaster.ca/RATH-Agda/},
  urldate = {2018-10-12}
}
#+END_SRC
** CASL Reference Manual :casl_ref:

#+BEGIN_SRC latex
@book{casl_ref,
  author    = {Peter D. Mosses},
  title     = {{CASL} Reference Manual, The Complete Documentation of the Common
           Algebraic Specification Language},
  series    = {Lecture Notes in Computer Science},
  volume    = {2960},
  publisher = {Springer},
  year      = {2004},
  url       = {https://doi.org/10.1007/b96103},
  doi       = {10.1007/b96103},
  isbn      = {3-540-21301-5},
  timestamp = {Mon, 29 May 2017 13:41:08 +0200},
  biburl    = {https://dblp.org/rec/bib/books/sp/Mosses04},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** CASL User Manual :casl_user:

#+BEGIN_SRC latex
@book{casl_user,
  author    = {Michel Bidoit and
           Peter D. Mosses},
  title     = {Casl User Manual - Introduction to Using the Common Algebraic Specification
           Language},
  series    = {Lecture Notes in Computer Science},
  volume    = {2900},
  publisher = {Springer},
  year      = {2004},
  url       = {https://doi.org/10.1007/b11968},
  doi       = {10.1007/b11968},
  isbn      = {3-540-20766-X},
  timestamp = {Mon, 29 May 2017 13:41:08 +0200},
  biburl    = {https://dblp.org/rec/bib/books/sp/BidoitM04},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Maude's module algebra :maude_module_algebra:

#+BEGIN_SRC latex
@article{maude_module_algebra,
  author    = {Francisco Dur{\'{a}}n and
           Jos{\'{e}} Meseguer},
  title     = {Maude's module algebra},
  journal   = {Sci. Comput. Program.},
  volume    = {66},
  number    = {2},
  pages     = {125--153},
  year      = {2007},
  url       = {https://doi.org/10.1016/j.scico.2006.07.002},
  doi       = {10.1016/j.scico.2006.07.002},
  timestamp = {Thu, 08 Jun 2017 08:59:10 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/scp/DuranM07},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Reuse of Specification Patterns with the {B} Method :B_reuse:

#+BEGIN_SRC latex
@article{B_reuse,
  author    = {Sandrine Blazy and
           Fr{\'{e}}d{\'{e}}ric Gervais and
           R{\'{e}}gine Laleau},
  title     = {Reuse of Specification Patterns with the {B} Method},
  journal   = {CoRR},
  volume    = {abs/cs/0610097},
  year      = {2006},
  url       = {http://arxiv.org/abs/cs/0610097},
  archivePrefix = {arXiv},
  eprint    = {cs/0610097},
  timestamp = {Mon, 13 Aug 2018 16:46:08 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-cs-0610097},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Categorical foundations for structured specifications in {Z} :Z_categorical:

#+BEGIN_SRC latex
@article{Z_categorical,
  author    = {Pablo F. Castro and
           Nazareno Aguirre and
           Carlos L{\'{o}}pez Pombo and
           T. S. E. Maibaum},
  title     = {Categorical foundations for structured specifications in {Z}},
  journal   = {Formal Asp. Comput.},
  volume    = {27},
  number    = {5-6},
  pages     = {831--865},
  year      = {2015},
  url       = {https://doi.org/10.1007/s00165-015-0336-0},
  doi       = {10.1007/s00165-015-0336-0},
  timestamp = {Wed, 17 May 2017 14:25:33 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/fac/CastroAPM15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Institution-independent Model Theory :institutions:

#+BEGIN_SRC latex
@book{institutions,
 author = {Diaconescu, Razvan},
 title = {Institution-independent Model Theory},
 year = {2008},
 isbn = {3764387076, 9783764387075},
 edition = {1st},
 publisher = {Birkh\&\#228;user Basel},
}
#+END_SRC

** OCaml Website                                              :ocaml_website:
#+BEGIN_SRC latex
@online{ocaml_website,
  author = {The {OCaml Team}},
  title = {The OCaml Language, Official Website},
  year = 2018,
  url = {https://ocaml.org/},
  urldate = {2018-10-16}
}
#+END_SRC
** Dependent Types At Work                                    :curry_howard:

# A good walkthrough and practicual use of Curry-Howard.

#+BEGIN_SRC latex
@inproceedings{curry_howard,
  author    = {Ana Bove and
           Peter Dybjer},
  title     = {Dependent Types at Work},
  booktitle = {Language Engineering and Rigorous Software Development, International
           LerNet {ALFA} Summer School 2008, Piriapolis, Uruguay, February 24
           - March 1, 2008, Revised Tutorial Lectures},
  pages     = {57--99},
  year      = {2008},
  crossref  = {DBLP:conf/lernet/2008},
  url       = {https://doi.org/10.1007/978-3-642-03153-3\_2},
  doi       = {10.1007/978-3-642-03153-3\_2},
  timestamp = {Sun, 04 Jun 2017 10:11:20 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/lernet/BoveD08},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Wikipedia: Curry-Howard Correspondence              :wiki_curry_howard:
#+BEGIN_SRC latex
@online{wiki_curry_howard,
  organisation = {Wikipedia},
  title = {Curry–Howard correspondence --- {Wikipedia}{,} The Free Encyclopedia},
  year = 2018,
  url = {https://en.wikipedia.org/wiki/Curry-Howard_correspondence},
  urldate = {2018-10-16}
}
#+END_SRC
** Wikipedia: Multiple inheritance                   :wiki_diamond_problem:
#+BEGIN_SRC latex
@online{wiki_diamond_problem,
  organisation = {Wikipedia},
  title = {Multiple inheritance --- {Wikipedia}{,} The Free Encyclopedia},
  year = 2018,
  url = {https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem},
  urldate = {2018-10-16}
}
#+END_SRC
** Wikipedia: Hungarian notation                       :hungarian_notation:
#+BEGIN_SRC latex
@online{hungarian_notation,
  organisation = {Wikipedia},
  title = {Hungarian notation --- {Wikipedia}{,} The Free Encyclopedia},
  year = 2018,
  url = {https://en.wikipedia.org/wiki/Hungarian_notation},
  urldate = {2018-10-16}
}
#+END_SRC
** Type-theory in Color :tt_in_colour:

#+BEGIN_SRC latex
@article{tt_in_colour,
 author = {Bernardy, Jean-Philippe and Guilhem, Moulin},
 title = {Type-theory in Color},
 journal = {SIGPLAN Not.},
 issue_date = {September 2013},
 volume = {48},
 number = {9},
 month = sep,
 year = {2013},
 issn = {0362-1340},
 pages = {61--72},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2544174.2500577},
 doi = {10.1145/2544174.2500577},
 acmid = {2500577},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {erasure, parametricity, type-theory},
}
#+END_SRC
** Ornamental Algebras, Algebraic Ornaments                      :ornaments:
#+BEGIN_SRC latex
@article{ornaments,
 author = {Conor McBride},
 title = {Ornamental Algebras, Algebraic Ornaments},
 journal = {Unpublished Draft},
 publisher = {University of Strathclyde},
 url       = {https://personal.cis.strath.ac.uk/conor.mcbride/pub/OAAO/Ornament.pdf},
urldate = {2018-10-19},
abstract = {This paper re-examines the presentation of datatypes in dependently typed languages, addressing in
particular the issue of what it means for one datatype to be in various ways more informative than
another. Informal human observations like ‘lists are natural numbers with extra labels’ and ‘vectors
are lists indexed by length’ are expressed in a first class language of ornaments—presentations of
fancy new types based on plain old ones.
Each ornament adds information, so it comes with a forgetful function from fancy data back to
plain, expressible as the fold of its ornamental algebra: lists built from numbers acquire the ‘length’
algebra. Conversely, each algebra for a datatype induces a way to index it—an algebraic ornament.
The length algebra for lists induces the construction of the paradigmatic dependent vector types.
Dependent types thus provide not only a new ‘axis of diversity’—indexing—for data structures,
but also new abstractions to manage and exploit that diversity. In the new programming (2), coincidence
is replaced by consequence.},
}
#+END_SRC
** Relational Algebraic Ornaments :ornaments_relationally:

#+BEGIN_SRC latex
@inproceedings{ornaments_relationally,
 author = {Ko, Hsiang-Shang and Gibbons, Jeremy},
 title = {Relational Algebraic Ornaments},
 booktitle = {Proceedings of the 2013 ACM SIGPLAN Workshop on Dependently-typed Programming},
 series = {DTP '13},
 year = {2013},
 isbn = {978-1-4503-2384-0},
 location = {Boston, Massachusetts, USA},
 pages = {37--48},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2502409.2502413},
 doi = {10.1145/2502409.2502413},
 acmid = {2502413},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {algebra of programming, dependently typed programming, greedy algorithms, inductive families, program derivation},
 abstract = {Dependently typed programming is hard, because ideally dependently typed programs should share structure with their correctness proofs, but there are very few guidelines on how one can arrive at such integrated programs. McBride's algebraic ornamentation provides a methodological advancement, by which the programmer can derive a datatype from a specification involving a fold, such that a program that constructs elements of that datatype would be correct by construction. It is thus an effective method that leads the programmer from a specification to a dependently typed program. We enhance the applicability of this method by generalising algebraic ornamentation to a relational setting and bringing in relational algebraic methods, resulting in a hybrid approach that makes essential use of both dependently typed programming and relational program derivation. A dependently typed solution to the minimum coin change problem is presented as a demonstration of this hybrid approach. We also give a theoretically interesting "completeness theorem" of relational algebraic ornaments, which sheds some light on the expressive power of ornaments and inductive families.},
}
#+END_SRC

** Why dependent types matter :why_dependent_types_matter:

#+BEGIN_SRC latex
@inproceedings{why_dependent_types_matter,
  author    = {James McKinna},
  title     = {Why dependent types matter},
  booktitle = {Proceedings of the 33rd {ACM} {SIGPLAN-SIGACT} Symposium on Principles
           of Programming Languages, {POPL} 2006, Charleston, South Carolina,
           USA, January 11-13, 2006},
  pages     = {1},
  year      = {2006},
  crossref  = {DBLP:conf/popl/2006},
  url       = {http://doi.acm.org/10.1145/1111037.1111038},
  doi       = {10.1145/1111037.1111038},
  timestamp = {Tue, 22 May 2012 15:24:56 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/popl/McKinna06},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** A Tutorial Implementation of a DTL Calculus :dtl_implementation_tutorial:

#+BEGIN_SRC latex
@article{dtl_implementation_tutorial,
  author    = {Andres L{\"{o}}h and
           Conor McBride and
           Wouter Swierstra},
  title     = {A Tutorial Implementation of a Dependently Typed Lambda Calculus},
  journal   = {Fundam. Inform.},
  volume    = {102},
  number    = {2},
  pages     = {177--207},
  year      = {2010},
  url       = {https://doi.org/10.3233/FI-2010-304},
  doi       = {10.3233/FI-2010-304},
  timestamp = {Sat, 20 May 2017 00:23:04 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/fuin/LohMS10},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Lectures on Implementing Idris                 :dtl_implementation_idris:

#+BEGIN_SRC latex
@online{dtl_implementation_idris,
  author = {Edwin Brady},
  title = {Lectures on Implementing Idris},
  url = {https://www.idris-lang.org/dependently-typed-functional-programming-with-idris-course-videos-and-slides/},
  urldate = {2018-10-19}
}
#+END_SRC
** Designing DTLs                     :dtl_implementation_lectures_and_code:

#+BEGIN_SRC latex
@online{dtl_implementation_lectures_and_code,
  author = {Stephanie Weirich},
  title = {2014 OPLSS Lectures \emph{Designing Dependently-Typed Programming Languages}},
  url = {https://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html},
  urldate = {2018-10-19}
}
#+END_SRC
#
# Code: https://github.com/sweirich/pi-forall
# A demo implementation of a simple dependently-typed language

** Practical implementation of a DTL :dtl_implementation_practical:

#+BEGIN_SRC latex
@phdthesis{dtl_implementation_practical,
  author    = {Edwin Brady},
  title     = {Practical implementation of a dependently typed functional programming  language},
  school    = {Durham University, {UK}},
  year      = {2005},
  url       = {http://etheses.dur.ac.uk/2800/},
  timestamp = {Tue, 06 Sep 2016 10:13:42 +0200},
  biburl    = {https://dblp.org/rec/bib/phd/ethos/Brady05},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Implementing and Optimizing a Simple DTL :dtl_implementation_simple:13_pages:

#+BEGIN_SRC latex
@MastersThesis{dtl_implementation_simple,
  author    = {Michael Blaguszewski},
  title     = {Implementing and Optimizing a Simple, Dependently-Typed Language},
  school    = {Chalmers University of Technology},
  year      = {2010},
  url       = {http://publications.lib.chalmers.se/records/fulltext/124826.pdf},
}
#+END_SRC
** Ynot: dependent types for imperative programs :dtl_imperative:

#+BEGIN_SRC latex
@inproceedings{dtl_imperative,
  author    = {Aleksandar Nanevski and
           Greg Morrisett and
           Avraham Shinnar and
           Paul Govereau and
           Lars Birkedal},
  title     = {Ynot: dependent types for imperative programs},
  booktitle = {Proceeding of the 13th {ACM} {SIGPLAN} international conference on
           Functional programming, {ICFP} 2008, Victoria, BC, Canada, September
           20-28, 2008},
  pages     = {229--240},
  year      = {2008},
  crossref  = {DBLP:conf/icfp/2008},
  url       = {http://doi.acm.org/10.1145/1411204.1411237},
  doi       = {10.1145/1411204.1411237},
  timestamp = {Fri, 23 Jan 2009 12:54:21 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/icfp/NanevskiMSGB08},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Inductive Families Need Not Store Their Indices :dtl_index_erasure:

#+BEGIN_SRC latex
@inproceedings{dtl_index_erasure,
  author    = {Edwin Brady and
           Conor McBride and
           James McKinna},
  title     = {Inductive Families Need Not Store Their Indices},
  booktitle = {Types for Proofs and Programs, International Workshop, {TYPES} 2003,
           Torino, Italy, April 30 - May 4, 2003, Revised Selected Papers},
  pages     = {115--129},
  year      = {2003},
  crossref  = {DBLP:conf/types/2003},
  url       = {https://doi.org/10.1007/978-3-540-24849-1\_8},
  doi       = {10.1007/978-3-540-24849-1\_8},
  timestamp = {Thu, 15 Jun 2017 21:39:32 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/types/BradyMM03},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Erasure and Polymorphism in Pure Type Systems :erasure_type_systems:

#+BEGIN_SRC latex
@inproceedings{erasure_type_systems,
  author    = {Nathan Mishra{-}Linger and
           Tim Sheard},
  title     = {Erasure and Polymorphism in Pure Type Systems},
  booktitle = {Foundations of Software Science and Computational Structures, 11th
           International Conference, {FOSSACS} 2008, Held as Part of the Joint
           European Conferences on Theory and Practice of Software, {ETAPS} 2008,
           Budapest, Hungary, March 29 - April 6, 2008. Proceedings},
  pages     = {350--364},
  year      = {2008},
  crossref  = {DBLP:conf/fossacs/2008},
  url       = {https://doi.org/10.1007/978-3-540-78499-9\_25},
  doi       = {10.1007/978-3-540-78499-9\_25},
  timestamp = {Tue, 26 Jun 2018 14:10:47 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/fossacs/Mishra-LingerS08},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Towards a Proof-Irrelevant Calculus of Inductive Constructions :proof_irrelevant_cic:

#+BEGIN_SRC latex
@MastersThesis{proof_irrelevant_cic,
  author    = {Philipp Haselwarter},
  title     = {Towards a Proof-Irrelevant Calculus of Inductive Constructions},
  year      = {2015},
  url       = {http://www.haselwarter.org/~philipp/piCoq.pdf},
}
#+END_SRC
** Mathematical Logic as Based on the Theory of Types :russell_type_hierarchy:
#+BEGIN_SRC latex
@online{russell_type_hierarchy,
  author = {Bertrand Russell},
  title = {Mathematical Logic as Based on the Theory of Types},
  url = {https://fi.ort.edu.uy/innovaportal/file/20124/1/37-russell1905.pdf},
  urldate = {2018-10-19}
}
#+END_SRC
** An extended calculus of constructions :extended_cic:

#+BEGIN_SRC latex
@phdthesis{extended_cic,
  author    = {Zhaohui Luo},
  title     = {An extended calculus of constructions},
  school    = {University of Edinburgh, {UK}},
  year      = {1990},
  url       = {http://hdl.handle.net/1842/12487},
  timestamp = {Fri, 07 Oct 2016 21:32:16 +0200},
  biburl    = {https://dblp.org/rec/bib/phd/ethos/Luo90},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** A polymorphic λ-calculus with Type:Type  :system_F_with_type_in_type:
#+BEGIN_SRC latex
@online{system_F_with_type_in_type,
  author = {Luca Cardelli},
  title = {A polymorphic λ-calculus with Type:Type},
  url = {http://lucacardelli.name/Papers/TypeType.A4.pdf},
  urldate = {2018-10-19}
}
#+END_SRC
** Practical Erasure in Dependently Typed Languages :dtl_practical_erasure:
#+BEGIN_SRC latex
@article{dtl_practical_erasure,
 author = {Matus Tejiscak and Edwin Brady},
 title = {Practical Erasure in Dependently Typed Languages},
 journal = {Unpublished Draft},
 publisher = {University of St Andrews},
 url       = {https://eb.host.cs.st-andrews.ac.uk/drafts/dtp-erasure-draft.pdf},
urldate = {2018-10-19},
abstract = {Full-spectrum dependently typed languages and tools, such as
Idris and Agda, have recently been gaining interest due to the
expressive power of their type systems, in particular their ability to
describe precise properties of programs which can be verified by
type checking.
With full-spectrum dependent types, we can treat types as firstclass
language constructs: types can be parameterised on values,
and types can be computed like any other value. However, this
power brings new challenges when compiling to executable code.
Without special treatment, values which exist only for compile-time
checking may leak into compiled code, even in relatively simple
cases. Previous attempts to tackle the problem are unsatisfying in
that they either fail to erase all irrelevant information, require user
annotation or in some other way restrict the expressive power of the
language.
In this paper, we present a new erasure mechanism based on
whole-program analysis, currently implemented in the Idris programming
language. We give some simple examples of dependently
typed functional programs with compile-time guarantees of their
properties, but for which existing erasure techniques fall short. We
then describe our new analysis method and show that with it, erasure
can lead to asymptotically faster code thanks to the ability to erase
not only proofs but also indices.},
}
#+END_SRC
** Proof-relevant unification: Dependent pattern matching with only the axioms of your type theory :proof_relevant_unification:

#+BEGIN_SRC latex
@article{proof_relevant_unification,
  author    = {Jesper Cockx and
           Dominique Devriese},
  title     = {Proof-relevant unification: Dependent pattern matching with only the
           axioms of your type theory},
  journal   = {J. Funct. Program.},
  volume    = {28},
  pages     = {e12},
  year      = {2018},
  url       = {https://doi.org/10.1017/S095679681800014X},
  doi       = {10.1017/S095679681800014X},
  timestamp = {Tue, 29 May 2018 13:36:43 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jfp/CockxD18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Dependently Typed Functional Programs and their Proofs :dependent_matching_is_just_K:

#+BEGIN_SRC latex
@phdthesis{dependent_matching_is_just_K,
  author    = {Conor McBride},
  title     = {Dependently typed functional programs and their proofs},
  school    = {University of Edinburgh, {UK}},
  year      = {2000},
  url       = {http://hdl.handle.net/1842/374},
  timestamp = {Mon, 26 Sep 2016 17:14:49 +0200},
  biburl    = {https://dblp.org/rec/bib/phd/ethos/McBride00},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Investigations Into Intensional Type Theory :uip_streicher:

#+BEGIN_SRC latex
@phdthesis{uip_streicher,
  author    = {Thomas Streicher},
  title     = {Investigations Into Intensional Type Theory },
  year      = {1993},
  url       = {https://www2.mathematik.tu-darmstadt.de/~streicher/HabilStreicher.pdf},
}
#+END_SRC

** Pattern matching without K :matching_without_K:

#+BEGIN_SRC latex
@inproceedings{matching_without_K,
  author    = {Jesper Cockx and
           Dominique Devriese and
           Frank Piessens},
  title     = {Pattern matching without {K}},
  booktitle = {Proceedings of the 19th {ACM} {SIGPLAN} international conference on
           Functional programming, Gothenburg, Sweden, September 1-3, 2014},
  pages     = {257--268},
  year      = {2014},
  crossref  = {DBLP:conf/icfp/2014},
  url       = {http://doi.acm.org/10.1145/2628136.2628139},
  doi       = {10.1145/2628136.2628139},
  timestamp = {Sun, 04 Jun 2017 10:05:10 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/icfp/CockxDP14},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Eliminating Dependent Pattern Matching :eliminating_dependent_matching:

#+BEGIN_SRC latex
@inproceedings{eliminating_dependent_matching,
  author    = {Healfdene Goguen and
           Conor McBride and
           James McKinna},
  title     = {Eliminating Dependent Pattern Matching},
  booktitle = {Algebra, Meaning, and Computation, Essays Dedicated to Joseph A. Goguen
           on the Occasion of His 65th Birthday},
  pages     = {521--540},
  year      = {2006},
  crossref  = {DBLP:conf/birthday/2006goguen},
  url       = {https://doi.org/10.1007/11780274\_27},
  doi       = {10.1007/11780274\_27},
  timestamp = {Fri, 02 Jun 2017 13:01:06 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/birthday/GoguenMM06},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Elimination with a motive                       :elimination_with_motive:
#+BEGIN_SRC latex
@inproceedings{elimination_with_motive,
  author    = {Conor McBride},
  title     = {Elimination with a Motive},
  booktitle = {Types for Proofs and Programs, International Workshop, {TYPES} 2000,
           Durham, UK, December 8-12, 2000, Selected Papers},
  pages     = {197--216},
  year      = {2000},
  crossref  = {DBLP:conf/types/2000},
  url       = {https://doi.org/10.1007/3-540-45842-5\_13},
  doi       = {10.1007/3-540-45842-5\_13},
  timestamp = {Fri, 26 May 2017 14:09:14 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/types/McBride00},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** The groupoid model refutes uniqueness of identity proofs :uip_problem:

#+BEGIN_SRC latex
@inproceedings{uip_problem,
  author    = {Martin Hofmann and
           Thomas Streicher},
  title     = {The Groupoid Model Refutes Uniqueness of Identity Proofs},
  booktitle = {Proceedings of the Ninth Annual Symposium on Logic in Computer Science
           {(LICS} '94), Paris, France, July 4-7, 1994},
  pages     = {208--212},
  year      = {1994},
  crossref  = {DBLP:conf/lics/1994},
  url       = {https://doi.org/10.1109/LICS.1994.316071},
  doi       = {10.1109/LICS.1994.316071},
  timestamp = {Thu, 25 May 2017 00:42:41 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/lics/HofmannS94},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** On the Strength of Proof-irrelevant Type Theories :uip_strength:

#+BEGIN_SRC latex
@article{uip_strength,
  author    = {Benjamin Werner},
  title     = {On the Strength of Proof-irrelevant Type Theories},
  journal   = {Logical Methods in Computer Science},
  volume    = {4},
  number    = {3},
  year      = {2008},
  url       = {https://doi.org/10.2168/LMCS-4(3:13)2008},
  doi       = {10.2168/LMCS-4(3:13)2008},
  timestamp = {Sat, 20 May 2017 00:22:52 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/lmcs/Werner08},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Inconsistency of Set:Set                :agda_type_in_type_contradiction:
#+BEGIN_SRC latex
@online{agda_type_in_type_contradiction,
  author = {Thorsten Altenkirch},
  title = {Inconsistency of Set:Set},
  url = {http://www.cs.nott.ac.uk/~psztxa/g53cfr/l20.html/l20.html},
  urldate = {2018-10-19}
}
#+END_SRC

** Formal Proof--The Four-Color Theorem :coq_four_colour:
#+BEGIN_SRC latex
@online{coq_four_colour,
  author = {Georges Gonthier},
  title = {Formal Proof--The Four-Color Theorem},
  url = {http://www.ams.org/notices/200811/},
  urldate = {2018-10-19}
}
#+END_SRC

** A Machine-Checked Proof of the Odd Order Theorem :coq_feit:


#+BEGIN_SRC latex
@inproceedings{coq_feit,
  author    = {Georges Gonthier and
           Andrea Asperti and
           Jeremy Avigad and
           Yves Bertot and
           Cyril Cohen and
           Fran{\c{c}}ois Garillot and
           St{\'{e}}phane Le Roux and
           Assia Mahboubi and
           Russell O'Connor and
           Sidi Ould Biha and
           Ioana Pasca and
           Laurence Rideau and
           Alexey Solovyev and
           Enrico Tassi and
           Laurent Th{\'{e}}ry},
  title     = {A Machine-Checked Proof of the Odd Order Theorem},
  booktitle = {Interactive Theorem Proving - 4th International Conference, {ITP}
           2013, Rennes, France, July 22-26, 2013. Proceedings},
  pages     = {163--179},
  year      = {2013},
  crossref  = {DBLP:conf/itp/2013},
  url       = {https://doi.org/10.1007/978-3-642-39634-2\_14},
  doi       = {10.1007/978-3-642-39634-2\_14},
  timestamp = {Thu, 15 Jun 2017 21:38:54 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/itp/GonthierAABCGRMOBPRSTT13},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** The Compcert C Compiler :coq_compcert:
#+BEGIN_SRC latex
@online{coq_compcert,
  author = {The {Compcert Team}},
  title = {The Compcert C Compiler},
  url = {http://compcert.inria.fr/compcert-C.html},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC

** Software Foundations :coq_sf:
#+BEGIN_SRC latex
@online{coq_sf,
  author = {The {Software Foundations Team}},
  title = {Software Foundations},
  url = {https://softwarefoundations.cis.upenn.edu/},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC

** Type-driven Development With Idris :idris_tdd:
#+BEGIN_SRC latex
@book{idris_tdd,
  author = {Brady, Edwin},
  isbn = {9781617293023},
  keywords = {03b15-higher-order-logic-type-theory, 68n15-programming-languages, 68n18-functional-programming-and-lambda-calculus},
  publisher = {Manning},
  title = {Type-driven Development With {I}dris},
  url = {http://www.worldcat.org/isbn/9781617293023},
  year = 2016
}
#+END_SRC
** Idris: Frequently Asked Questions :idris_faq:
#+BEGIN_SRC latex
@online{idris_faq,
  author = {The {Idris Team}},
  title = {Idris: Frequently Asked Questions},
  url = {http://docs.idris-lang.org/en/latest/faq/faq.html},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC

** Idris Website :idris_website:
#+BEGIN_SRC latex
@online{idris_website,
  author = {The {Idris Team}},
  title = {Idris: A Language With Dependent Types},
  url = {https://www.idris-lang.org/},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC
** The ATS Programming Language: Unleashing the Potentials of Types and Templates! :ats_website:
#+BEGIN_SRC latex
@online{ats_website,
  author = {The {ATS Team}},
  title = {The ATS Programming Language: Unleashing the Potentials of Types and Templates!},
  url = {http://www.ats-lang.org/#What_is_ATS_good_for},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC

** Combining Programming with Theorem Proving :ats_combining:
#+BEGIN_SRC latex
@inproceedings{ats_combining,
  author    = {Chiyan Chen and
           Hongwei Xi},
  title     = {Combining programming with theorem proving},
  booktitle = {Proceedings of the 10th {ACM} {SIGPLAN} International Conference on
           Functional Programming, {ICFP} 2005, Tallinn, Estonia, September 26-28,
           2005},
  pages     = {66--77},
  year      = {2005},
  crossref  = {DBLP:conf/icfp/2005},
  url       = {http://doi.acm.org/10.1145/1086365.1086375},
  doi       = {10.1145/1086365.1086375},
  timestamp = {Mon, 13 Feb 2006 15:41:18 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/icfp/ChenX05},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** F* Official Website :fstar_website:
#+BEGIN_SRC latex
@online{fstar_website,
  author = {The {F^* Team}},
  title = {F^* Official Website},
  url = {https://www.fstar-lang.org/},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC
** Mizar Home Page                                         :mizar_website:
#+BEGIN_SRC latex
@online{mizar_website,
  author = {The {Mizar Team}},
  title = {Mizar Home Page},
  url = {http://www.mizar.org/},
  year=2018,
  urldate = {2018-10-19}
}
#+END_SRC

** A Brief Overview of Mizar :mizar_overview:
#+BEGIN_SRC latex
@inproceedings{mizar_overview,
  author    = {Adam Naumowicz and
           Artur Kornilowicz},
  title     = {A Brief Overview of Mizar},
  booktitle = {Theorem Proving in Higher Order Logics, 22nd International Conference,
           TPHOLs 2009, Munich, Germany, August 17-20, 2009. Proceedings},
  pages     = {67--72},
  year      = {2009},
  crossref  = {DBLP:conf/tphol/2009},
  url       = {https://doi.org/10.1007/978-3-642-03359-9\_5},
  doi       = {10.1007/978-3-642-03359-9\_5},
  timestamp = {Tue, 23 May 2017 01:12:08 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/tphol/NaumowiczK09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** The Role of the Mizar Mathematical Library for Interactive Proof Development in Mizar :mizar_library:
#+BEGIN_SRC latex
@article{mizar_library,
  author    = {Grzegorz Bancerek and
           Czeslaw Bylinski and
           Adam Grabowski and
           Artur Kornilowicz and
           Roman Matuszewski and
           Adam Naumowicz and
           Karol Pak},
  title     = {The Role of the Mizar Mathematical Library for Interactive Proof Development
           in Mizar},
  journal   = {J. Autom. Reasoning},
  volume    = {61},
  number    = {1-4},
  pages     = {9--32},
  year      = {2018},
  url       = {https://doi.org/10.1007/s10817-017-9440-6},
  doi       = {10.1007/s10817-017-9440-6},
  timestamp = {Tue, 26 Jun 2018 14:09:47 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jar/BancerekBGKMNP18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** The undecidability of typability in the λΠ-calculus :undecidability_of_typing:
#+BEGIN_SRC latex
@inproceedings{undecidability_of_typing,
  author    = {Gilles Dowek},
  title     = {The Undecidability of Typability in the Lambda-Pi-Calculus},
  booktitle = {Typed Lambda Calculi and Applications, International Conference on
           Typed Lambda Calculi and Applications, {TLCA} '93, Utrecht, The Netherlands,
           March 16-18, 1993, Proceedings},
  pages     = {139--145},
  year      = {1993},
  crossref  = {DBLP:conf/tlca/1993},
  url       = {https://doi.org/10.1007/BFb0037103},
  doi       = {10.1007/BFb0037103},
  timestamp = {Sat, 20 May 2017 15:32:50 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/tlca/Dowek93},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Wikipedia: Proof assistant :wiki_proof_assistants:
#+BEGIN_SRC latex
@online{wiki_proof_assistants,
  title = {Proof assistant --- {Wikipedia}{,} The Free Encyclopedia},
  organisation = {Wikipedia},
  year=2018,
  url = {https://en.wikipedia.org/wiki/Proof_assistant},
  urldate = {2018-10-19}
}
#+END_SRC

** Wikipedia: Dependent type :wiki_proof_assistants_dependent:
#+BEGIN_SRC latex
@online{wiki_proof_assistants_dependent,
  title = {Dependent type --- {Wikipedia}{,} The Free Encyclopedia},
  organisation = {Wikipedia},
  year=2018,
  url = {https://en.wikipedia.org/wiki/Dependent_type},
  urldate = {2018-10-19}
}
#+END_SRC

** A practical module system for LF  :LF_practical_module_system:
#+BEGIN_SRC latex
@inproceedings{LF_practical_module_system,
  author    = {Florian Rabe and
           Carsten Sch{\"{u}}rmann},
  title     = {A practical module system for {LF}},
  booktitle = {Proceedings of the Fourth International Workshop on Logical Frameworks
           and Meta-Languages: Theory and Practice, {LFMTP} '09, McGill University,
           Montreal, Canada, August 2, 2009},
  pages     = {40--48},
  year      = {2009},
  crossref  = {DBLP:conf/lfmtp/2009},
  url       = {http://doi.acm.org/10.1145/1577824.1577831},
  doi       = {10.1145/1577824.1577831},
  timestamp = {Mon, 12 Mar 2012 07:35:17 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/lfmtp/RabeS09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Towards a practical programming language based on dependent type theory :agda_main:

#+BEGIN_SRC latex
@phdthesis{agda_main,
  author    = {Ulf Norell},
  title     = {Towards a practical programming language based on dependent type theory},
  school    = {Chalmers University of Technology},
  year      = {2007},
}
#+END_SRC

** Implementing Modules in the Coq System :coq_implementing_modules:

#+BEGIN_SRC latex
@inproceedings{coq_implementing_modules,
  author    = {Jacek Chrzaszcz},
  title     = {Implementing Modules in the Coq System},
  booktitle = {Theorem Proving in Higher Order Logics, 16th International Conference,
           TPHOLs 2003, Rom, Italy, September 8-12, 2003, Proceedings},
  pages     = {270--286},
  year      = {2003},
  crossref  = {DBLP:conf/tphol/2003},
  url       = {https://doi.org/10.1007/10930755\_18},
  doi       = {10.1007/10930755\_18},
  timestamp = {Mon, 29 May 2017 16:53:44 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/tphol/Chrzaszcz03},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Locales - {A} Sectioning Concept for Isabelle :isabelle_locales:

#+BEGIN_SRC latex
@inproceedings{isabelle_locales,
  author    = {Florian Kamm{\"{u}}ller and
           Markus Wenzel and
           Lawrence C. Paulson},
  title     = {Locales - {A} Sectioning Concept for Isabelle},
  booktitle = {Theorem Proving in Higher Order Logics, 12th International Conference,
           TPHOLs'99, Nice, France, September, 1999, Proceedings},
  pages     = {149--166},
  year      = {1999},
  crossref  = {DBLP:conf/tphol/1999},
  url       = {https://doi.org/10.1007/3-540-48256-3\_11},
  doi       = {10.1007/3-540-48256-3\_11},
  timestamp = {Sat, 30 Dec 2017 11:46:44 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/tphol/KammullerWP99},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Constructive Type Classes in Isabelle :isabelle_constructive_typeclasses:

#+BEGIN_SRC latex
@inproceedings{isabelle_constructive_typeclasses,
  author    = {Florian Haftmann and
           Makarius Wenzel},
  title     = {Constructive Type Classes in Isabelle},
  booktitle = {Types for Proofs and Programs, International Workshop, {TYPES} 2006,
           Nottingham, UK, April 18-21, 2006, Revised Selected Papers},
  pages     = {160--174},
  year      = {2006},
  crossref  = {DBLP:conf/types/2006},
  url       = {https://doi.org/10.1007/978-3-540-74464-1\_11},
  doi       = {10.1007/978-3-540-74464-1\_11},
  timestamp = {Fri, 02 Jun 2017 13:01:07 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/types/HaftmannW06},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Category Theory for Computing Science :cats_for_cs:


#+BEGIN_SRC latex
@book{cats_for_cs,
  author    = {Michael Barr and
           Charles Wells},
  title     = {Category theory for computing science {(2.} ed.)},
  series    = {Prentice Hall international series in computer science},
  publisher = {Prentice Hall},
  year      = {1995},
  isbn      = {978-0-13-323809-9},
  timestamp = {Wed, 27 Apr 2011 17:30:30 +0200},
  biburl    = {https://dblp.org/rec/bib/books/daglib/0080381},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Categorical Models of Dependent Type Theory :dtl_cat_models:

#+BEGIN_SRC latex
@misc{dtl_cat_models,
  author    = {Alexandre Buisse},
  title     = {Categorical Models of Dependent Type Theory},
  school    = {Chalmers University of Technology},
  year      = {2006},
  url       = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.8051&rep=rep1&type=pdf},
}
#+END_SRC
** Modular correspondence between dependent type theories and categories including pretopoi and topoi :dtl_cat_correspondences:

#+BEGIN_SRC latex
@article{dtl_cat_correspondences,
  author    = {Maria Emilia Maietti},
  title     = {Modular correspondence between dependent type theories and categories
           including pretopoi and topoi},
  journal   = {Mathematical Structures in Computer Science},
  volume    = {15},
  number    = {6},
  pages     = {1089--1149},
  year      = {2005},
  url       = {https://doi.org/10.1017/S0960129505004962},
  doi       = {10.1017/S0960129505004962},
  timestamp = {Sun, 28 May 2017 13:25:37 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/mscs/Maietti05},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** On the Interpretation of Intuitionistic Logic :il_interpretation:

#+BEGIN_SRC latex
@article{il_interpretation,
  author      = {Andrey Kolmogorov},
  translator  = {James McKinna},
  title       = {On the Interpretation of Intuitionistic Logic, \emph{Zur Deutung der intuitionistischen Logik}},
  language    = {langgerman},
  year        = {1932},
  url         = {http://homepages.inf.ed.ac.uk/jmckinna/kolmogorov-1932.pdf},
  urldate = {2018-10-31}
}
#+END_SRC
** On Various Negative Translations :translating_cl_to_il:
#+BEGIN_SRC latex
@inproceedings{translating_cl_to_il,
  author    = {Gilda Ferreira and
           Paulo Oliva},
  title     = {On Various Negative Translations},
  booktitle = {Proceedings Third International Workshop on Classical Logic and Computation,
           CL{\&}C 2010, Brno, Czech Republic, 21-22 August 2010.},
  pages     = {21--33},
  year      = {2010},
  crossref  = {DBLP:journals/corr/abs-1101-5200},
  url       = {https://doi.org/10.4204/EPTCS.47.4},
  doi       = {10.4204/EPTCS.47.4},
  timestamp = {Wed, 12 Sep 2018 01:05:15 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1101-5442},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** The Racket Manifesto                                   :racket_manifesto:

#+BEGIN_SRC latex
@inproceedings{racket_manifesto,
  author    = {Matthias Felleisen and
           Robert Bruce Findler and
           Matthew Flatt and
           Shriram Krishnamurthi and
           Eli Barzilay and
           Jay A. McCarthy and
           Sam Tobin{-}Hochstadt},
  title     = {The Racket Manifesto},
  booktitle = {1st Summit on Advances in Programming Languages, {SNAPL} 2015, May
           3-6, 2015, Asilomar, California, {USA}},
  pages     = {113--128},
  year      = {2015},
  crossref  = {DBLP:conf/snapl/2015},
  url       = {https://doi.org/10.4230/LIPIcs.SNAPL.2015.113},
  doi       = {10.4230/LIPIcs.SNAPL.2015.113},
  timestamp = {Thu, 23 Aug 2018 15:56:17 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/snapl/FelleisenFFKBMT15},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Creating languages in Racket :racket_creating_languages:

#+BEGIN_SRC latex
@article{racket_creating_languages,
  author    = {Matthew Flatt},
  title     = {Creating languages in Racket},
  journal   = {Commun. {ACM}},
  volume    = {55},
  number    = {1},
  pages     = {48--56},
  year      = {2012},
  url       = {http://doi.acm.org/10.1145/2063176.2063195},
  doi       = {10.1145/2063176.2063195},
  timestamp = {Mon, 09 Jan 2012 13:39:03 +0100},
  biburl    = {https://dblp.org/rec/bib/journals/cacm/Flatt12},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Racket Website                                            :racket_website:
#+BEGIN_SRC latex
@online{racket_website,
  author = {The {Racket Team}},
  title = {Racket: Solve Problems, Make Languages},
  url = {https://racket-lang.org/},
  year=2018,
  urldate = {2018-10-31}
}
#+END_SRC
** Submodules in racket: you want it when, again? :racket_submodules:

#+BEGIN_SRC latex
@inproceedings{racket_submodules,
  author    = {Matthew Flatt},
  title     = {Submodules in Racket: you want it when, again?},
  booktitle = {Generative Programming: Concepts and Experiences, GPCE'13, Indianapolis,
           IN, {USA} - October 27 - 28, 2013},
  pages     = {13--22},
  year      = {2013},
  crossref  = {DBLP:conf/gpce/2013},
  url       = {http://doi.acm.org/10.1145/2517208.2517211},
  doi       = {10.1145/2517208.2517211},
  timestamp = {Fri, 25 Oct 2013 08:34:11 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/gpce/Flatt13},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** The Racket Guide :racket_guide:
#+BEGIN_SRC latex
@online{racket_guide,
  author = {Matthew Flatt and Robert Bruce Findler},
  title = {The Racket Guide},
  year=2018,
  url = {https://docs.racket-lang.org/guide/},
  urldate = {2018-10-31}
}
#+END_SRC

** Scala Website                                       :scala_website:
#+BEGIN_SRC latex
@online{scala_website,
  author = {The {Scala Team}},
  title = {The Scala Programming Language},
  year=2018,
  url = {https://www.scala-lang.org/},
  urldate = {2018-10-31}
}
#+END_SRC
** A Beginner's Guide to Scala, Object Orientation and Functional Programming :scala_book:
#+BEGIN_SRC latex
@book{scala_book,
  author    = {John Hunt},
  title     = {A Beginner's Guide to Scala, Object Orientation and Functional Programming,
           Second Edition},
  publisher = {Springer},
  year      = {2018},
  url       = {https://doi.org/10.1007/978-3-319-75771-1},
  doi       = {10.1007/978-3-319-75771-1},
  isbn      = {978-3-319-75770-4},
  timestamp = {Thu, 08 Mar 2018 12:15:18 +0100},
  biburl    = {https://dblp.org/rec/bib/books/sp/Hunt18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Literate Programming :lp_knuth:

#+BEGIN_SRC latex
@article{lp_knuth,
  author    = {Donald E. Knuth},
  title     = {Literate Programming},
  journal   = {Comput. J.},
  volume    = {27},
  number    = {2},
  pages     = {97--111},
  year      = {1984},
  url       = {https://doi.org/10.1093/comjnl/27.2.97},
  doi       = {10.1093/comjnl/27.2.97},
  timestamp = {Sat, 20 May 2017 00:22:29 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/cj/Knuth84},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Modular libraries and literate programming in software for … electronic calculations :lp_modular:

#+BEGIN_SRC latex
@article{lp_modular,
  author    = {Carlos F. Bunge and
           Gerardo Cisneros},
  title     = {Modular libraries and literate programming in software for ab initio
           atomic and molecular electronic structure calculations},
  journal   = {Computers {\&} Chemistry},
  volume    = {12},
  number    = {2},
  pages     = {85--89},
  year      = {1988},
  url       = {https://doi.org/10.1016/0097-8485(88)85009-5},
  doi       = {10.1016/0097-8485(88)85009-5},
  timestamp = {Fri, 26 May 2017 22:53:59 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/candc/BungeC88},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Experiences of 'Literate Programming' :lp_experiences:

#+BEGIN_SRC latex
@article{lp_experiences,
  author    = {Harold W. Thimbleby},
  title     = {Experiences of 'Literate Programming' Using Cweb {(A} Variant of Knuth's
           {WEB)}},
  journal   = {Comput. J.},
  volume    = {29},
  number    = {3},
  pages     = {201--211},
  year      = {1986},
  url       = {https://doi.org/10.1093/comjnl/29.3.201},
  doi       = {10.1093/comjnl/29.3.201},
  timestamp = {Sat, 20 May 2017 00:22:25 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/cj/Thimbleby86},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** A Structured Method for Literate Programming              :lp_structured:

#+BEGIN_SRC latex
@article{lp_structured,
  author    = {Sho{-}Huan Tung},
  title     = {A Structured Method for Literate Programming},
  journal   = {Structured Programming},
  volume    = {10},
  number    = {2},
  pages     = {113--120},
  year      = {1989},
  timestamp = {Thu, 03 Jan 2002 12:26:55 +0100},
  biburl    = {https://dblp.org/rec/bib/journals/stp/Tung89},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Literate Program Derivation: {A} Case Study :lp_derivation:

#+BEGIN_SRC latex
@inproceedings{lp_derivation,
  author    = {Peter Pepper},
  title     = {Literate Program Derivation: {A} Case Study},
  booktitle = {Method of Programming, Selected Papers on the CIP-Project},
  pages     = {101--124},
  year      = {1991},
  crossref  = {DBLP:conf/cip/1991},
  url       = {https://doi.org/10.1007/BFb0018271},
  doi       = {10.1007/BFb0018271},
  timestamp = {Sat, 20 May 2017 15:32:55 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/cip/Pepper91},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Post-literate Programming: Linking Discussion and Code in Software Development {Team}s :lp_after_the_fact:

#+BEGIN_SRC latex
@inproceedings{lp_after_the_fact,
  author    = {Soya Park and
           Amy X. Zhang and
           David R. Karger},
  title     = {Post-literate Programming: Linking Discussion and Code in Software
           Development Teams},
  booktitle = {The 31st Annual {ACM} Symposium on User Interface Software and Technology
           Adjunct Proceedings, {UIST} 2018, Berlin, Germany, October 14-17,
           2018},
  pages     = {51--53},
  year      = {2018},
  crossref  = {DBLP:conf/uist/2018a},
  url       = {http://doi.acm.org/10.1145/3266037.3266098},
  doi       = {10.1145/3266037.3266098},
  timestamp = {Sun, 14 Oct 2018 18:55:03 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/uist/ParkZK18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** A Language with first-class support for literate programming :lp_first_class:

#+BEGIN_SRC latex
@inproceedings{lp_first_class,
  author    = {James Dean Palmer and
           Eddie Hillenbrand},
  title     = {Reimagining literate programming},
  booktitle = {Companion to the 24th Annual {ACM} {SIGPLAN} Conference on Object-Oriented
           Programming, Systems, Languages, and Applications, {OOPSLA} 2009,
           October 25-29, 2009, Orlando, Florida, {USA}},
  pages     = {1007--1014},
  year      = {2009},
  crossref  = {DBLP:conf/oopsla/2009c},
  url       = {http://doi.acm.org/10.1145/1639950.1640072},
  doi       = {10.1145/1639950.1640072},
  timestamp = {Fri, 30 Oct 2009 14:45:38 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/oopsla/PalmerH09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Literate Programming to Enhance Agile Methods :lp_agile:

#+BEGIN_SRC latex
@inproceedings{lp_agile,
  author    = {Vreda Pieterse and
           Derrick G. Kourie and
           Andrew Boake},
  title     = {Literate Programming to Enhance Agile Methods},
  booktitle = {Extreme Programming and Agile Processes in Software Engineering, 5th
           International Conference, {XP} 2004, Garmisch-Partenkirchen, Germany,
           June 6-10, 2004, Proceedings},
  pages     = {250--253},
  year      = {2004},
  crossref  = {DBLP:conf/xpu/2004},
  url       = {https://doi.org/10.1007/978-3-540-24853-8\_34},
  doi       = {10.1007/978-3-540-24853-8\_34},
  timestamp = {Tue, 23 May 2017 01:10:41 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/xpu/PieterseKB04},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Software Development as Knowledge Creation :lp_knowledge_creation:

#+BEGIN_SRC latex
@online{lp_knowledge_creation,
  author = {Sidney Bailin},
  title = {Software Development as Knowledge Creation},
  url = {https://pdfs.semanticscholar.org/67cb/43536824069270a2d02db5d8d61b616d1568.pdf},
  year={1997},
  urldate = {2018-10-31}
}
#+END_SRC

** Structure and Interpretation of Computer Programs, Second Edition :sicp:

#+BEGIN_SRC latex
@book{sicp,
  author    = {Harold Abelson and
           Gerald J. Sussman},
  title     = {Structure and Interpretation of Computer Programs, Second Edition},
  publisher = {{MIT} Press},
  year      = {1996},
  isbn      = {0-262-01153-0},
  timestamp = {Mon, 28 Jan 2002 16:12:01 +0100},
  biburl    = {https://dblp.org/rec/bib/books/mit/AbelsonS96},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Head first design patterns - your brain on design patterns :design_patterns_head_first:
#+BEGIN_SRC latex
@book{design_patterns_head_first,
  author    = {Eric Freeman and
           Elisabeth Robson},
  title     = {Head first design patterns - your brain on design patterns},
  publisher = {O'Reilly},
  year      = {2014},
  url       = {http://www.oreilly.de/catalog/hfdesignpat/index.html},
  isbn      = {978-0-596-00712-6},
  timestamp = {Thu, 14 Apr 2011 14:43:21 +0200},
  biburl    = {https://dblp.org/rec/bib/books/daglib/0011977},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Clean Code - a Handbook of Agile Software Craftsmanship :clean_code:

#+BEGIN_SRC latex
@book{clean_code,
  author    = {Robert C. Martin},
  title     = {Clean Code - a Handbook of Agile Software Craftsmanship},
  publisher = {Prentice Hall},
  year      = {2009},
  url       = {http://vig.pearsoned.com/store/product/1,1207,store-12521\_isbn-0132350882,00.html},
  isbn      = {978-0-13-235088-4},
}
#+END_SRC
** Program Construction: Calculating Implementations from Specifications  :backhouse_program_construction:

#+BEGIN_SRC latex
@book{backhouse_program_construction,
  author    = {Roland Carl Backhouse},
  title     = {Program Construction: Calculating Implementations from Specifications},
  publisher = {John Wiley {\&} Sons},
  year      = {2004},
  isbn      = {978-0-47-084882-1},
}
#+END_SRC

** Programming from First Principles :bornat_programming:

#+BEGIN_SRC latex
@book{bornat_programming,
 author = {Bornat, Richard},
 title = {Programming from First Principles},
 year = {1987},
 isbn = {0-13-729104-3},
 publisher = {Prentice Hall International (UK) Ltd.},
 address = {Hertfordshire, UK, UK},
}
#+END_SRC
** A Gentle Introduction to Category Theory --- the calculational approach :cats_fokkinga:

#+BEGIN_SRC latex
@inbook{cats_fokkinga,
  author = {Fokkinga, Maarten},
  title = {{A Gentle Introduction to Category Theory --- the calculational approach}},
  crossref = {db-utwente:book:0000003535},
  pages = {1--72}
}
@book{db-utwente:book:0000003535,
  author = {Fokkinga, Maarten and
        Jeuring, Johan},
  title = {{Lecture Notes of the STOP 1992 Summerschool on Constructive Algorithmics}},
  booktitle = {{Lecture Notes of the STOP 1992 Summerschool on Constructive Algorithmics}},
  month = sep,
  year = {1992},
  volume = {Part I},
  publisher = {University of Utrecht},
  address = {Utrecht, Netherlands}
}
#+END_SRC
** F-ing modules :f_ing_modules:

#+BEGIN_SRC latex
@article{f_ing_modules,
  author    = {Andreas Rossberg and
           Claudio V. Russo and
           Derek Dreyer},
  title     = {F-ing modules},
  journal   = {J. Funct. Program.},
  volume    = {24},
  number    = {5},
  pages     = {529--607},
  year      = {2014},
  url       = {https://people.mpi-sws.org/~rossberg/f-ing/},
  doi       = {10.1017/S0956796814000264},
  timestamp = {Sat, 27 May 2017 14:24:34 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/jfp/RossbergRD14},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Programming in the 1990s - An Introduction to the Calculation of Programs :sop_cohen:

#+BEGIN_SRC latex
@book{sop_cohen,
  author    = {Edward Cohen},
  title     = {Programming in the 1990s - An Introduction to the Calculation of Programs},
  series    = {Texts and Monographs in Computer Science},
  publisher = {Springer},
  year      = {1990},
  url       = {https://doi.org/10.1007/978-1-4613-9706-9},
  doi       = {10.1007/978-1-4613-9706-9},
  isbn      = {978-0-387-97382-1},
  timestamp = {Tue, 16 May 2017 14:24:21 +0200},
  biburl    = {https://dblp.org/rec/bib/series/mcs/Cohen90},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** A Discipline of Programming :ewd_discipline:

#+BEGIN_SRC latex
@book{ewd_discipline,
  author    = {Edsger W. Dijkstra},
  title     = {A Discipline of Programming},
  publisher = {Prentice-Hall},
  year      = {1976},
  url       = {http://www.worldcat.org/oclc/01958445},
  isbn      = {013215871X},
  timestamp = {Wed, 26 Apr 2017 17:48:52 +0200},
  biburl    = {https://dblp.org/rec/bib/books/ph/Dijkstra76},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** The Science of Programming  :sop:

#+BEGIN_SRC latex
@book{sop,
  author    = {David Gries},
  title     = {The Science of Programming},
  series    = {Texts and Monographs in Computer Science},
  publisher = {Springer},
  year      = {1981},
  url       = {https://doi.org/10.1007/978-1-4612-5983-1},
  doi       = {10.1007/978-1-4612-5983-1},
  isbn      = {978-0-387-96480-5},
  timestamp = {Tue, 16 May 2017 14:01:46 +0200},
  biburl    = {https://dblp.org/rec/bib/books/sp/Gries81},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Design Principles and Design Patterns :design-patterns-solid:
#+BEGIN_SRC latex
@online{design-patterns-solid,
  author = {Robert C. Martin},
  title = {Design Principles and Design Patterns},
  url = {https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf},
  urldate = {2018-10-19},
  date    = {2000}
}
#+END_SRC

** Categorical logic from a categorical point of view                                                     :cats_logic_shulman:

#+BEGIN_SRC latex
@online{cats_logic_shulman,
  author = {Michael Shulman},
  title = {Categorical logic from a categorical point of view},
  url = {https://mikeshulman.github.io/catlog/catlog.pdf},
  urldate = {2018-10-19},
  date = {2016}
}
#+END_SRC

** Why Dependent Types Matter :dtl_why:
#+BEGIN_SRC latex
@online{dtl_why,
  author = {Thorsten Alkenkirch AND Conor McBride AND James McKinna},
  title = {Why Dependent Types Matter},
  url = {http://www.cs.nott.ac.uk/~psztxa/publ/ydtm.pdf},
  urldate = {2018-10-19},
  date = {2005}
}
#+END_SRC

** PVS Prover Guide                                             :pvs_prover:
#+BEGIN_SRC latex
@online{pvs_prover,
  author = {Natarajan Shankar AND Sam Owre AND John Rushby AND Dave Stringer-Calvert},
  title = {PVS Prover Guide},
  url = {http://pvs.csl.sri.com/doc/pvs-prover-guide.pdf},
  urldate = {2019-04-19},
  date = {2001}
}
#+END_SRC

** The Twelf Project :twelf_site:

The last ``new'' item seems to be from 2015, and so this project is likely abandonded.

#+BEGIN_SRC latex
@online{twelf_site,
  author = {Frank Pfenning and The Twelf Team},
  title = {The Twelf Project},
  url = {http://twelf.org/wiki/Main_Page},
  urldate = {2018-10-19},
  date = {2015}
}
#+END_SRC

** PRL Project: Proof/Program Refinment Logic :prl_site:
#+BEGIN_SRC latex
@online{prl_site,
  author = {The {PRL Team}},
  title = {PRL Project: Proof/Program Refinment Logic},
  url = {http://www.nuprl.org},
  urldate = {2018-10-19},
  date = {2014}
}
#+END_SRC
** The Matita Interactive Theorem Prover :matita_site:
#+BEGIN_SRC latex
@online{matita_site,
  author = {The {Matita Team}},
  title = {The Matita Interactive Theorem Prover},
  url = {http://matita.cs.unibo.it},
  urldate = {2018-10-19},
  date = {2016}
}
#+END_SRC
** Named Instances for Haskell Type Classes :named_instances:

#+BEGIN_SRC latex
@inproceedings{named_instances,
 journal   = {Haskell Workshop},
 author = {Wolfram Kahl and Jan Scheffczyk},
 title = {Named Instances for Haskell Type Classes},
 abstract = {Although the functional programming language Haskell has a powerful type class system, users frequently run into situations where they would like to be able to define or adapt instances of type classes only after the remainder of a component has been produced. However, Haskell's type class system essentially only allows late binding of type class constraints on free type variables, and not on uses of type class members at variable-free types.

In the current paper we propose a language extension that enhances the late binding capabilities of Haskell type classes, and provides more flexible means for type class instantiation. The latter is achieved via named instances that do not participate in automatic context reduction, but can only be used for late binding. By combining this capability with the automatic aspects of the Haskell type class system, we arrive at an essentially conservative extension that greatly improves flexibility of programming using type classes and opens up new structuring principles for Haskell library design.

We exemplify our extension through the sketch of some applications and show how our approach could be used to explain or subsume other language features as for example implicit parameters. We present a typed lambda-calculus for our extension and provide a working prototype type checker on the basis of Mark Jones' ``Typing Haskell in Haskell''.

},
 year={2001},
}
#+END_SRC

** Literate Programming :knuth_lp:
#+BEGIN_SRC latex
@Article{knuth_lp,
  author       = {Donald E. Knuth},
  title        = {Literate Programming},
  year         = 1984,
  volume       = 27,
  number       = 2,
  pages        = {97-111},
  doi          = {10.1093/comjnl/27.2.97},
  url          = {https://doi.org/10.1093/comjnl/27.2.97},
  journal      = {Comput. J.},
  timestamp    = {Wed, 14 Nov 2018 10:17:27 +0100},
  biburl       = {https://dblp.org/rec/bib/journals/cj/Knuth84},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Termination Proofs for Recursive Functions in FoCaLiZe :focalize:

#+BEGIN_SRC latex
@InProceedings{focalize,
  author       = {Catherine Dubois and Fran{\c{c}}ois Pessaux},
  title        = {Termination Proofs for Recursive Functions in FoCaLiZe},
  year         = 2015,
  booktitle    = {Trends in Functional Programming - 16th International
          Symposium, {TFP} 2015, Sophia Antipolis, France, June 3-5,
          2015. Revised Selected Papers},
  pages        = {136-156},
  doi          = {10.1007/978-3-319-39110-6\_8},
  url          = {https://doi.org/10.1007/978-3-319-39110-6\_8},
  crossref     = {DBLP:conf/sfp/2015},
  timestamp    = {Fri, 26 May 2017 00:49:32 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/sfp/DuboisP15},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Domain Interpretations of Martin-L{\"{o}}f's Partial Type Theory :mlt_partial:

#+BEGIN_SRC latex
@article{mlt_partial,
  author    = {Erik Palmgren and
           Viggo Stoltenberg{-}Hansen},
  title     = {Domain Interpretations of Martin-L{\"{o}}f's Partial Type Theory},
  journal   = {Ann. Pure Appl. Logic},
  volume    = {48},
  number    = {2},
  pages     = {135--196},
  year      = {1990},
  url       = {https://doi.org/10.1016/0168-0072(90)90044-3},
  doi       = {10.1016/0168-0072(90)90044-3},
  timestamp = {Wed, 17 May 2017 14:25:58 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/apal/PalmgrenS90},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Higher-order interpretations and program complexity :higher_order_interpretations:

#+BEGIN_SRC latex
@Article{higher_order_interpretations,
  author       = {Patrick Baillot and Ugo Dal Lago},
  title        = {Higher-order interpretations and program complexity},
  year         = 2016,
  volume       = 248,
  pages        = {56-81},
  doi          = {10.1016/j.ic.2015.12.008},
  url          = {https://doi.org/10.1016/j.ic.2015.12.008},
  journal      = {Inf. Comput.},
  timestamp    = {Thu, 18 May 2017 09:54:18 +0200},
  biburl       = {https://dblp.org/rec/bib/journals/iandc/BaillotL16},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC

** Generalising Interpretations between Theories in the context of (pi-) Institutions :institution_interpretations:


#+BEGIN_SRC latex
@inproceedings{institution_interpretations,
  author    = {Jos{\'{e}} Luiz Fiadeiro and
           T. S. E. Maibaum},
  title     = {Generalising Interpretations between Theories in the context of (pi-)
           Institutions},
  booktitle = {Theory and Formal Methods 1993, Proceedings of the First Imperial
           College Department of Computing Workshop on Theory and Formal Methods,
           Isle of Thorns Conference Centre, Chelwood Gate, Sussex, UK, 29-31
           March 1993},
  pages     = {126--147},
  year      = {1993},
  crossref  = {DBLP:conf/imperial/1993},
  timestamp = {Tue, 25 Feb 2003 14:11:07 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/imperial/FiadeiroM93},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** Kripke semantics for dependent type theory and realizability interpretations :dtl_interpretations:


#+BEGIN_SRC latex
@InProceedings{dtl_interpretations,
author="Lipton, James",
editor="Myers, J. Paul
and O'Donnell, Michael J.",
title="Kripke semantics for dependent type theory and realizability interpretations",
booktitle="Constructivity in Computer Science",
year="1992",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="22--32",
abstract="Constructive reasoning has played an increasingly important role in the development of provably correct software. Both typed and type-free frameworks stemming from ideas of Heyting, Kleene, and Curry have been developed for extracting computations from constructive specifications. These include Realizability, and Theories based on the Curry-Howard isomorphism. Realizability --- in its various typed and type-free formulations --- brings out the algorithmic content of theories and proofs and supplies models of the ``recursive universe''. Formal systems based on the propositions-as-types paradigm, such as Martin-L{\"o}f's dependent type theories, incorporate term extraction into the logic itself.",
isbn="978-3-540-47265-0"
}
#+END_SRC
** Theories as Types :theories-as-types:

#+BEGIN_SRC latex
@InProceedings{theories-as-types,
  author       = {Dennis M{\"{u}}ller and Florian Rabe and Michael Kohlhase},
  title        = {Theories as Types},
  year         = 2018,
  booktitle    = {Automated Reasoning - 9th International Joint Conference,
          {IJCAR} 2018, Held as Part of the Federated Logic Conference,
          FloC 2018, Oxford, UK, July 14-17, 2018, Proceedings},
  pages        = {575-590},
  doi          = {10.1007/978-3-319-94205-6\_38},
  url          = {https://doi.org/10.1007/978-3-319-94205-6\_38},
  timestamp    = {Mon, 09 Jul 2018 13:01:56 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/cade/MullerRK18},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
#+END_SRC
** A Scalable Module System :mmt_main_paper:

#+BEGIN_SRC latex
@Online{mmt_main_paper,
  author       = {Florian Rabe AND Michael Kohlhase},
  title        = {{A Scalable Module System}},
  year         = 2011,
  archiveprefix= {arXiv},
  eprint       = {1105.0548v1},
  primaryclass = {cs.LO},
  url = {https://arxiv.org/abs/1105.0548
}
#+END_SRC
** The MMT API: A Generic MKM System                               :mmt_api:

#+BEGIN_SRC latex
@Online{mmt_api,
  author       = {Florian Rabe},
  title        = {{The MMT API: A Generic MKM System}},
  year         = 2013,
  archiveprefix= {arXiv},
  eprint       = {1306.3199v1},
  primaryclass = {cs.LO}
}
#+END_SRC
** Types and Programming Languages :tapl:

#+BEGIN_SRC latex
@book{tapl,
 author = {Pierce, Benjamin C.},
 title = {Types and Programming Languages},
 year = {2002},
 isbn = {0262162091, 9780262162098},
 edition = {1st},
 publisher = {The MIT Press},
}
#+END_SRC


** An Analysis of Girard's Paradox :girard_paradox:
#+BEGIN_SRC latex
@InProceedings{girard_paradox,
  author       = {Thierry Coquand},
  title        = {An Analysis of Girard's Paradox},
  year         = 1986,
  booktitle    = {Proceedings of the Symposium on Logic in Computer
          Science {(LICS} '86), Cambridge, Massachusetts, USA,
          June 16-18, 1986},
  pages        = {227-236},
  timestamp    = {Thu, 22 Jan 2015 10:44:13 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/lics/Coquand86},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** A new type for tactics :tacticstype:
#+BEGIN_SRC latex
@online{tacticstype,
  author = {Andrea Asperti and Wilmer Ricciotti and Claudio Sacerdoti Coen and Enrico Tassi},
  title = {A new type for tactics},
  url = {http://matita.cs.unibo.it/PAPERS/plmms09.pdf},
  urldate = {2018-10-19},
}
#+END_SRC
** Program Verification in {SPARK} and {ACSL}: A Comparative Case Study :acsl:


#+BEGIN_SRC latex
@InProceedings{acsl,
  author       = {Eduardo Brito and Jorge Sousa Pinto},
  title        = {Program Verification in {SPARK} and {ACSL:} {A}
          Comparative Case Study},
  year         = 2010,
  booktitle    = {Reliable Software Technologiey - Ada-Europe 2010,
          15th Ada-Europe International Conference on Reliable
          Software Technologies, Valencia, Spain, June 14-18,
          2010. Proceedings},
  pages        = {97-110},
  doi          = {10.1007/978-3-642-13550-7\_7},
  url          = {https://doi.org/10.1007/978-3-642-13550-7\_7},
  timestamp    = {Mon, 29 May 2017 13:41:16 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/adaEurope/BritoP10},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Lemma Functions for Frama-C: {C} Programs as Proofs} :frama_c:

#+BEGIN_SRC latex
@Article{frama_c,
  author       = {Grigoriy Volkov and Mikhail U. Mandrykin and Denis
          Efremov},
  title        = {Lemma Functions for Frama-C: {C} Programs as Proofs},
  year         = 2018,
  volume       = {abs/1811.05879},
  eprint       = {1811.05879},
  url          = {http://arxiv.org/abs/1811.05879},
  journal      = {CoRR},
  archiveprefix= {arXiv},
  timestamp    = {Sat, 24 Nov 2018 17:52:00 +0100},
  biburl       =
          {https://dblp.org/rec/bib/journals/corr/abs-1811-05879},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Faster Proof Checking in the Edinburgh Logical Framework :lf_fast_proof_checking:
#+BEGIN_SRC latex
@InProceedings{lf_fast_proof_checking,
  author       = {Aaron Stump and David L. Dill},
  title        = {Faster Proof Checking in the Edinburgh Logical
          Framework},
  year         = 2002,
  booktitle    = {Automated Deduction - CADE-18, 18th International
          Conference on Automated Deduction, Copenhagen,
          Denmark, July 27-30, 2002, Proceedings},
  pages        = {392-407},
  doi          = {10.1007/3-540-45620-1\_32},
  url          = {https://doi.org/10.1007/3-540-45620-1\_32},
  timestamp    = {Fri, 26 May 2017 14:09:14 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/cade/StumpD02},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Mechanizing the Metatheory of LF :lf_meta_mechanisation:
#+BEGIN_SRC latex  :tangle MyReferences.bib  :exports none
@Online{lf_meta_mechanisation,
  author       = {Christian Urban AND James Cheney AND Stefan
          Berghofer},
  title        = {{Mechanizing the Metatheory of LF}},
  year         = 2008,
  archiveprefix= {arXiv},
  eprint       = {0804.1667v3},
  primaryclass = {cs.LO}
}
#+END_SRC
** Representing Isabelle in LF :lf_has_isabelle:
#+BEGIN_SRC latex  :tangle MyReferences.bib  :exports none
@Article{lf_has_isabelle,
  author       = {Rabe, Florian},
  title        = {Representing Isabelle in LF},
  year         = 2010,
  volume       = 34,
  month        = {Sep},
  pages        = {85–99},
  issn         = {2075-2180},
  doi          = {10.4204/eptcs.34.8},
  url          = {http://dx.doi.org/10.4204/EPTCS.34.8},
  journal      = {Electronic Proceedings in Theoretical Computer
          Science},
  publisher    = {Open Publishing Association}
}
#+END_SRC

** A practical module system for {LF} :lf_practical_modules:

#+BEGIN_SRC latex
@InProceedings{lf_practical_modules,
  author       = {Florian Rabe and Carsten Sch{\"{u}}rmann},
  title        = {A practical module system for {LF}},
  year         = 2009,
  booktitle    = {Proceedings of the Fourth International Workshop on
          Logical Frameworks and Meta-Languages: Theory and
          Practice, {LFMTP} '09, McGill University, Montreal,
          Canada, August 2, 2009},
  pages        = {40-48},
  doi          = {10.1145/1577824.1577831},
  url          = {https://doi.org/10.1145/1577824.1577831},
  timestamp    = {Tue, 06 Nov 2018 16:57:31 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/lfmtp/RabeS09},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Crafting a Proof Assistant :matita_main:

#+BEGIN_SRC latex
@InProceedings{matita_main,
  author       = {Andrea Asperti and Claudio Sacerdoti Coen and Enrico
          Tassi and Stefano Zacchiroli},
  title        = {Crafting a Proof Assistant},
  year         = 2006,
  booktitle    = {Types for Proofs and Programs, International
          Workshop, {TYPES} 2006, Nottingham, UK, April 18-21,
          2006, Revised Selected Papers},
  pages        = {18-32},
  doi          = {10.1007/978-3-540-74464-1\_2},
  url          = {https://doi.org/10.1007/978-3-540-74464-1\_2},
  timestamp    = {Wed, 14 Nov 2018 10:59:42 +0100},
  biburl       = {https://dblp.org/rec/bib/conf/types/AspertiCTZ06},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Efficient Ambiguous Parsing of Mathematical Formulae :ambiguous_parsing:

#+BEGIN_SRC latex
@Article{ambiguous_parsing,
  author       = {Coen, Claudio Sacerdoti and Zacchiroli, Stefano},
  title        = {Efficient Ambiguous Parsing of Mathematical
          Formulae},
  year         = 2004,
  pages        = {347–362},
  issn         = {1611-3349},
  doi          = {10.1007/978-3-540-27818-4_25},
  url          = {http://dx.doi.org/10.1007/978-3-540-27818-4_25},
  isbn         = 9783540278184,
  journal      = {Mathematical Knowledge Management},
  publisher    = {Springer Berlin Heidelberg}
}
#+END_SRC
** A compact kernel for the calculus of inductive constructions :matita_is_coq_light:

#+BEGIN_SRC latex
@Article{matita_is_coq_light,
  author       = {Asperti, A. and Ricciotti, W. and Sacerdoti Coen,
          C. and Tassi, E.},
  title        = {A compact kernel for the calculus of inductive
          constructions},
  year         = 2009,
  volume       = 34,
  number       = 1,
  month        = {Feb},
  pages        = {71–144},
  issn         = {0973-7677},
  doi          = {10.1007/s12046-009-0003-3},
  url          = {http://dx.doi.org/10.1007/s12046-009-0003-3},
  journal      = {Sadhana},
  publisher    = {Springer Nature}
}

#+END_SRC

** {CASL:} the Common Algebraic Specification Language}      :casl_overview:
#+BEGIN_SRC latex
@Article{casl_overview,
  author       = {Egidio Astesiano and Michel Bidoit and
          H{\'{e}}l{\`{e}}ne Kirchner and Bernd
          Krieg{-}Br{\"{u}}ckner and Peter D. Mosses and
          Donald Sannella and Andrzej Tarlecki},
  title        = {{CASL:} the Common Algebraic Specification Language},
  year         = 2002,
  volume       = 286,
  number       = 2,
  pages        = {153-196},
  doi          = {10.1016/S0304-3975(01)00368-1},
  url          = {https://doi.org/10.1016/S0304-3975(01)00368-1},
  journal      = {Theor. Comput. Sci.},
  timestamp    = {Wed, 14 Nov 2018 10:33:31 +0100},
  biburl       =
          {https://dblp.org/rec/bib/journals/tcs/AstesianoBKKMST02},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** Casl User Manual - Introduction to Using the Common :casl_user_manual:
#+BEGIN_SRC latex
@Book{casl_user_manual,
  author       = {Michel Bidoit and Peter D. Mosses},
  title        = {Casl User Manual - Introduction to Using the Common
          Algebraic Specification Language},
  year         = 2004,
  volume       = 2900,
  series       = {Lecture Notes in Computer Science},
  publisher    = {Springer},
  isbn         = {3-540-20766-X},
  doi          = {10.1007/b11968},
  url          = {https://doi.org/10.1007/b11968},
  timestamp    = {Wed, 14 Nov 2018 10:12:23 +0100},
  biburl       = {https://dblp.org/rec/bib/books/sp/BidoitM04},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC

** {CASL} Reference Manual, The Complete Documentation :casl_reference_manual:
#+BEGIN_SRC latex
@Book{casl_reference_manual,
  author       = {Peter D. Mosses},
  title        = {{CASL} Reference Manual, The Complete Documentation
          of the Common Algebraic Specification Language},
  year         = 2004,
  volume       = 2960,
  series       = {Lecture Notes in Computer Science},
  publisher    = {Springer},
  isbn         = {3-540-21301-5},
  doi          = {10.1007/b96103},
  url          = {https://doi.org/10.1007/b96103},
  timestamp    = {Wed, 14 Nov 2018 10:12:23 +0100},
  biburl       = {https://dblp.org/rec/bib/books/sp/Mosses04},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
** Compcert reference :compcert_paper:
#+BEGIN_SRC latex
@InProceedings{compcert_paper,
  author       = {Robbert Krebbers and Xavier Leroy and Freek Wiedijk},
  title        = {Formal {C} Semantics: CompCert and the {C} Standard},
  year         = 2014,
  booktitle    = {Interactive Theorem Proving - 5th International
          Conference, {ITP} 2014, Held as Part of the Vienna
          Summer of Logic, {VSL} 2014, Vienna, Austria, July
          14-17, 2014. Proceedings},
  pages        = {543-548},
  doi          = {10.1007/978-3-319-08970-6\_36},
  url          = {https://doi.org/10.1007/978-3-319-08970-6\_36},
  timestamp    = {Sun, 21 May 2017 00:18:59 +0200},
  biburl       = {https://dblp.org/rec/bib/conf/itp/KrebbersLW14},
  bibsource    = {dblp computer science bibliography,
          https://dblp.org}
}
#+END_SRC
