@inproceedings{10.1145/1411204.1411213,
  author =       {Oury, Nicolas and Swierstra, Wouter},
  title =        {The Power of Pi},
  year =         2008,
  isbn =         9781595939197,
  publisher =    {Association for Computing Machinery},
  address =      {New York, NY, USA},
  url =          {https://doi.org/10.1145/1411204.1411213},
  doi =          {10.1145/1411204.1411213},
  booktitle =    {Proceedings of the 13th ACM SIGPLAN International Conference
                  on Functional Programming},
  pages =        {39–50},
  numpages =     12,
  keywords =     {domain-specific embedded languages, dependent types},
  location =     {Victoria, BC, Canada},
  series =       {ICFP ’08}
}

@book{10.5555/1816935,
  author =       {Hoyte, Doug},
  title =        {Let Over Lambda},
  year =         2008,
  isbn =         1435712757,
  publisher =    {Lulu.com},
  abstract =     {Let Over Lambda is one of the most hardcore computer
                  programming books out there. Starting with the fundamentals,
                  it describes the most advanced features of the most advanced
                  language: Common Lisp. Only the top percentile of programmers
                  use lisp and if you can understand this book you are in the
                  top percentile of lisp programmers. If you are looking for a
                  dry coding manual that re-hashes common-sense techniques in
                  whatever langue du jour, this book is not for you. This book
                  is about pushing the boundaries of what we know about
                  programming. While this book teaches useful skills that can
                  help solve your programming problems today and now, it has
                  also been designed to be entertaining and inspiring. If you
                  have ever wondered what lisp or even programming itself is
                  really about, this is the book you have been looking for.}
}

@book{10.5555/229872,
  author =       {Graham, Paul},
  title =        {ANSI Common Lisp},
  year =         1995,
  isbn =         0133708756,
  publisher =    {Prentice Hall Press},
  address =      {USA}
}

@book{10.5555/235337,
  author =       {Woodcock, Jim and Davies, Jim},
  title =        {Using {Z}: Specification, Refinement, and Proof},
  year =         1996,
  isbn =         0139484728,
  publisher =    {Prentice-Hall, Inc.},
  address =      {USA}
}

@article{B_reuse,
  author =       {Sandrine Blazy and Fr{\'{e}}d{\'{e}}ric Gervais and
                  R{\'{e}}gine Laleau},
  title =        {Reuse of Specification Patterns with the {B} Method},
  journal =      {CoRR},
  volume =       {abs/cs/0610097},
  year =         2006,
  url =          {http://arxiv.org/abs/cs/0610097},
  archivePrefix ={arXiv},
  eprint =       {cs/0610097},
  timestamp =    {Mon, 13 Aug 2018 16:46:08 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/corr/abs-cs-0610097},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@article{Banach_2002,
  author =       {Banach, R.},
  title =        {Term Graph Rewriting and Garbage Collection Using
                  Opfibrations},
  year =         1994,
  issue_date =   {Aug. 29, 1994},
  publisher =    {Elsevier Science Publishers Ltd.},
  address =      {GBR},
  volume =       131,
  number =       1,
  issn =         {0304-3975},
  url =          {https://doi.org/10.1016/0304-3975(94)90090-6},
  doi =          {10.1016/0304-3975(94)90090-6},
  abstract =     {The categorical semantics of (an abstract version of) the
                  general term graph rewriting language DACTL is
                  investigated. The operational semantics is reformulated in
                  order to reveal its universal properties. The technical
                  dissonance between the matchings of left-hand sides of rules
                  to redexes, and the properties of rewrite rules themselves, is
                  taken as the impetus for expressing the core of the model as a
                  Grothendieck opfibration of a category of general rewrites
                  over a base of general rewrite rules. Garbage collection is
                  examined in this framework in order to reconcile the treatment
                  with earlier approaches. It is shown that term rewriting has
                  particularly good garbage-theoretic properties that do not
                  generalise to all cases of graph rewriting and that this has
                  been a stumbling block for aspects of some earlier models for
                  graph rewriting.},
  journal =      {Theor. Comput. Sci.},
  month =        aug,
  pages =        {29–94},
  numpages =     66
}

@Online{diskin19:_multip_model_synch_multiar_delta,
  author       = {Zinovy Diskin AND Harald König AND Mark Lawford},
  title        = {{Multiple Model Synchronization with Multiary Delta Lenses
                  with Amendment and K-Putput}},
  year         = 2019,
  archiveprefix= {arXiv},
  eprint       = {1911.11302v1},
  primaryclass = {cs.LO}
}

@Online{arend:webpage,
  author       = {JetBrains Research},
  title        = {Arend Theorem Prover},
  url          = {https://arend-lang.github.io/},
  year         = 2020,
}

@Article{Bird_2009,
  author =       {Bird, Richard},
  title =        {Thinking Functionally with {Haskell}},
  year =         2009,
  doi =          {10.1017/cbo9781316092415},
  url =          {http://dx.doi.org/10.1017/cbo9781316092415},
  isbn =         9781316092415,
  publisher =    {Cambridge University Press}
}

@Online{diskin_stunkel20:universal_algebra_of_diagrammatic_operations,
  author       = {Zinovy Diskin AND Patrick Stünkel},
  title        = {{Sketches, Queries, Views, and Kleisli Composition: Towards
                  Universal Algebra of Diagrammatic Operations with Pre- and
                  Post-Conditions}},
  year         = 2020,
  url = {https://www.mcscert.ca/wp-content/uploads/2020/05/McSCert-Technical-Report-33.pdf}
}

@book{DBLP:books/aw/GKP1994,
  author =       {Ronald L. Graham and Donald E. Knuth and Oren Patashnik},
  title =        {Concrete Mathematics: {A} Foundation for Computer Science, 2nd
                  Ed},
  publisher =    {Addison-Wesley},
  year =         1994,
  url =          {https://www-cs-faculty.stanford.edu/\%7Eknuth/gkp.html},
  isbn =         {0-201-55802-5},
  timestamp =    {Tue, 03 Dec 2019 08:51:10 +0100},
  biburl =       {https://dblp.org/rec/books/aw/GKP1994.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Book{DBLP:books/sp/GriesS93,
  author =       {David Gries and Fred B. Schneider},
  title =        {A Logical Approach to Discrete Math},
  year =         1993,
  series =       {Texts and Monographs in Computer Science},
  publisher =    {Springer},
  isbn =         {0-387-94115-0},
  doi =          {10.1007/978-1-4757-3837-7},
  url =          {https://doi.org/10.1007/978-1-4757-3837-7},
  timestamp =    {Tue, 16 May 2017 14:01:42 +0200},
  biburl =       {https://dblp.org/rec/books/sp/GriesS93.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/afp/2004,
  editor =       {Varmo Vene and Tarmo Uustalu},
  title =        {Advanced Functional Programming, 5th International School,
                  {AFP} 2004, Tartu, Estonia, August 14-21, 2004, Revised
                  Lectures},
  series =       {Lecture Notes in Computer Science},
  volume =       3622,
  publisher =    {Springer},
  year =         2005,
  url =          {https://doi.org/10.1007/11546382},
  doi =          {10.1007/11546382},
  isbn =         {3-540-28540-7},
  timestamp =    {Tue, 14 May 2019 10:00:44 +0200},
  biburl =       {https://dblp.org/rec/conf/afp/2004.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/afp/McBride04,
  author =       {Conor McBride},
  title =        {Epigram: Practical Programming with Dependent Types},
  year =         2004,
  booktitle =    {Advanced Functional Programming, 5th International School,
                  {AFP} 2004, Tartu, Estonia, August 14-21, 2004, Revised
                  Lectures},
  pages =        {130-170},
  doi =          {10.1007/11546382\_3},
  url =          {https://doi.org/10.1007/11546382\_3},
  crossref =     {DBLP:conf/afp/2004},
  timestamp =    {Tue, 14 May 2019 10:00:44 +0200},
  biburl =       {https://dblp.org/rec/conf/afp/McBride04.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/aisc/2010,
  editor =       {Serge Autexier and Jacques Calmet and David Delahaye and
                  Patrick D. F. Ion and Laurence Rideau and Renaud Rioboo and
                  Alan P. Sexton},
  title =        {Intelligent Computer Mathematics, 10th International
                  Conference, {AISC} 2010, 17th Symposium, Calculemus 2010, and
                  9th International Conference, {MKM} 2010, Paris, France, July
                  5-10, 2010. Proceedings},
  series =       {Lecture Notes in Computer Science},
  volume =       6167,
  publisher =    {Springer},
  year =         2010,
  url =          {https://doi.org/10.1007/978-3-642-14128-7},
  doi =          {10.1007/978-3-642-14128-7},
  isbn =         {978-3-642-14127-0},
  timestamp =    {Tue, 14 May 2019 10:00:52 +0200},
  biburl =       {https://dblp.org/rec/conf/aisc/2010.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/aisc/GrabowskiS10,
  author =       {Adam Grabowski and Christoph Schwarzweller},
  title =        {On Duplication in Mathematical Repositories},
  year =         2010,
  booktitle =    {Intelligent Computer Mathematics, 10th International
                  Conference, {AISC} 2010, 17th Symposium, Calculemus 2010, and
                  9th International Conference, {MKM} 2010, Paris, France, July
                  5-10, 2010. Proceedings},
  pages =        {300-314},
  doi =          {10.1007/978-3-642-14128-7\_26},
  url =          {https://doi.org/10.1007/978-3-642-14128-7\_26},
  crossref =     {DBLP:conf/aisc/2010},
  timestamp =    {Tue, 14 May 2019 10:00:52 +0200},
  biburl =       {https://dblp.org/rec/conf/aisc/GrabowskiS10.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/aplas/2002,
  title =        {The Third Asian Workshop on Programming Languages and Systems,
                  APLAS'02, Shanghai Jiao Tong University, Shanghai, China,
                  November 29 - December 1, 2002, Proceedings},
  year =         2002,
  timestamp =    {Tue, 01 Jun 2004 13:16:00 +0200},
  biburl =       {https://dblp.org/rec/conf/aplas/2002.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/aplas/GuoyongDF02,
  author =       {Guoyong and Peimin Deng and Jiali Feng},
  title =        {Specification based on Backus-Naur Formalism and Programming
                  Language},
  year =         2002,
  booktitle =    {The Third Asian Workshop on Programming Languages and Systems,
                  APLAS'02, Shanghai Jiao Tong University, Shanghai, China,
                  November 29 - December 1, 2002, Proceedings},
  pages =        {95-101},
  crossref =     {DBLP:conf/aplas/2002},
  timestamp =    {Tue, 01 Jun 2004 13:16:00 +0200},
  biburl =       {https://dblp.org/rec/conf/aplas/GuoyongDF02.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cmcs/Sobocinski12,
  author =       {Pawel Sobocinski},
  editor =       {Dirk Pattinson and Lutz Schr{\"{o}}der},
  title =        {Relational Presheaves as Labelled Transition Systems},
  booktitle =    {Coalgebraic Methods in Computer Science - 11th International
                  Workshop, {CMCS} 2012, Colocated with {ETAPS} 2012, Tallinn,
                  Estonia, March 31 - April 1, 2012, Revised Selected Papers},
  series =       {Lecture Notes in Computer Science},
  volume =       7399,
  pages =        {40--50},
  publisher =    {Springer},
  year =         2012,
  url =          {https://doi.org/10.1007/978-3-642-32784-1\_3},
  doi =          {10.1007/978-3-642-32784-1\_3},
  timestamp =    {Mon, 15 Jun 2020 17:09:41 +0200},
  biburl =       {https://dblp.org/rec/conf/cmcs/Sobocinski12.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/cogsci/2016,
  editor =       {Anna Papafragou and Daniel Grodner and Daniel Mirman and John
                  C. Trueswell},
  title =        {Proceedings of the 38th Annual Meeting of the Cognitive
                  Science Society, Recogbizing and Representing Events, CogSci
                  2016, Philadelphia, PA, USA, August 10-13, 2016},
  publisher =    {cognitivesciencesociety.org},
  year =         2016,
  url =          {https://mindmodeling.org/cogsci2016/},
  isbn =         {978-0-9911967-3-9},
  timestamp =    {Sun, 14 Jan 2018 11:47:56 +0100},
  biburl =       {https://dblp.org/rec/conf/cogsci/2016.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Online{emmenegger18:_w,
  author       = {Jacopo Emmenegger},
  title        = {{W-types in setoids}},
  year         = 2018,
  archiveprefix= {arXiv},
  eprint       = {1809.02375v2},
  primaryclass = {math.LO}
}

@online{copumpkin,
  title = {agda-categories library},
  author  = {Jacque Carrette, Jason Hu},
  year = 2020,
  url = {https://github.com/agda/agda-categories},
  urldate = {2020-08-20}
}

@InProceedings{DBLP:conf/cogsci/CibelliXAGR16,
  author =       {Emily Cibelli and Yang Xu and Joseph L. Austerweil and Thomas
                  L. Griffiths and Terry Regier},
  title =        {The Sapir-Whorf Hypothesis and Probabilistic Inference:
                  Evidence from the Domain of Color},
  year =         2016,
  booktitle =    {Proceedings of the 38th Annual Meeting of the Cognitive
                  Science Society, Recogbizing and Representing Events, CogSci
                  2016, Philadelphia, PA, USA, August 10-13, 2016},
  url =          {https://mindmodeling.org/cogsci2016/papers/0493/index.html},
  crossref =     {DBLP:conf/cogsci/2016},
  timestamp =    {Sun, 14 Jan 2018 11:48:18 +0100},
  biburl =       {https://dblp.org/rec/conf/cogsci/CibelliXAGR16.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/cogsci/TsengCRX16,
  author =       {Christine Tseng and Alexandra Carstensen and Terry Regier and
                  Yang Xu},
  title =        {A computational investigation of the Sapir-Whorf hypothesis:
                  The case of spatial relations},
  year =         2016,
  booktitle =    {Proceedings of the 38th Annual Meeting of the Cognitive
                  Science Society, Recogbizing and Representing Events, CogSci
                  2016, Philadelphia, PA, USA, August 10-13, 2016},
  url =          {https://mindmodeling.org/cogsci2016/papers/0387/index.html},
  crossref =     {DBLP:conf/cogsci/2016},
  timestamp =    {Sun, 14 Jan 2018 11:48:18 +0100},
  biburl =       {https://dblp.org/rec/conf/cogsci/TsengCRX16.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/esop/BonchiGKSZ17,
  author =       {Filippo Bonchi and Fabio Gadducci and Aleks Kissinger and
                  Pawel Sobocinski and Fabio Zanasi},
  editor =       {Hongseok Yang},
  title =        {Confluence of Graph Rewriting with Interfaces},
  booktitle =    {Programming Languages and Systems - 26th European Symposium on
                  Programming, {ESOP} 2017, Held as Part of the European Joint
                  Conferences on Theory and Practice of Software, {ETAPS} 2017,
                  Uppsala, Sweden, April 22-29, 2017, Proceedings},
  series =       {Lecture Notes in Computer Science},
  volume =       10201,
  pages =        {141--169},
  publisher =    {Springer},
  year =         2017,
  url =          {https://doi.org/10.1007/978-3-662-54434-1\_6},
  doi =          {10.1007/978-3-662-54434-1\_6},
  timestamp =    {Mon, 15 Jun 2020 17:09:49 +0200},
  biburl =       {https://dblp.org/rec/conf/esop/BonchiGKSZ17.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/europar/2014w1,
  editor =       {Lu{\'{\i}}s M. B. Lopes and Julius Zilinskas and Alexandru
                  Costan and Roberto G. Cascella and Gabor Kecskemeti and
                  Emmanuel Jeannot and Mario Cannataro and Laura Ricci and
                  Siegfried Benkner and Salvador Petit and Vittorio Scarano and
                  Jos{\'{e}} Gracia and Sascha Hunold and Stephen L. Scott and
                  Stefan Lankes and Christian Lengauer and Jes{\'{u}}s Carretero
                  and Jens Breitbart and Michael Alexander},
  title =        {Euro-Par 2014: Parallel Processing Workshops - Euro-Par 2014
                  International Workshops, Porto, Portugal, August 25-26, 2014,
                  Revised Selected Papers, Part {I}},
  series =       {Lecture Notes in Computer Science},
  volume =       8805,
  publisher =    {Springer},
  year =         2014,
  url =          {https://doi.org/10.1007/978-3-319-14325-5},
  doi =          {10.1007/978-3-319-14325-5},
  isbn =         {978-3-319-14324-8},
  timestamp =    {Wed, 19 Feb 2020 14:52:57 +0100},
  biburl =       {https://dblp.org/rec/conf/europar/2014w1.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/europar/StanisicL14,
  author =       {Luka Stanisic and Arnaud Legrand},
  title =        {Effective Reproducible Research with Org-Mode and Git},
  year =         2014,
  booktitle =    {Euro-Par 2014: Parallel Processing Workshops - Euro-Par 2014
                  International Workshops, Porto, Portugal, August 25-26, 2014,
                  Revised Selected Papers, Part {I}},
  pages =        {475-486},
  doi =          {10.1007/978-3-319-14325-5\_41},
  url =          {https://doi.org/10.1007/978-3-319-14325-5\_41},
  crossref =     {DBLP:conf/europar/2014w1},
  timestamp =    {Wed, 19 Feb 2020 14:52:57 +0100},
  biburl =       {https://dblp.org/rec/conf/europar/StanisicL14.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/fossacs/Diskin20,
  author =       {Zinovy Diskin},
  editor =       {Jean Goubault{-}Larrecq and Barbara K{\"{o}}nig},
  title =        {General Supervised Learning as Change Propagation with Delta
                  Lenses},
  booktitle =    {Foundations of Software Science and Computation Structures -
                  23rd International Conference, {FOSSACS} 2020, Held as Part of
                  the European Joint Conferences on Theory and Practice of
                  Software, {ETAPS} 2020, Dublin, Ireland, April 25-30, 2020,
                  Proceedings},
  series =       {Lecture Notes in Computer Science},
  volume =       12077,
  pages =        {177--197},
  publisher =    {Springer},
  year =         2020,
  url =          {https://doi.org/10.1007/978-3-030-45231-5\_10},
  doi =          {10.1007/978-3-030-45231-5\_10},
  timestamp =    {Mon, 20 Apr 2020 16:50:39 +0200},
  biburl =       {https://dblp.org/rec/conf/fossacs/Diskin20.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/gpce/2019,
  editor =       {Ina Schaefer and Christoph Reichenbach and Tijs van der Storm},
  title =        {Proceedings of the 18th {ACM} {SIGPLAN} International
                  Conference on Generative Programming: Concepts and
                  Experiences, {GPCE} 2019, Athens, Greece, October 21-22, 2019},
  publisher =    {{ACM}},
  year =         2019,
  url =          {https://doi.org/10.1145/3357765},
  doi =          {10.1145/3357765},
  isbn =         {978-1-4503-6980-0},
  timestamp =    {Wed, 30 Oct 2019 18:36:56 +0100},
  biburl =       {https://dblp.org/rec/conf/gpce/2019.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/gpce/Al-hassyCK19,
  author =       {Musa Al{-}hassy and Jacques Carette and Wolfram Kahl},
  title =        {A language feature to unbundle data at will (short paper)},
  year =         2019,
  booktitle =    {Proceedings of the 18th {ACM} {SIGPLAN} International
                  Conference on Generative Programming: Concepts and
                  Experiences, {GPCE} 2019, Athens, Greece, October 21-22, 2019},
  pages =        {14-19},
  doi =          {10.1145/3357765.3359523},
  url =          {https://doi.org/10.1145/3357765.3359523},
  crossref =     {DBLP:conf/gpce/2019},
  timestamp =    {Wed, 30 Oct 2019 18:46:39 +0100},
  biburl =       {https://dblp.org/rec/conf/gpce/Al-hassyCK19.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/haskell/2013,
  editor =       {Chung{-}chieh Shan},
  title =        {Proceedings of the 2013 {ACM} {SIGPLAN} Symposium on Haskell,
                  Boston, MA, USA, September 23-24, 2013},
  publisher =    {{ACM}},
  year =         2013,
  url =          {http://dl.acm.org/citation.cfm?id=2503778},
  isbn =         {978-1-4503-2383-3},
  timestamp =    {Thu, 19 Sep 2013 11:33:05 +0200},
  biburl =       {https://dblp.org/rec/conf/haskell/2013.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/haskell/2016,
  editor =       {Geoffrey Mainland},
  title =        {Proceedings of the 9th International Symposium on Haskell,
                  Haskell 2016, Nara, Japan, September 22-23, 2016},
  publisher =    {{ACM}},
  year =         2016,
  url =          {https://doi.org/10.1145/2976002},
  doi =          {10.1145/2976002},
  isbn =         {978-1-4503-4434-0},
  timestamp =    {Tue, 06 Nov 2018 16:58:22 +0100},
  biburl =       {https://dblp.org/rec/conf/haskell/2016.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/haskell/LindleyM13,
  author =       {Sam Lindley and Conor McBride},
  title =        {Hasochism: the pleasure and pain of dependently typed haskell
                  programming},
  year =         2013,
  booktitle =    {Proceedings of the 2013 {ACM} {SIGPLAN} Symposium on Haskell,
                  Boston, MA, USA, September 23-24, 2013},
  pages =        {81-92},
  doi =          {10.1145/2503778.2503786},
  url =          {https://doi.org/10.1145/2503778.2503786},
  crossref =     {DBLP:conf/haskell/2013},
  timestamp =    {Tue, 06 Nov 2018 16:58:22 +0100},
  biburl =       {https://dblp.org/rec/conf/haskell/LindleyM13.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/haskell/MarlowJKM16,
  author =       {Simon Marlow and Simon {Peyton Jones} and Edward Kmett and
                  Andrey Mokhov},
  title =        {Desugaring {Haskell}'s do-notation into applicative
                  operations},
  year =         2016,
  booktitle =    {Proceedings of the 9th International Symposium on Haskell,
                  Haskell 2016, Nara, Japan, September 22-23, 2016},
  pages =        {92-104},
  doi =          {10.1145/2976002.2976007},
  url =          {https://doi.org/10.1145/2976002.2976007},
  crossref =     {DBLP:conf/haskell/2016},
  timestamp =    {Tue, 06 Nov 2018 16:58:22 +0100},
  biburl =       {https://dblp.org/rec/conf/haskell/MarlowJKM16.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/hopl/2007,
  editor =       {Barbara G. Ryder and Brent Hailpern},
  title =        {Proceedings of the Third {ACM} {SIGPLAN} History of
                  Programming Languages Conference (HOPL-III), San Diego,
                  California, USA, 9-10 June 2007},
  publisher =    {{ACM}},
  year =         2007,
  url =          {http://dl.acm.org/citation.cfm?id=1238844},
  timestamp =    {Tue, 22 May 2012 15:24:55 +0200},
  biburl =       {https://dblp.org/rec/conf/hopl/2007.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/hopl/HudakHJW07,
  author =       {Paul Hudak and John Hughes and Simon L. {Peyton Jones} and
                  Philip Wadler},
  title =        {A history of {Haskell}: being lazy with class},
  year =         2007,
  booktitle =    {Proceedings of the Third {ACM} {SIGPLAN} History of
                  Programming Languages Conference (HOPL-III), San Diego,
                  California, USA, 9-10 June 2007},
  pages =        {1-55},
  doi =          {10.1145/1238844.1238856},
  url =          {https://doi.org/10.1145/1238844.1238856},
  crossref =     {DBLP:conf/hopl/2007},
  timestamp =    {Wed, 14 Nov 2018 10:57:27 +0100},
  biburl =       {https://dblp.org/rec/conf/hopl/HudakHJW07.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/icalp/2004,
  editor =       {Josep D{\'{\i}}az and Juhani Karhum{\"{a}}ki and Arto
                  Lepist{\"{o}} and Donald Sannella},
  title =        {Automata, Languages and Programming: 31st International
                  Colloquium, {ICALP} 2004, Turku, Finland, July 12-16,
                  2004. Proceedings},
  series =       {Lecture Notes in Computer Science},
  volume =       3142,
  publisher =    {Springer},
  year =         2004,
  url =          {https://doi.org/10.1007/b99859},
  doi =          {10.1007/b99859},
  isbn =         {3-540-22849-7},
  timestamp =    {Tue, 14 May 2019 10:00:44 +0200},
  biburl =       {https://dblp.org/rec/conf/icalp/2004.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/icalp/AbbottAG04,
  author =       {Michael Gordon Abbott and Thorsten Altenkirch and Neil Ghani},
  title =        {Representing Nested Inductive Types Using W-Types},
  year =         2004,
  booktitle =    {Automata, Languages and Programming: 31st International
                  Colloquium, {ICALP} 2004, Turku, Finland, July 12-16,
                  2004. Proceedings},
  pages =        {59-71},
  doi =          {10.1007/978-3-540-27836-8\_8},
  url =          {https://doi.org/10.1007/978-3-540-27836-8\_8},
  crossref =     {DBLP:conf/icalp/2004},
  timestamp =    {Tue, 14 May 2019 10:00:44 +0200},
  biburl =       {https://dblp.org/rec/conf/icalp/AbbottAG04.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@proceedings{DBLP:conf/ijcnn/2009,
  title =        {International Joint Conference on Neural Networks, {IJCNN}
                  2009, Atlanta, Georgia, USA, 14-19 June 2009},
  publisher =    {{IEEE} Computer Society},
  year =         2009,
  url =          {https://ieeexplore.ieee.org/xpl/conhome/5161636/proceeding},
  isbn =         {978-1-4244-3548-7},
  timestamp =    {Wed, 16 Oct 2019 14:14:55 +0200},
  biburl =       {https://dblp.org/rec/conf/ijcnn/2009.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{DBLP:conf/ijcnn/Perlovsky09,
  author =       {Leonid I. Perlovsky},
  title =        {Emotions, language, and Sapir-Whorf hypothesis},
  year =         2009,
  booktitle =    {International Joint Conference on Neural Networks, {IJCNN}
                  2009, Atlanta, Georgia, USA, 14-19 June 2009},
  pages =        {2501-2508},
  doi =          {10.1109/IJCNN.2009.5178891},
  url =          {https://doi.org/10.1109/IJCNN.2009.5178891},
  crossref =     {DBLP:conf/ijcnn/2009},
  timestamp =    {Wed, 16 Oct 2019 14:14:55 +0200},
  biburl =       {https://dblp.org/rec/conf/ijcnn/Perlovsky09.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Online{lf_meta_mechanisation,
  author       = {Christian Urban AND James Cheney AND Stefan
          Berghofer},
  title        = {{Mechanizing the Metatheory of LF}},
  year         = 2008,
  archiveprefix= {arXiv},
  eprint       = {0804.1667v3},
  primaryclass = {cs.LO}
}

@inproceedings{DBLP:conf/popl/HofmannPW12,
  author =       {Martin Hofmann and Benjamin C. Pierce and Daniel Wagner},
  editor =       {John Field and Michael Hicks},
  title =        {Edit lenses},
  booktitle =    {Proceedings of the 39th {ACM} {SIGPLAN-SIGACT} Symposium on
                  Principles of Programming Languages, {POPL} 2012,
                  Philadelphia, Pennsylvania, USA, January 22-28, 2012},
  pages =        {495--508},
  publisher =    {{ACM}},
  year =         2012,
  url =          {https://doi.org/10.1145/2103656.2103715},
  doi =          {10.1145/2103656.2103715},
  timestamp =    {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl =       {https://dblp.org/rec/conf/popl/HofmannPW12.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/apal/Cartmell86,
  author =       {John Cartmell},
  title =        {Generalised algebraic theories and contextual categories},
  year =         1986,
  volume =       32,
  pages =        {209-243},
  doi =          {10.1016/0168-0072(86)90053-9},
  url =          {https://doi.org/10.1016/0168-0072(86)90053-9},
  journal =      {Ann. Pure Appl. Log.},
  timestamp =    {Fri, 21 Feb 2020 21:18:13 +0100},
  biburl =       {https://dblp.org/rec/journals/apal/Cartmell86.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/bmcbi/LarosBDT11,
  author =       {Jeroen F. J. Laros and Andr{\'{e}} Blavier and Johan T. den
                  Dunnen and Peter E. M. Taschner},
  title =        {A formalized description of the standard human variant
                  nomenclature in Extended Backus-Naur Form},
  year =         2011,
  volume =       12,
  number =       {{S-4}},
  pages =        {S5},
  doi =          {10.1186/1471-2105-12-S4-S5},
  url =          {https://doi.org/10.1186/1471-2105-12-S4-S5},
  journal =      {{BMC} Bioinform.},
  timestamp =    {Sun, 15 Mar 2020 19:51:56 +0100},
  biburl =       {https://dblp.org/rec/journals/bmcbi/LarosBDT11.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Online{roman20:profun:lenses:prisms:optics,
  author       = {Mario Román},
  title        = {{Profunctor optics and traversals}},
  year         = 2020,
  archiveprefix= {arXiv},
  eprint       = {2001.08045v1},
  primaryclass = {cs.PL}
}

@Article{DBLP:journals/cacm/Knuth64a,
  author =       {Donald E. Knuth},
  title =        {backus normal form vs. Backus Naur form},
  year =         1964,
  volume =       7,
  number =       12,
  pages =        {735-736},
  doi =          {10.1145/355588.365140},
  url =          {https://doi.org/10.1145/355588.365140},
  journal =      {Commun. {ACM}},
  timestamp =    {Wed, 14 Nov 2018 10:22:34 +0100},
  biburl =       {https://dblp.org/rec/journals/cacm/Knuth64a.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@online{gentle-intro-to-reflection,
  author    = {Musa Al-hassy},
  title     = {A slow-paced introduction to reflection in {Agda} ---Tactics!},
  year      = {2019},
  url       = {https://github.com/alhassy/gentle-intro-to-reflection}
}

@Article{DBLP:journals/cj/ChaplinCH73,
  author =       {R. I. Chaplin and R. E. Crosbie and J. L. Hay},
  title =        {A Graphical Representation of the Backus-Naur Form},
  year =         1973,
  volume =       16,
  number =       1,
  pages =        {28-29},
  doi =          {10.1093/comjnl/16.1.28},
  url =          {https://doi.org/10.1093/comjnl/16.1.28},
  journal =      {Comput. J.},
  timestamp =    {Sat, 20 May 2017 00:22:29 +0200},
  biburl =       {https://dblp.org/rec/journals/cj/ChaplinCH73.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@online{data_monoid,
  organisation = {The {Haskell} Team},
  title = {{Haskell Basic Libraries --- Data.Monoid}},
  year = 2020,
  url = {http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html},
  urldate = {2020-03-03}
}

@online{agda_std_lib,
  organisation = {The {Agda} Team},
  title = {{{Agda} Standard Library}},
  year = 2020,
  url = {https://github.com/agda/agda-stdlib},
  urldate = {2020-03-03}
}

@article{DBLP:journals/corr/AhrensCS15,
  author =       {Benedikt Ahrens and Paolo Capriotti and R{\'{e}}gis Spadotti},
  title =        {Non-wellfounded trees in Homotopy Type Theory},
  journal =      {CoRR},
  volume =       {abs/1504.02949},
  year =         2015,
  url =          {http://arxiv.org/abs/1504.02949},
  archivePrefix ={arXiv},
  eprint =       {1504.02949},
  timestamp =    {Mon, 13 Aug 2018 16:48:25 +0200},
  biburl =       {https://dblp.org/rec/journals/corr/AhrensCS15.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/csl/MehlerPD11,
  author =       {Alexander Mehler and Olga Pustylnikov and Nils Diewald},
  title =        {Geography of social ontologies: Testing a variant of the
                  Sapir-Whorf Hypothesis in the context of Wikipedia},
  year =         2011,
  volume =       25,
  number =       3,
  pages =        {716-740},
  doi =          {10.1016/j.csl.2010.05.006},
  url =          {https://doi.org/10.1016/j.csl.2010.05.006},
  journal =      {Comput. Speech Lang.},
  timestamp =    {Thu, 20 Feb 2020 11:32:21 +0100},
  biburl =       {https://dblp.org/rec/journals/csl/MehlerPD11.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/entcs/BruniG01,
  author =       {Roberto Bruni and Fabio Gadducci},
  title =        {Some algebraic laws for spans},
  year =         2001,
  volume =       44,
  number =       3,
  pages =        {175-193},
  doi =          {10.1016/S1571-0661(04)80937-X},
  url =          {https://doi.org/10.1016/S1571-0661(04)80937-X},
  journal =      {Electron. Notes Theor. Comput. Sci.},
  timestamp =    {Mon, 15 Jun 2020 16:56:27 +0200},
  biburl =       {https://dblp.org/rec/journals/entcs/BruniG01.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/fac/BackhouseC89,
  author =       {Roland Carl Backhouse and Paul Chisholm},
  title =        {Do-It-Yourself Type Theory},
  year =         1989,
  volume =       1,
  number =       1,
  pages =        {19-84},
  doi =          {10.1007/BF01887198},
  url =          {https://doi.org/10.1007/BF01887198},
  journal =      {Formal Aspects Comput.},
  timestamp =    {Tue, 25 Aug 2020 16:45:57 +0200},
  biburl =       {https://dblp.org/rec/journals/fac/BackhouseC89.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/iandc/Chomsky59a,
  author =       {Noam Chomsky},
  title =        {On Certain Formal Properties of Grammars},
  year =         1959,
  volume =       2,
  number =       2,
  pages =        {137-167},
  doi =          {10.1016/S0019-9958(59)90362-6},
  url =          {https://doi.org/10.1016/S0019-9958(59)90362-6},
  journal =      {Inf. Control.},
  timestamp =    {Mon, 18 May 2020 17:44:54 +0200},
  biburl =       {https://dblp.org/rec/journals/iandc/Chomsky59a.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/iandc/Chomsky59b,
  author =       {Noam Chomsky},
  title =        {A Note on Phrase Structure Grammars},
  year =         1959,
  volume =       2,
  number =       4,
  pages =        {393-395},
  doi =          {10.1016/S0019-9958(59)80017-6},
  url =          {https://doi.org/10.1016/S0019-9958(59)80017-6},
  journal =      {Inf. Control.},
  timestamp =    {Mon, 18 May 2020 17:44:59 +0200},
  biburl =       {https://dblp.org/rec/journals/iandc/Chomsky59b.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/iandc/Moggi91,
  author =       {Eugenio Moggi},
  title =        {Notions of Computation and Monads},
  year =         1991,
  volume =       93,
  number =       1,
  pages =        {55-92},
  doi =          {10.1016/0890-5401(91)90052-4},
  url =          {https://doi.org/10.1016/0890-5401(91)90052-4},
  journal =      {Inf. Comput.},
  timestamp =    {Wed, 25 Sep 2019 17:54:39 +0200},
  biburl =       {https://dblp.org/rec/journals/iandc/Moggi91.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/jfp/AltenkirchGHMM15,
  author =       {Thorsten Altenkirch and Neil Ghani and Peter G. Hancock and
                  Conor McBride and Peter Morris},
  title =        {Indexed containers},
  year =         2015,
  volume =       25,
  doi =          {10.1017/S095679681500009X},
  url =          {https://doi.org/10.1017/S095679681500009X},
  journal =      {J. Funct. Program.},
  timestamp =    {Fri, 19 Jun 2020 12:14:16 +0200},
  biburl =       {https://dblp.org/rec/journals/jfp/AltenkirchGHMM15.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/jfp/Swierstra08,
  author =       {Wouter Swierstra},
  title =        {Data types {\`{a}} la carte},
  year =         2008,
  volume =       18,
  number =       4,
  pages =        {423-436},
  doi =          {10.1017/S0956796808006758},
  url =          {https://doi.org/10.1017/S0956796808006758},
  journal =      {J. Funct. Program.},
  timestamp =    {Sat, 27 May 2017 14:24:34 +0200},
  biburl =       {https://dblp.org/rec/journals/jfp/Swierstra08.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/mscs/BungeF00,
  author =       {Marta Bunge and Marcelo P. Fiore},
  title =        {Unique factorisation lifting functors and categories of
                  linearly-controlled processes},
  journal =      {Math. Struct. Comput. Sci.},
  volume =       10,
  number =       2,
  pages =        {137--163},
  year =         2000,
  url =
                  {http://journals.cambridge.org/action/displayAbstract?aid=44865},
  timestamp =    {Wed, 01 Apr 2020 08:48:43 +0200},
  biburl =       {https://dblp.org/rec/journals/mscs/BungeF00.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{DBLP:journals/pacmpl/VezzosiM019,
  author =       {Andrea Vezzosi and Anders M{\"{o}}rtberg and Andreas Abel},
  title =        {Cubical agda: a dependently typed programming language with
                  univalence and higher inductive types},
  year =         2019,
  volume =       3,
  number =       {{ICFP}},
  pages =        {87:1--87:29},
  doi =          {10.1145/3341691},
  url =          {https://doi.org/10.1145/3341691},
  journal =      {Proc. {ACM} Program. Lang.},
  timestamp =    {Thu, 16 Apr 2020 13:51:42 +0200},
  biburl =       {https://dblp.org/rec/journals/pacmpl/VezzosiM019.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@Article{Dybjer_1997,
  author =       {Dybjer, Peter},
  title =        {Representing inductively defined sets by wellorderings in
                  Martin-Löf’s type theory},
  year =         1997,
  volume =       176,
  number =       {1-2},
  month =        {Apr},
  pages =        {329–335},
  issn =         {0304-3975},
  doi =          {10.1016/s0304-3975(96)00145-4},
  url =          {http://dx.doi.org/10.1016/s0304-3975(96)00145-4},
  journal =      {Theoretical Computer Science},
  publisher =    {Elsevier BV}
}

%% [[file:~/thesis-proposal/papers/References.org::*For%20GPCE.org][For GPCE.org:1]]
@online{alhassy_thesis_proposal,
  author    = {Musa Al-hassy},
  title     = {The Next 700 Module Systems: Extending Dependently-Typed Languages to Implement Module System Features In The Core Language},
  school    = {McMaster University},
  year      = {2019},
  url       = {https://alhassy.github.io/next-700-module-systems-proposal/thesis-proposal.pdf}
}

@Online{types_overview,
  author       = {Nino Guallart},
  title        = {An Overview of Type Theories},
  year         = 2014,
  archiveprefix= {arXiv},
  eprint       = {1411.1029v2},
  primaryclass = {math.LO}
}

@inproceedings{Elliott2016DenotationalDW,
  title =        {Denotational design with type class morphisms},
  author =       {Elliott},
  year =         2016,
  url =
                  {http://conal.net/papers/type-class-morphisms/type-class-morphisms-long.pdf}
}

@online{Hales-blog-post,
  author    = {Tom Hales},
  title     = {A Review of the Lean Theorem Prover},
  year      = {2018},
  url       = {https://jiggerwit.wordpress.com/2018/09/18/a-review-of-the-lean-theorem-prover/}
}
%% For GPCE.org:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Theory%20Presentation%20Combinators][Theory Presentation Combinators:1]]

@Article{Gambino_2004,
  author =       {Gambino, Nicola and Hyland, Martin},
  title =        {Wellfounded Trees and Dependent Polynomial Functors},
  year =         2004,
  pages =        {210–225},
  issn =         {1611-3349},
  doi =          {10.1007/978-3-540-24849-1_14},
  url =          {http://dx.doi.org/10.1007/978-3-540-24849-1_14},
  isbn =         9783540248491,
  journal =      {Types for Proofs and Programs},
  publisher =    {Springer Berlin Heidelberg}
}
%% Theory Presentation Combinators:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Computing%20with%20Semirings%20and%20Weak%20Rig%20Groupoids][Computing with Semirings and Weak Rig Groupoids:1]]

@BOOK{JacobsCLTT,
  AUTHOR =       "B. Jacobs",
  TITLE =        "Categorical Logic and Type Theory",
  PUBLISHER =    "North Holland",
  ADDRESS =      "Amsterdam",
  SERIES =       "Studies in Logic and the Foundations of Mathematics",
  NUMBER =       141,
  YEAR =         1999
}
%% Computing with Semirings and Weak Rig Groupoids:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Hasochism:%20the%20pleasure%20and%20pain%20of%20dependently%20typed%20haskell%20programming][Hasochism: the pleasure and pain of dependently typed haskell programming:1]]

@inproceedings{LF_practical_module_system,
  author =       {Florian Rabe and Carsten Sch{\"{u}}rmann},
  title =        {A practical module system for {LF}},
  booktitle =    {Proceedings of the Fourth International Workshop on Logical
                  Frameworks and Meta-Languages: Theory and Practice, {LFMTP}
                  '09, McGill University, Montreal, Canada, August 2, 2009},
  pages =        {40--48},
  year =         2009,
  crossref =     {DBLP:conf/lfmtp/2009},
  url =          {http://doi.acm.org/10.1145/1577824.1577831},
  doi =          {10.1145/1577824.1577831},
  timestamp =    {Mon, 12 Mar 2012 07:35:17 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/lfmtp/RabeS09},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Hasochism: the pleasure and pain of dependently typed haskell programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Deriving%20Via][Deriving Via:1]]

@book{LogicHandbookVol5,
  doi =          {10.1093/oso/9780198537816.001.0001},
  url =          {https://doi.org/10.1093%2Foso%2F9780198537816.001.0001},
  year =         2001,
  month =        {jan},
  publisher =    {Oxford University Press},
  editor =       {S. Abramsky and Dov M. Gabbay and T. S. E. Maibaum},
  title =        {Handbook of Logic in Computer Science: Volume 5. Algebraic and
                  Logical Structures}
}
%% Deriving Via:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Realms:%20A%20Structure%20for%20Consolidating%20Knowledge%20about%20Mathematical%20Theories][Realms: A Structure for Consolidating Knowledge about Mathematical Theories:1]]
@Online{realms,
  author       = {Jacques Carette AND William M. Farmer AND Michael
          Kohlhase},
  title        = {{Realms: A Structure for Consolidating Knowledge
          about Mathematical Theories}},
  year         = 2014,
  archiveprefix= {arXiv},
  eprint       = {1405.5956v1},
  primaryclass = {cs.MS}
}
%% Realms: A Structure for Consolidating Knowledge about Mathematical Theories:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*programatica,%20haskell_modules_formally,%20haskell_in_haskell,%20classic_haskell_genericity][programatica, haskell_modules_formally, haskell_in_haskell, classic_haskell_genericity:1]]

@PhdThesis{Norell-2007,
  author =       {Ulf Norell},
  title =        {Towards a Practical Programming Language Based on Dependent
                  Type Theory},
  school =       {Department of Computer Science and Engineering, Chalmers
                  University of Technology},
  school =       {Dept.\null{} Comp.\null{} Sci.\null{} and Eng., Chalmers
                  Univ.\null{} of Technology},
  year =         2007,
  month =        SEP,
}

@article{Z_categorical,
  author =       {Pablo F. Castro and Nazareno Aguirre and Carlos L{\'{o}}pez
                  Pombo and T. S. E. Maibaum},
  title =        {Categorical foundations for structured specifications in {Z}},
  journal =      {Formal Asp. Comput.},
  volume =       27,
  number =       {5-6},
  pages =        {831--865},
  year =         2015,
  url =          {https://doi.org/10.1007/s00165-015-0336-0},
  doi =          {10.1007/s00165-015-0336-0},
  timestamp =    {Wed, 17 May 2017 14:25:33 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/fac/CastroAPM15},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{acsl,
  author =       {Eduardo Brito and Jorge Sousa Pinto},
  title =        {Program Verification in {SPARK} and {ACSL:} {A} Comparative
                  Case Study},
  year =         2010,
  booktitle =    {Reliable Software Technologiey - Ada-Europe 2010, 15th
                  Ada-Europe International Conference on Reliable Software
                  Technologies, Valencia, Spain, June 14-18, 2010. Proceedings},
  pages =        {97-110},
  doi =          {10.1007/978-3-642-13550-7\_7},
  url =          {https://doi.org/10.1007/978-3-642-13550-7\_7},
  timestamp =    {Mon, 29 May 2017 13:41:16 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/adaEurope/BritoP10},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@article{agda_aop,
  author =       {Shin{-}Cheng Mu and Hsiang{-}Shang Ko and Patrik Jansson},
  title =        {Algebra of programming in Agda: Dependent types for relational
                  program derivation},
  journal =      {J. Funct. Program.},
  volume =       19,
  number =       5,
  pages =        {545--579},
  year =         2009,
  url =          {https://doi.org/10.1017/S0956796809007345},
  doi =          {10.1017/S0956796809007345},
  timestamp =    {Tue, 06 Jun 2017 22:25:48 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jfp/MuKJ09},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% programatica, haskell_modules_formally, haskell_in_haskell, classic_haskell_genericity:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*packaging_mathematical_structures][packaging_mathematical_structures:1]]

@article{agda_bitcoin,
  author =       {Anton Setzer},
  title =        {Modelling Bitcoin in Agda},
  journal =      {CoRR},
  volume =       {abs/1804.06398},
  year =         2018,
  url =          {http://arxiv.org/abs/1804.06398},
  archivePrefix ={arXiv},
  eprint =       {1804.06398},
  timestamp =    {Mon, 13 Aug 2018 16:46:25 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/corr/abs-1804-06398},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% packaging_mathematical_structures:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20modular%20module%20system][A modular module system:1]]

@inproceedings{agda_fixpoints,
  author =       {Ran Zmigrod and Matthew L. Daggitt and Timothy G. Griffin},
  title =        {An Agda Formalization of {\"{U}}resin and Dubois' Asynchronous
                  Fixed-Point Theory},
  booktitle =    {Interactive Theorem Proving - 9th International Conference,
                  {ITP} 2018, Held as Part of the Federated Logic Conference,
                  FloC 2018, Oxford, UK, July 9-12, 2018, Proceedings},
  pages =        {623--639},
  year =         2018,
  crossref =     {DBLP:conf/itp/2018},
  url =          {https://doi.org/10.1007/978-3-319-94821-8\_37},
  doi =          {10.1007/978-3-319-94821-8\_37},
  timestamp =    {Wed, 03 Oct 2018 12:55:05 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/itp/ZmigrodDG18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A modular module system:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20type%20system%20for%20higher-order%20modules][A type system for higher-order modules:1]]

@inproceedings{agda_hardware,
  author =       {Jo{\~{a}}o Paulo Pizani Flor and Wouter Swierstra and Yorick
                  Sijsling},
  title =        {Pi-Ware: Hardware Description and Verification in Agda},
  booktitle =    {21st International Conference on Types for Proofs and
                  Programs, {TYPES} 2015, May 18-21, 2015, Tallinn, Estonia},
  pages =        {9:1--9:27},
  year =         2015,
  crossref =     {DBLP:conf/types/2015},
  url =          {https://doi.org/10.4230/LIPIcs.TYPES.2015.9},
  doi =          {10.4230/LIPIcs.TYPES.2015.9},
  timestamp =    {Thu, 23 Aug 2018 15:56:39 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/types/FlorSS15},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A type system for higher-order modules:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Understanding%20TypeScript][Understanding TypeScript:1]]

@book{agda_iowa_book,
  author =       {Stump, Aaron},
  title =        {Verified Functional Programming in Agda},
  year =         2016,
  isbn =         {978-1-97000-127-3},
  publisher =    {Association for Computing Machinery and Morgan \&\#38;
                  Claypool},
  address =      {New York, NY, USA},
}
%% Understanding TypeScript:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Type%20inference%20in%20mathematics][Type inference in mathematics:1]]
@Online{type_inference_in_math,
  author       = {Jeremy Avigad},
  title        = {{Type inference in mathematics}},
  year         = 2011,
  archiveprefix= {arXiv},
  eprint       = {1111.5885v2},
  primaryclass = {cs.LO}
}
%% Type inference in mathematics:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*First-class%20modules%20for%20component-based%20programming:%20Case%20for%20support][First-class modules for component-based programming: Case for support:1]]

@phdthesis{agda_main,
  author =       {Ulf Norell},
  title =        {Towards a practical programming language based on dependent
                  type theory},
  school =       {Chalmers University of Technology},
  year =         2007,
}
%% First-class modules for component-based programming: Case for support:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Using%20Dependent%20Types%20to%20Express%20Modular%20Structure][Using Dependent Types to Express Modular Structure:1]]

@inproceedings{agda_mergesort,
  author =       {Ernesto Copello and Alvaro Tasistro and Bruno Bianchi},
  title =        {Case of (Quite) Painless Dependently Typed Programming: Fully
                  Certified Merge Sort in Agda},
  booktitle =    {Programming Languages - 18th Brazilian Symposium, {SBLP} 2014,
                  Maceio, Brazil, October 2-3, 2014. Proceedings},
  pages =        {62--76},
  year =         2014,
  crossref =     {DBLP:conf/sblp/2014},
  url =          {https://doi.org/10.1007/978-3-319-11863-5\_5},
  doi =          {10.1007/978-3-319-11863-5\_5},
  timestamp =    {Fri, 26 May 2017 00:49:32 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/sblp/CopelloTB14},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Using Dependent Types to Express Modular Structure:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*(Re-)Creating%20sharing%20in%20Agda's%20GHC%20backend][(Re-)Creating sharing in Agda's GHC backend:1]]

@inproceedings{agda_nondeterministic,
  author =       {Sergio Antoy and Michael Hanus and Steven Libby},
  title =        {Proving Non-Deterministic Computations in Agda},
  booktitle =    {Proceedings 29th and 30th Workshops on (Constraint) Logic
                  Programming and 24th International Workshop on Functional and
                  (Constraint) Logic Programming, and 24th International
                  Workshop on Functional and (Constraint) Logic Programming,
                  {WLP} 2015 / {WLP} 2016 / {WFLP} 2016, Dresden and Leipzig,
                  Germany, 22nd September 2015 and 12-14th September 2016.},
  pages =        {180--195},
  year =         2017,
  crossref =     {DBLP:journals/corr/SchwarzV17},
  url =          {https://doi.org/10.4204/EPTCS.234.13},
  doi =          {10.4204/EPTCS.234.13},
  timestamp =    {Wed, 12 Sep 2018 01:05:16 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/corr/AntoyHL17},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% (Re-)Creating sharing in Agda's GHC backend:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20New%20Style%20of%20Proof%20for%20Mathematics%20Organized%20as%20a%20Network%20of%20Axiomatic%20Theories][A New Style of Proof for Mathematics Organized as a Network of Axiomatic Theories:1]]
@Online{purposes_of_proof,
  author       = {William M. Farmer},
  title        = {{A New Style of Proof for Mathematics Organized as a
          Network of Axiomatic Theories}},
  year         = 2018,
  archiveprefix= {arXiv},
  eprint       = {1806.00810v2},
  primaryclass = {cs.LO}
}
%% A New Style of Proof for Mathematics Organized as a Network of Axiomatic Theories:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Backpack:%20retrofitting%20Haskell%20with%20interfaces}][Backpack: retrofitting Haskell with interfaces}:1]]

@InProceedings{agda_overview,
  author =       {Ana Bove and Peter Dybjer and Ulf Norell},
  title =        {A Brief Overview of {Agda} --- {A} Functional Language with
                  Dependent Types},
  year =         2009,
  booktitle =    {Theorem Proving in Higher Order Logics, 22nd International
                  Conference, TPHOLs 2009, Munich, Germany, August 17--20,
                  2009. Proceedings},
  pages =        {73--78},
  doi =          {10.1007/978-3-642-03359-9\_6},
  DOIURL =       {https://doi.org/10.1007/978-3-642-03359-9\_6},
  timestamp =    {Tue, 14 May 2019 10:00:48 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/tphol/BoveDN09},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Backpack: retrofitting Haskell with interfaces}:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20next%20700%20syntactical%20models%20of%20type%20theory][The next 700 syntactical models of type theory:1]]

@inproceedings{agda_quantifier_elim,
  author =       {Jeremy Pope},
  title =        {Formalizing Constructive Quantifier Elimination in Agda},
  booktitle =    {Proceedings of the 7th Workshop on Mathematically Structured
                  Functional Programming, MSFP@FSCD 2018, Oxford, UK, 8th July
                  2018.},
  pages =        {2--17},
  year =         2018,
  crossref =     {DBLP:journals/corr/abs-1807-03732},
  url =          {https://doi.org/10.4204/EPTCS.275.2},
  doi =          {10.4204/EPTCS.275.2},
  timestamp =    {Mon, 10 Sep 2018 16:20:34 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/corr/abs-1807-04083},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The next 700 syntactical models of type theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Isabelle:%20The%20Next%20700%20Theorem%20Provers][Isabelle: The Next 700 Theorem Provers:1]]

@PhdThesis{agda_thesis,
  author =       {Ulf Norell},
  title =        {Towards a Practical Programming Language Based on Dependent
                  Type Theory},
  school =       {Department of Computer Science and Engineering, Chalmers
                  University of Technology},
  school =       {Dept.\null{} Comp.\null{} Sci.\null{} and Eng., Chalmers
                  Univ.\null{} of Technology},
  year =         2007,
  month =        SEP,
  DirectURL =    {http://www.cs.chalmers.se/~ulfn/papers/thesis.html},
  WKloc =        {doc/pap/BIB},
  note =         {See also
                  \href{http://wiki.portal.chalmers.se/agda/pmwiki.php}{\textsf{http://wiki.portal.chalmers.se/agda/pmwiki.php}}},
  abstract =     {Dependent type theories have a long history of being used for
                  theorem proving.  One aspect of type theory which makes it
                  very powerful as a proof language is that it mixes deduction
                  with computation.  This also makes type theory a good
                  candidate for programming --- the strength of the type system
                  allows properties of programs to be stated and established,
                  and the computational properties provide semantics for the
                  programs.  This thesis is concerned with bridging the gap
                  between the theoretical presentations of type theory and the
                  requirements on a practical programming language.  Although
                  there are many challenging research problems left to solve
                  before we have an industrial scale programming language based
                  on type theory, this thesis takes us a good step along the
                  way.  In functional programming languages pattern matching
                  provides a concise notation for defining functions.  In
                  dependent type theory, pattern matching becomes even more
                  powerful, in that inspecting the value of a particular term
                  can reveal information about the types and values of other
                  terms.  In this thesis we give a type checking algorithm for
                  definitions by pattern matching in type theory, supporting
                  overlapping patterns, and pattern matching on intermediate
                  results using the with rule.  Traditional presentations of
                  type theory suffers from rather verbose notation, cluttering
                  programs and proofs with, for instance, explicit type
                  information.  One solution to this problem is to allow terms
                  that can be inferred automatically to be omitted.  This is
                  usually implemented by inserting metavariables in place of the
                  omitted terms and using unification to solve these
                  metavariables during type checking.  We present a type
                  checking algorithm for a theory with metavariables and prove
                  its soundness independent of whether the metavariables are
                  solved or not.  In any programming language it is important to
                  be able to structure large programs into separate units or
                  modules and limit the interaction between these modules.  In
                  this thesis we present a simple, but powerful module system
                  for a dependently typed language.  The main focus of the
                  module system is to manage the name space of a program, and an
                  important characteristic is a clear separation between the
                  module system and the type checker, making it largely
                  independent of the underlying language.  As a side track, not
                  directly related to the use of type theory for programming, we
                  present a connection between type theory and a first-order
                  logic theorem prover.  This connection saves the user the
                  burden of proving simple, but tedious first-order theorems by
                  leaving them for the prover.  We use a transparent translation
                  to first-order logic which makes the proofs constructed by the
                  theorem prover human readable.  The soundness of the
                  connection is established by a general metatheorem.  Finally
                  we put our work into practise in the implementation of a
                  programming language, Agda, based on type theory.  As an
                  illustrating example we show how to program a simple certfied
                  prover for equations in a commutative monoid, which can be
                  used internally in Agda.  Much more impressive examples have
                  been done by others, showing that the ideas developed in this
                  thesis are viable in practise. },
}
%% Isabelle: The Next 700 Theorem Provers:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Next%20700%20Challenge%20Problems%20for%20Reasoning%20with%20HOAS][The Next 700 Challenge Problems for Reasoning with HOAS:1]]

@phdthesis{agda_trains,
  author =       {Karim Kanso},
  title =        {Agda as a platform for the development of verified railway
                  interlocking systems},
  school =       {Swansea University, {UK}},
  year =         2012,
  url =          {http://ethos.bl.uk/OrderDetails.do?uin=uk.bl.ethos.678306},
  timestamp =    {Fri, 19 Aug 2016 19:15:39 +0200},
  biburl =       {https://dblp.org/rec/bib/phd/ethos/Kanso12},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The Next 700 Challenge Problems for Reasoning with HOAS:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20next%20700%20programming%20libraries][The next 700 programming libraries:1]]

@inproceedings{agda_type_Safety,
  author =       {Christopher Schwaab and Jeremy G. Siek},
  title =        {Modular type-safety proofs in Agda},
  booktitle =    {Proceedings of the 7th Workshop on Programming languages meets
                  program verification, {PLPV} 2013, Rome, Italy, January 22,
                  2013},
  pages =        {3--12},
  year =         2013,
  crossref =     {DBLP:conf/plpv/2013},
  url =          {http://doi.acm.org/10.1145/2428116.2428120},
  doi =          {10.1145/2428116.2428120},
  timestamp =    {Thu, 15 Jun 2017 21:35:58 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/plpv/SchwaabS13},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The next 700 programming libraries:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20next%20700%20programming%20languages][The next 700 programming languages:1]]

@inproceedings{agda_web,
  author =       {Alan Jeffrey},
  title =        {Dependently Typed Web Client Applications - {FRP} in Agda in
                  {HTML5}},
  booktitle =    {Practical Aspects of Declarative Languages - 15th
                  International Symposium, {PADL} 2013, Rome, Italy, January
                  21-22, 2013. Proceedings},
  pages =        {228--243},
  year =         2013,
  crossref =     {DBLP:conf/padl/2013},
  url =          {https://doi.org/10.1007/978-3-642-45284-0\_16},
  doi =          {10.1007/978-3-642-45284-0\_16},
  timestamp =    {Tue, 18 Jul 2017 14:13:01 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/padl/Jeffrey13},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The next 700 programming languages:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20next%20700%20data%20description%20languages][The next 700 data description languages:1]]

@Article{ambiguous_parsing,
  author =       {Coen, Claudio Sacerdoti and Zacchiroli, Stefano},
  title =        {Efficient Ambiguous Parsing of Mathematical Formulae},
  year =         2004,
  pages =        {347–362},
  issn =         {1611-3349},
  doi =          {10.1007/978-3-540-27818-4_25},
  url =          {http://dx.doi.org/10.1007/978-3-540-27818-4_25},
  isbn =         9783540278184,
  journal =      {Mathematical Knowledge Management},
  publisher =    {Springer Berlin Heidelberg}
}
%% The next 700 data description languages:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Locales%20and%20Locale%20Expressions%20in%20Isabelle/Isar][Locales and Locale Expressions in Isabelle/Isar:1]]

@Article{arend:DBLP:journals/corr/abs-2004-14195,
  author =       {Valery Isaev},
  title =        {Models of Homotopy Type Theory with an Interval Type},
  year =         2020,
  volume =       {abs/2004.14195},
  eprint =       {2004.14195},
  url =          {https://arxiv.org/abs/2004.14195},
  journal =      {CoRR},
  archiveprefix ={arXiv},
  timestamp =    {Sun, 03 May 2020 17:39:04 +0200},
  biburl =       {https://dblp.org/rec/journals/corr/abs-2004-14195.bib},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Locales and Locale Expressions in Isabelle/Isar:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*All%20about%20maude][All about maude:1]]

@inproceedings{ats_combining,
  author =       {Chiyan Chen and Hongwei Xi},
  title =        {Combining programming with theorem proving},
  booktitle =    {Proceedings of the 10th {ACM} {SIGPLAN} International
                  Conference on Functional Programming, {ICFP} 2005, Tallinn,
                  Estonia, September 26-28, 2005},
  pages =        {66--77},
  year =         2005,
  crossref =     {DBLP:conf/icfp/2005},
  url =          {http://doi.acm.org/10.1145/1086365.1086375},
  doi =          {10.1145/1086365.1086375},
  timestamp =    {Mon, 13 Feb 2006 15:41:18 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/icfp/ChenX05},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% All about maude:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Beluga:%20Programming%20with%20Dependent%20Types,%20Contextual%20Data,%20and%20Contexts][Beluga: Programming with Dependent Types, Contextual                  Data, and Contexts:1]]

@book{backhouse_program_construction,
  author =       {Roland Carl Backhouse},
  title =        {Program Construction: Calculating Implementations from
                  Specifications},
  publisher =    {John Wiley {\&} Sons},
  year =         2004,
  isbn =         {978-0-47-084882-1},
}
%% Beluga: Programming with Dependent Types, Contextual                  Data, and Contexts:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Canonical%20Structures%20for%20the%20working%20Coq%20user][Canonical Structures for the working Coq user:1]]

@InProceedings{beluga,
  author =       {Brigitte Pientka},
  title =        {Beluga: Programming with Dependent Types, Contextual Data, and
                  Contexts},
  year =         2010,
  booktitle =    {Functional and Logic Programming, 10th International
                  Symposium, {FLOPS} 2010, Sendai, Japan, April 19-21,
                  2010. Proceedings},
  pages =        {1-12},
  doi =          {10.1007/978-3-642-12251-4\_1},
  url =          {https://doi.org/10.1007/978-3-642-12251-4\_1},
  timestamp =    {Sun, 21 May 2017 00:19:14 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/flops/Pientka10},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Canonical Structures for the working Coq user:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*How%20to%20make%20ad%20hoc%20proof%20automation%20less%20ad%20hoc][How to make ad hoc proof automation less ad hoc:1]]

@book{bornat_programming,
  author =       {Bornat, Richard},
  title =        {Programming from First Principles},
  year =         1987,
  isbn =         {0-13-729104-3},
  publisher =    {Prentice Hall International (UK) Ltd.},
  address =      {Hertfordshire, UK, UK},
}
%% How to make ad hoc proof automation less ad hoc:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Mizar%20Course%20in%20Logic%20and%20Set%20Theory][Mizar Course in Logic and Set Theory:1]]

@Article{casl_overview,
  author =       {Egidio Astesiano and Michel Bidoit and H{\'{e}}l{\`{e}}ne
                  Kirchner and Bernd Krieg{-}Br{\"{u}}ckner and Peter D. Mosses
                  and Donald Sannella and Andrzej Tarlecki},
  title =        {{CASL:} the Common Algebraic Specification Language},
  year =         2002,
  volume =       286,
  number =       2,
  pages =        {153-196},
  doi =          {10.1016/S0304-3975(01)00368-1},
  url =          {https://doi.org/10.1016/S0304-3975(01)00368-1},
  journal =      {Theor. Comput. Sci.},
  timestamp =    {Wed, 14 Nov 2018 10:33:31 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/tcs/AstesianoBKKMST02},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Mizar Course in Logic and Set Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Mizar%20in%20a%20Nutshell][Mizar in a Nutshell:1]]

@book{casl_ref,
  author =       {Peter D. Mosses},
  title =        {{CASL} Reference Manual, The Complete Documentation of the
                  Common Algebraic Specification Language},
  series =       {Lecture Notes in Computer Science},
  volume =       2960,
  publisher =    {Springer},
  year =         2004,
  url =          {https://doi.org/10.1007/b96103},
  doi =          {10.1007/b96103},
  isbn =         {3-540-21301-5},
  timestamp =    {Mon, 29 May 2017 13:41:08 +0200},
  biburl =       {https://dblp.org/rec/bib/books/sp/Mosses04},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Mizar in a Nutshell:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Theory%20Interpretation%20in%20Simple%20Type%20Theory][Theory Interpretation in Simple Type Theory:1]]

@Book{casl_reference_manual,
  author =       {Peter D. Mosses},
  title =        {{CASL} Reference Manual, The Complete Documentation of the
                  Common Algebraic Specification Language},
  year =         2004,
  volume =       2960,
  series =       {Lecture Notes in Computer Science},
  publisher =    {Springer},
  isbn =         {3-540-21301-5},
  doi =          {10.1007/b96103},
  url =          {https://doi.org/10.1007/b96103},
  timestamp =    {Wed, 14 Nov 2018 10:12:23 +0100},
  biburl =       {https://dblp.org/rec/bib/books/sp/Mosses04},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Theory Interpretation in Simple Type Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Dependent%20Types%20Ensure%20Partial%20Correctness%20of%20Theorem%20Provers][Dependent Types Ensure Partial Correctness of Theorem Provers:1]]

@book{casl_user,
  author =       {Michel Bidoit and Peter D. Mosses},
  title =        {Casl User Manual - Introduction to Using the Common Algebraic
                  Specification Language},
  series =       {Lecture Notes in Computer Science},
  volume =       2900,
  publisher =    {Springer},
  year =         2004,
  url =          {https://doi.org/10.1007/b11968},
  doi =          {10.1007/b11968},
  isbn =         {3-540-20766-X},
  timestamp =    {Mon, 29 May 2017 13:41:08 +0200},
  biburl =       {https://dblp.org/rec/bib/books/sp/BidoitM04},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Dependent Types Ensure Partial Correctness of Theorem Provers:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*{IDRIS}%20---%20Systems%20Programming%20Meets%20Full%20Dependent%20Types][{IDRIS} --- Systems Programming Meets Full Dependent Types:1]]

@Book{casl_user_manual,
  author =       {Michel Bidoit and Peter D. Mosses},
  title =        {Casl User Manual - Introduction to Using the Common Algebraic
                  Specification Language},
  year =         2004,
  volume =       2900,
  series =       {Lecture Notes in Computer Science},
  publisher =    {Springer},
  isbn =         {3-540-20766-X},
  doi =          {10.1007/b11968},
  url =          {https://doi.org/10.1007/b11968},
  timestamp =    {Wed, 14 Nov 2018 10:12:23 +0100},
  biburl =       {https://dblp.org/rec/bib/books/sp/BidoitM04},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% {IDRIS} --- Systems Programming Meets Full Dependent Types:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20{Coq}%20Reference%20Manual,%20version%208.4/8.8][The {Coq} Reference Manual, version 8.4/8.8:1]]

@inbook{cats_fokkinga,
  author =       {Fokkinga, Maarten},
  title =        {{A Gentle Introduction to Category Theory --- the
                  calculational approach}},
  crossref =     {db-utwente:book:0000003535},
  pages =        {1--72}
}
%% The {Coq} Reference Manual, version 8.4/8.8:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Experience%20Implementing%20a%20Performant%20Category-Theory%20Library%20in%20{C}oq][Experience Implementing a Performant Category-Theory Library in {C}oq:1]]
@Online{coq_cat_experiences,
  author       = {Jason Gross AND Adam Chlipala AND David I. Spivak},
  title        = {{Experience Implementing a Performant
          Category-Theory Library in Coq}},
  year         = 2014,
  archiveprefix= {arXiv},
  eprint       = {1401.7694v2},
  primaryclass = {math.CT}
}
%% Experience Implementing a Performant Category-Theory Library in {C}oq:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Certified%20Functional%20Programming%20---%20Program%20Extraction%20within%20{Coq}%20Proof%20Assistant][Certified Functional Programming --- Program Extraction within {Coq} Proof Assistant:1]]

@book{cats_for_cs,
  author =       {Michael Barr and Charles Wells},
  title =        {Category theory for computing science {(2.} ed.)},
  series =       {Prentice Hall international series in computer science},
  publisher =    {Prentice Hall},
  year =         1995,
  isbn =         {978-0-13-323809-9},
  timestamp =    {Wed, 27 Apr 2011 17:30:30 +0200},
  biburl =       {https://dblp.org/rec/bib/books/daglib/0080381},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Certified Functional Programming --- Program Extraction within {Coq} Proof Assistant:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Calculus%20of%20Inductive%20Definitions%20and%20its%20Implementation:%20the%20Coq%20Proof%20Assistant][The Calculus of Inductive Definitions and its Implementation: the Coq Proof Assistant:1]]

@InProceedings{classic_haskell_genericity,
  author =       {Tim Sheard},
  title =        {Generic Unification via Two-Level Types and Parameterized
                  Modules},
  booktitle =    {ICFP 2001},
  publisher =    {acm press},
  note =         {to appear},
}
%% The Calculus of Inductive Definitions and its Implementation: the Coq Proof Assistant:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Program%20Calculation%20in%20Coq][Program Calculation in Coq:1]]

@book{clean_code,
  author =       {Robert C. Martin},
  title =        {Clean Code - a Handbook of Agile Software Craftsmanship},
  publisher =    {Prentice Hall},
  year =         2009,
  url =
                  {http://vig.pearsoned.com/store/product/1,1207,store-12521\_isbn-0132350882,00.html},
  isbn =         {978-0-13-235088-4},
}
%% Program Calculation in Coq:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Brief%20Overview%20of%20Agda%20---%20A%20Functional%20Language%20with%20Dependent%20Types][A Brief Overview of Agda --- A Functional Language with Dependent Types:1]]

@InProceedings{compcert_paper,
  author =       {Robbert Krebbers and Xavier Leroy and Freek Wiedijk},
  title =        {Formal {C} Semantics: CompCert and the {C} Standard},
  year =         2014,
  booktitle =    {Interactive Theorem Proving - 5th International Conference,
                  {ITP} 2014, Held as Part of the Vienna Summer of Logic, {VSL}
                  2014, Vienna, Austria, July 14-17, 2014. Proceedings},
  pages =        {543-548},
  doi =          {10.1007/978-3-319-08970-6\_36},
  url =          {https://doi.org/10.1007/978-3-319-08970-6\_36},
  timestamp =    {Sun, 21 May 2017 00:18:59 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/itp/KrebbersLW14},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Brief Overview of Agda --- A Functional Language with Dependent Types:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Towards%20a%20Practical%20Programming%20Language%20Based%20on%20Dependent%20Type%20Theory][Towards a Practical Programming Language Based on Dependent Type Theory:1]]

@Article{coq_canonical,
  author =       {Georges Gonthier and Beta Ziliani and Aleksandar Nanevski and
                  Derek Dreyer},
  title =        {How to make ad hoc proof automation less ad hoc},
  year =         2013,
  volume =       23,
  number =       4,
  pages =        {357-401},
  doi =          {10.1017/S0956796813000051},
  url =          {https://doi.org/10.1017/S0956796813000051},
  journal =      {J. Funct. Program.},
  timestamp =    {Sat, 27 May 2017 14:24:34 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jfp/GonthierZND13},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Towards a Practical Programming Language Based on Dependent Type Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Working%20with%20Mathematical%20Structures%20in%20Type%20Theory][Working with Mathematical Structures in Type Theory:1]]

@InProceedings{coq_canonical_tutorial,
  author =       {Mahboubi, Assia and Tassi, Enrico},
  title =        {{Canonical Structures for the working Coq user}},
  year =         2013,
  booktitle =    {{ITP 2013, 4th Conference on Interactive Theorem Proving}},
  editor =       {Sandrine Blazy and Christine Paulin and David Pichardie},
  volume =       7998,
  series =       {LNCS},
  publisher =    {{Springer}},
  month =        Jul,
  pages =        {19-34},
  doi =          {10.1007/978-3-642-39634-2\_5},
  url =          {https://hal.inria.fr/hal-00816703},
  address =      {Rennes, France},
  pdf =          {https://hal.inria.fr/hal-00816703/file/main.pdf},
  hal_id =       {hal-00816703},
  hal_version =  {v2}
}
%% Working with Mathematical Structures in Type Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Zipper][The Zipper:1]]

@article{coq_coc,
  author =       {Thierry Coquand and G{\'{e}}rard P. Huet},
  title =        {The Calculus of Constructions},
  journal =      {Inf. Comput.},
  volume =       76,
  number =       {2/3},
  pages =        {95--120},
  year =         1988,
  url =          {https://doi.org/10.1016/0890-5401(88)90005-3},
  doi =          {10.1016/0890-5401(88)90005-3},
  timestamp =    {Thu, 18 May 2017 09:54:18 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/iandc/CoquandH88},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The Zipper:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Reason%20Isomorphically!][Reason Isomorphically!:1]]

@inproceedings{coq_feit,
  author =       {Georges Gonthier and Andrea Asperti and Jeremy Avigad and Yves
                  Bertot and Cyril Cohen and Fran{\c{c}}ois Garillot and
                  St{\'{e}}phane Le Roux and Assia Mahboubi and Russell O'Connor
                  and Sidi Ould Biha and Ioana Pasca and Laurence Rideau and
                  Alexey Solovyev and Enrico Tassi and Laurent Th{\'{e}}ry},
  title =        {A Machine-Checked Proof of the Odd Order Theorem},
  booktitle =    {Interactive Theorem Proving - 4th International Conference,
                  {ITP} 2013, Rennes, France, July 22-26, 2013. Proceedings},
  pages =        {163--179},
  year =         2013,
  crossref =     {DBLP:conf/itp/2013},
  url =          {https://doi.org/10.1007/978-3-642-39634-2\_14},
  doi =          {10.1007/978-3-642-39634-2\_14},
  timestamp =    {Thu, 15 Jun 2017 21:38:54 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/itp/GonthierAABCGRMOBPRSTT13},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Reason Isomorphically!:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Little%20Theories][Little Theories:1]]

@InProceedings{coq_implementation,
  author =       {Christine Paulin-Mohring},
  title =        {The Calculus of Inductive Definitions and its Implementation:
                  the Coq Proof Assistant},
  crossref =     {LPAR94},
  note =         {invited tutorial},
  authorsAddress ={LIP/ENS Lyon cpaulin\@lip.ens-lyon.fr},
  abstract =     {Type Theory serves as a basis for several environments
                  dedicated to the formalization of reasoning. We shall present
                  the theory and practice of one of them: the Coq Proof
                  Assistant.  This environment is based on a typed
                  lambda-calculus called the Calculus of Inductive
                  Definitions. It is a powerful language which extends the
                  Calculus of Constructions, introduced by Coquand and Huet,
                  with a mechanism for general inductive definitions in the
                  spirit of Martin-Lof's Intuitionistic Type Theory.  The Coq
                  proof assistant can be decomposed into three parts.
                  \begin{itemize} \item A specification language which combines
                  higher-order logic, functional programming and inductive
                  definitions of relations.  \item A tactic language which
                  provides several tools for the interactive development of
                  proofs of formulas.  \item An environment for manipulating
                  proof-terms built by the system, especially for extracting ML
                  programs out of constructive proofs of specifications.
                  \end{itemize}},
}
%% Little Theories:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20MathScheme%20Library:%20Some%20Preliminary%20Experiments][The MathScheme Library: Some Preliminary Experiments:1]]
@Online{mathscheme,
  author       = {Jacques Carette AND William M. Farmer AND Filip
                  Jeremic AND Vincent Maccio AND Russell O'Connor AND
                  Quang M. Tran},
  title        = {{The MathScheme Library: Some Preliminary
                  Experiments}},
  year         = 2011,
  archiveprefix= {arXiv},
  eprint       = {1106.1862v1},
  primaryclass = {cs.MS}
}
%% The MathScheme Library: Some Preliminary Experiments:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Agda%20Wiki][Agda Wiki:1]]
@online{agda_wiki,
  author = {The {Agda Team}},
  title = {Agda Wiki},
  year = 2018,
  url = {http://wiki.portal.chalmers.se/agda/pmwiki.php},
  urldate = {2018-10-12}
}
%% Agda Wiki:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Constructive%20Mathematics%20and%20Computer%20Programming][Constructive Mathematics and Computer Programming:1]]

@inproceedings{coq_implementing_modules,
  author =       {Jacek Chrzaszcz},
  title =        {Implementing Modules in the Coq System},
  booktitle =    {Theorem Proving in Higher Order Logics, 16th International
                  Conference, TPHOLs 2003, Rom, Italy, September 8-12, 2003,
                  Proceedings},
  pages =        {270--286},
  year =         2003,
  crossref =     {DBLP:conf/tphol/2003},
  url =          {https://doi.org/10.1007/10930755\_18},
  doi =          {10.1007/10930755\_18},
  timestamp =    {Mon, 29 May 2017 16:53:44 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/tphol/Chrzaszcz03},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Constructive Mathematics and Computer Programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Intuitionistic%20type%20theory][Intuitionistic type theory:1]]

@inproceedings{coq_inductive_coc,
  author =       {Frank Pfenning and Christine Paulin{-}Mohring},
  title =        {Inductively Defined Types in the Calculus of Constructions},
  booktitle =    {Mathematical Foundations of Programming Semantics, 5th
                  International Conference, Tulane University, New Orleans,
                  Louisiana, USA, March 29 - April 1, 1989, Proceedings},
  pages =        {209--228},
  year =         1989,
  crossref =     {DBLP:conf/mfps/1989},
  url =          {https://doi.org/10.1007/BFb0040259},
  doi =          {10.1007/BFb0040259},
  timestamp =    {Fri, 19 May 2017 13:10:47 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/mfps/PfenningP89},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Intuitionistic type theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Programming%20in%20Martin-Lo\&Uml;F's%20Type%20Theory:%20An%20Introduction][Programming in Martin-Lo\&Uml;F's Type Theory: An Introduction:1]]

@Misc{coq_manual,
  author =       {The {Coq Development Team}},
  title =        {{The Coq Proof Assistant, version 8.8.0}},
  year =         2018,
  month =        Apr,
  doi =          {10.5281/zenodo.1219885},
  url =          {https://hal.inria.fr/hal-01954564},
  hal_id =       {hal-01954564},
  hal_version =  {v1},
}
%% Programming in Martin-Lo\&Uml;F's Type Theory: An Introduction:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Coq%20Website][Coq Website:1]]
@online{coq_website,
  author = {The {Coq Team}},
  title = {The Coq Proof Assistant},
  year = 2018,
  url = {https://coq.inria.fr/},
  urldate = {2018-10-12}
}
%% Coq Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Inductively%20Defined%20Types%20in%20the%20Calculus%20of%20Constructions][Inductively Defined Types in the Calculus of Constructions:1]]

@InProceedings{coq_program_calculation,
  author =       {Tesson, Julien and Hashimoto, Hideki and Hu, Zhenjiang and
                  Loulergue, Frédéric and Takeichi, Masato},
  affiliation =  {LIFO, Université d’Orléans, France},
  title =        {Program Calculation in Coq},
  crossref =     {AMAST2010},
  pages =        {163-179},
  DOIURL =       {http://dx.doi.org/10.1007/978-3-642-17796-5_10},
  DOI =          {10.1007/978-3-642-17796-5_10},
  abstract =     {Program calculation, being a programming technique that
                  derives programs from specification by means of formula
                  manipulation, is a challenging activity. It requires human
                  insights and creativity, and needs systems to help human to
                  focus on clever parts of the derivation by automating tedious
                  ones and verifying correctness of transformations. Different
                  from many existing systems, we show in this paper that Coq, a
                  popular theorem prover, provides a cheap way to implement a
                  powerful system to support program calculation, which has not
                  been recognized so far. We design and implement a set of
                  tactics for the Coq proof assistant to help the user to derive
                  programs by program calculation and to write proofs in
                  calculational form. The use of these tactics is demonstrated
                  through program calculations in Coq based on the theory of
                  lists.},
}
%% Inductively Defined Types in the Calculus of Constructions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Calculus%20of%20Constructions][The Calculus of Constructions:1]]

@PhdThesis{coq_program_extraction,
  author =       {Pierre Letouzey},
  title =        {Certified Functional Programming --- Program Extraction within
                  {Coq} Proof Assistant},
  school =       {Universit\'e Paris 7 Denis Diderot},
  year =         2004,
  address =      {Jussieu},
  month =        JUL,
  URL =
                  {http://www.pps.jussieu.fr/~letouzey/download/these_letouzey_English.ps.gz},
}
%% The Calculus of Constructions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Lean%20Website][Lean Website:1]]
@online{lean_website,
  author = {The {Lean Team}},
  title = {Lean Theorem Prover},
  year = 2018,
  url = {http://leanprover.github.io/},
  urldate = {2018-10-12}
}
%% Lean Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Lean%20Theorem%20Prover%20(System%20Description)][The Lean Theorem Prover (System Description):1]]

@inproceedings{curry_howard,
  author =       {Ana Bove and Peter Dybjer},
  title =        {Dependent Types at Work},
  booktitle =    {Language Engineering and Rigorous Software Development,
                  International LerNet {ALFA} Summer School 2008, Piriapolis,
                  Uruguay, February 24 - March 1, 2008, Revised Tutorial
                  Lectures},
  pages =        {57--99},
  year =         2008,
  crossref =     {DBLP:conf/lernet/2008},
  url =          {https://doi.org/10.1007/978-3-642-03153-3\_2},
  doi =          {10.1007/978-3-642-03153-3\_2},
  timestamp =    {Sun, 04 Jun 2017 10:11:20 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/lernet/BoveD08},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The Lean Theorem Prover (System Description):1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Formalizing%20Mathematics%20using%20the%20Lean%20Theorem%20Prover][Formalizing Mathematics using the Lean Theorem Prover:1]]

@book{db-utwente:book:0000003535,
  author =       {Fokkinga, Maarten and Jeuring, Johan},
  title =        {{Lecture Notes of the STOP 1992 Summerschool on Constructive
                  Algorithmics}},
  booktitle =    {{Lecture Notes of the STOP 1992 Summerschool on Constructive
                  Algorithmics}},
  month =        sep,
  year =         1992,
  volume =       {Part I},
  publisher =    {University of Utrecht},
  address =      {Utrecht, Netherlands}
}
%% Formalizing Mathematics using the Lean Theorem Prover:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Type%20classes%20for%20mathematics%20in%20type%20theory][Type classes for mathematics in type theory:1]]

@phdthesis{dependent_matching_is_just_K,
  author =       {Conor McBride},
  title =        {Dependently typed functional programs and their proofs},
  school =       {University of Edinburgh, {UK}},
  year =         2000,
  url =          {http://hdl.handle.net/1842/374},
  timestamp =    {Mon, 26 Sep 2016 17:14:49 +0200},
  biburl =       {https://dblp.org/rec/bib/phd/ethos/McBride00},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Type classes for mathematics in type theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Theories%20as%20Types][Theories as Types:1]]

@InProceedings{deriving_via,
  author =       {Baldur Bl{\"{o}}ndal and Andres L{\"{o}}h and Ryan Scott},
  title =        {Deriving via: or, how to turn hand-written instances into an
                  anti-pattern},
  year =         2018,
  booktitle =    {Proceedings of the 11th {ACM} {SIGPLAN} International
                  Symposium on Haskell, Haskell@ICFP 2018, St. Louis, MO, USA,
                  September 27-17, 2018},
  pages =        {55-67},
  doi =          {10.1145/3242744.3242746},
  url =          {https://doi.org/10.1145/3242744.3242746},
  timestamp =    {Tue, 11 Dec 2018 19:30:58 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/haskell/BlondalLS18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Theories as Types:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20calculus%20of%20open%20modules:%20call-by-need%20strategy%20and%20confluence][A calculus of open modules: call-by-need strategy and confluence:1]]

@book{design_patterns_head_first,
  author =       {Eric Freeman and Elisabeth Robson},
  title =        {Head first design patterns - your brain on design patterns},
  publisher =    {O'Reilly},
  year =         2014,
  url =          {http://www.oreilly.de/catalog/hfdesignpat/index.html},
  isbn =         {978-0-596-00712-6},
  timestamp =    {Thu, 14 Apr 2011 14:43:21 +0200},
  biburl =       {https://dblp.org/rec/bib/books/daglib/0011977},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A calculus of open modules: call-by-need strategy and confluence:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Theory%20of%20Mixin%20Modules:%20Algebraic%20Laws%20and%20Reduction%20Semantics][A Theory of Mixin Modules: Algebraic Laws and Reduction Semantics:1]]

@article{dtl_cat_correspondences,
  author =       {Maria Emilia Maietti},
  title =        {Modular correspondence between dependent type theories and
                  categories including pretopoi and topoi},
  journal =      {Mathematical Structures in Computer Science},
  volume =       15,
  number =       6,
  pages =        {1089--1149},
  year =         2005,
  url =          {https://doi.org/10.1017/S0960129505004962},
  doi =          {10.1017/S0960129505004962},
  timestamp =    {Sun, 28 May 2017 13:25:37 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/mscs/Maietti05},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Theory of Mixin Modules: Algebraic Laws and Reduction Semantics:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Cateogry-Theoretic%20Account%20of%20Program%20Modules][A Cateogry-Theoretic Account of Program Modules:1]]

@misc{dtl_cat_models,
  author =       {Alexandre Buisse},
  title =        {Categorical Models of Dependent Type Theory},
  school =       {Chalmers University of Technology},
  year =         2006,
  url =
                  {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.8051&rep=rep1&type=pdf},
}
%% A Cateogry-Theoretic Account of Program Modules:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*An%20Agda%20Formalization%20Asynchronous%20Fixed-Point%20Theory][An Agda Formalization Asynchronous Fixed-Point Theory:1]]

@inproceedings{dtl_imperative,
  author =       {Aleksandar Nanevski and Greg Morrisett and Avraham Shinnar and
                  Paul Govereau and Lars Birkedal},
  title =        {Ynot: dependent types for imperative programs},
  booktitle =    {Proceeding of the 13th {ACM} {SIGPLAN} international
                  conference on Functional programming, {ICFP} 2008, Victoria,
                  BC, Canada, September 20-28, 2008},
  pages =        {229--240},
  year =         2008,
  crossref =     {DBLP:conf/icfp/2008},
  url =          {http://doi.acm.org/10.1145/1411204.1411237},
  doi =          {10.1145/1411204.1411237},
  timestamp =    {Fri, 23 Jan 2009 12:54:21 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/icfp/NanevskiMSGB08},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% An Agda Formalization Asynchronous Fixed-Point Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Formalizing%20Constructive%20Quantifier%20Elimination%20in%20Agda][Formalizing Constructive Quantifier Elimination in Agda:1]]

@phdthesis{dtl_implementation_practical,
  author =       {Edwin Brady},
  title =        {Practical implementation of a dependently typed functional
                  programming language},
  school =       {Durham University, {UK}},
  year =         2005,
  url =          {http://etheses.dur.ac.uk/2800/},
  timestamp =    {Tue, 06 Sep 2016 10:13:42 +0200},
  biburl =       {https://dblp.org/rec/bib/phd/ethos/Brady05},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Formalizing Constructive Quantifier Elimination in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Modelling%20Bitcoin%20in%20Agda][Modelling Bitcoin in Agda:1]]

@MastersThesis{dtl_implementation_simple,
  author =       {Michael Blaguszewski},
  title =        {Implementing and Optimizing a Simple, Dependently-Typed
                  Language},
  school =       {Chalmers University of Technology},
  year =         2010,
  url =
                  {http://publications.lib.chalmers.se/records/fulltext/124826.pdf},
}
%% Modelling Bitcoin in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Proving%20Non-Deterministic%20Computations%20in%20Agda][Proving Non-Deterministic Computations in Agda:1]]

@article{dtl_implementation_tutorial,
  author =       {Andres L{\"{o}}h and Conor McBride and Wouter Swierstra},
  title =        {A Tutorial Implementation of a Dependently Typed Lambda
                  Calculus},
  journal =      {Fundam. Inform.},
  volume =       102,
  number =       2,
  pages =        {177--207},
  year =         2010,
  url =          {https://doi.org/10.3233/FI-2010-304},
  doi =          {10.3233/FI-2010-304},
  timestamp =    {Sat, 20 May 2017 00:23:04 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/fuin/LohMS10},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Proving Non-Deterministic Computations in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Pi-Ware:%20Hardware%20Description%20and%20Verification%20in%20Agda][Pi-Ware: Hardware Description and Verification in Agda:1]]

@inproceedings{dtl_index_erasure,
  author =       {Edwin Brady and Conor McBride and James McKinna},
  title =        {Inductive Families Need Not Store Their Indices},
  booktitle =    {Types for Proofs and Programs, International Workshop, {TYPES}
                  2003, Torino, Italy, April 30 - May 4, 2003, Revised Selected
                  Papers},
  pages =        {115--129},
  year =         2003,
  crossref =     {DBLP:conf/types/2003},
  url =          {https://doi.org/10.1007/978-3-540-24849-1\_8},
  doi =          {10.1007/978-3-540-24849-1\_8},
  timestamp =    {Thu, 15 Jun 2017 21:39:32 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/types/BradyMM03},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Pi-Ware: Hardware Description and Verification in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Painless%20DTP:%20Fully%20Certified%20Merge%20Sort%20in%20Agda][Painless DTP: Fully Certified Merge Sort in Agda:1]]

@InProceedings{dtl_interpretations,
  author =       "Lipton, James",
  editor =       "Myers, J. Paul and O'Donnell, Michael J.",
  title =        "Kripke semantics for dependent type theory and realizability
                  interpretations",
  booktitle =    "Constructivity in Computer Science",
  year =         1992,
  publisher =    "Springer Berlin Heidelberg",
  address =      "Berlin, Heidelberg",
  pages =        "22--32",
  abstract =     "Constructive reasoning has played an increasingly important
                  role in the development of provably correct software. Both
                  typed and type-free frameworks stemming from ideas of Heyting,
                  Kleene, and Curry have been developed for extracting
                  computations from constructive specifications. These include
                  Realizability, and Theories based on the Curry-Howard
                  isomorphism. Realizability --- in its various typed and
                  type-free formulations --- brings out the algorithmic content
                  of theories and proofs and supplies models of the ``recursive
                  universe''. Formal systems based on the propositions-as-types
                  paradigm, such as Martin-L{\"o}f's dependent type theories,
                  incorporate term extraction into the logic itself.",
  isbn =         "978-3-540-47265-0"
}
%% Painless DTP: Fully Certified Merge Sort in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Dependently%20Typed%20Web%20Client%20Applications%20-%20{FRP}%20in%20Agda%20in%20{HTML5}}][Dependently Typed Web Client Applications - {FRP} in Agda in {HTML5}}:1]]

@article{dtl_practical_erasure,
  author =       {Matus Tejiscak and Edwin Brady},
  title =        {Practical Erasure in Dependently Typed Languages},
  journal =      {Unpublished Draft},
  publisher =    {University of St Andrews},
  url =
                  {https://eb.host.cs.st-andrews.ac.uk/drafts/dtp-erasure-draft.pdf},
  urldate =      {2018-10-19},
  abstract =     {Full-spectrum dependently typed languages and tools, such as
                  Idris and Agda, have recently been gaining interest due to the
                  expressive power of their type systems, in particular their
                  ability to describe precise properties of programs which can
                  be verified by type checking.  With full-spectrum dependent
                  types, we can treat types as firstclass language constructs:
                  types can be parameterised on values, and types can be
                  computed like any other value. However, this power brings new
                  challenges when compiling to executable code.  Without special
                  treatment, values which exist only for compile-time checking
                  may leak into compiled code, even in relatively simple
                  cases. Previous attempts to tackle the problem are
                  unsatisfying in that they either fail to erase all irrelevant
                  information, require user annotation or in some other way
                  restrict the expressive power of the language.  In this paper,
                  we present a new erasure mechanism based on whole-program
                  analysis, currently implemented in the Idris programming
                  language. We give some simple examples of dependently typed
                  functional programs with compile-time guarantees of their
                  properties, but for which existing erasure techniques fall
                  short. We then describe our new analysis method and show that
                  with it, erasure can lead to asymptotically faster code thanks
                  to the ability to erase not only proofs but also indices.},
}
%% Dependently Typed Web Client Applications - {FRP} in Agda in {HTML5}}:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Modular%20type-safety%20proofs%20in%20Agda][Modular type-safety proofs in Agda:1]]

@InProceedings{dtls_give_modules,
  author =       {David B. MacQueen},
  title =        {Using Dependent Types to Express Modular Structure},
  year =         1986,
  booktitle =    {Conference Record of the Thirteenth Annual {ACM} Symposium on
                  Principles of Programming Languages, St. Petersburg Beach,
                  Florida, USA, January 1986},
  pages =        {277-286},
  doi =          {10.1145/512644.512670},
  url =          {https://doi.org/10.1145/512644.512670},
  timestamp =    {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/popl/MacQueen86},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Modular type-safety proofs in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Agda%20as%20a%20platform%20for%20the%20development%20of%20verified%20railway%20interlocking%20systems][Agda as a platform for the development of verified railway interlocking systems:1]]

@inproceedings{eliminating_dependent_matching,
  author =       {Healfdene Goguen and Conor McBride and James McKinna},
  title =        {Eliminating Dependent Pattern Matching},
  booktitle =    {Algebra, Meaning, and Computation, Essays Dedicated to Joseph
                  A. Goguen on the Occasion of His 65th Birthday},
  pages =        {521--540},
  year =         2006,
  crossref =     {DBLP:conf/birthday/2006goguen},
  url =          {https://doi.org/10.1007/11780274\_27},
  doi =          {10.1007/11780274\_27},
  timestamp =    {Fri, 02 Jun 2017 13:01:06 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/birthday/GoguenMM06},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Agda as a platform for the development of verified railway interlocking systems:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Algebra%20of%20programming%20in%20Agda:%20Dependent%20types%20for%20relational%20program%20derivation][Algebra of programming in Agda: Dependent types for relational program derivation:1]]

@inproceedings{elimination_with_motive,
  author =       {Conor McBride},
  title =        {Elimination with a Motive},
  booktitle =    {Types for Proofs and Programs, International Workshop, {TYPES}
                  2000, Durham, UK, December 8-12, 2000, Selected Papers},
  pages =        {197--216},
  year =         2000,
  crossref =     {DBLP:conf/types/2000},
  url =          {https://doi.org/10.1007/3-540-45842-5\_13},
  doi =          {10.1007/3-540-45842-5\_13},
  timestamp =    {Fri, 26 May 2017 14:09:14 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/types/McBride00},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Algebra of programming in Agda: Dependent types for relational program derivation:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Proof-Theoretic%20Approach%20to%20Tactics][A Proof-Theoretic Approach to Tactics:1]]

@inproceedings{erasure_type_systems,
  author =       {Nathan Mishra{-}Linger and Tim Sheard},
  title =        {Erasure and Polymorphism in Pure Type Systems},
  booktitle =    {Foundations of Software Science and Computational Structures,
                  11th International Conference, {FOSSACS} 2008, Held as Part of
                  the Joint European Conferences on Theory and Practice of
                  Software, {ETAPS} 2008, Budapest, Hungary, March 29 - April 6,
                  2008. Proceedings},
  pages =        {350--364},
  year =         2008,
  crossref =     {DBLP:conf/fossacs/2008},
  url =          {https://doi.org/10.1007/978-3-540-78499-9\_25},
  doi =          {10.1007/978-3-540-78499-9\_25},
  timestamp =    {Tue, 26 Jun 2018 14:10:47 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/fossacs/Mishra-LingerS08},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Proof-Theoretic Approach to Tactics:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Programming%20Language%20Foundations%20in%20Agda][Programming Language Foundations in Agda:1]]
@online{agda_plf,
  title = {Programming Language Foundations in Agda},
  author    = {Philip Wadler and
           Wen Kokke},
  year = 2018,
  url = {https://plfa.github.io/},
  urldate = {2018-10-12}
}
%% Programming Language Foundations in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Teaching%20Agda][Teaching Agda:1]]
@online{agda_teaching,
  title = {Teaching Agda},
  author    = {Anton Setzer},
  year = 2018,
  url = {http://www.cse.chalmers.se/research/group/logic/AIM/AIM6/SetzerTeachingAgda.pdf},
  urldate = {2018-10-12}
}
%% Teaching Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Verified%20Functional%20Programming%20in%20Agda][Verified Functional Programming in Agda:1]]

@book{ewd_discipline,
  author =       {Edsger W. Dijkstra},
  title =        {A Discipline of Programming},
  publisher =    {Prentice-Hall},
  year =         1976,
  url =          {http://www.worldcat.org/oclc/01958445},
  isbn =         {013215871X},
  timestamp =    {Wed, 26 Apr 2017 17:48:52 +0200},
  biburl =       {https://dblp.org/rec/bib/books/ph/Dijkstra76},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Verified Functional Programming in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Agda's%20Documentation][Agda's Documentation:1]]
@online{agda_docs,
  author = {The {Agda Team}},
  title = {Agda's Documentation},
  year = 2018,
  url = {https://agda.readthedocs.io/en/v2.5.4.1/index.html},
  urldate = {2018-10-12}
}
%% Agda's Documentation:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Relation-Algebraic%20Theories%20in%20Agda][Relation-Algebraic Theories in Agda:1]]
@online{RATH,
  title = {Relation-Algebraic Theories in Agda},
  author  = {Wolfram Kahl},
  year = 2018,
  url = {http://relmics.mcmaster.ca/RATH-Agda/},
  urldate = {2018-10-12}
}



%% Relation-Algebraic Theories in Agda:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*CASL%20Reference%20Manual][CASL Reference Manual:1]]

@phdthesis{extended_cic,
  author =       {Zhaohui Luo},
  title =        {An extended calculus of constructions},
  school =       {University of Edinburgh, {UK}},
  year =         1990,
  url =          {http://hdl.handle.net/1842/12487},
  timestamp =    {Fri, 07 Oct 2016 21:32:16 +0200},
  biburl =       {https://dblp.org/rec/bib/phd/ethos/Luo90},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% CASL Reference Manual:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*CASL%20User%20Manual][CASL User Manual:1]]

@article{f_ing_modules,
  author =       {Andreas Rossberg and Claudio V. Russo and Derek Dreyer},
  title =        {F-ing modules},
  journal =      {J. Funct. Program.},
  volume =       24,
  number =       5,
  pages =        {529--607},
  year =         2014,
  url =          {https://people.mpi-sws.org/~rossberg/f-ing/},
  doi =          {10.1017/S0956796814000264},
  timestamp =    {Sat, 27 May 2017 14:24:34 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jfp/RossbergRD14},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% CASL User Manual:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Maude's%20module%20algebra][Maude's module algebra:1]]

@misc{first_class_modules_support,
  title =        {First-class modules for component-based programming: Case for
                  support},
  url =
                  {https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.48.5793},
  journal =      {CiteSeerX}
}
%% Maude's module algebra:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Reuse%20of%20Specification%20Patterns%20with%20the%20{B}%20Method][Reuse of Specification Patterns with the {B} Method:1]]

@InProceedings{focalize,
  author =       {Catherine Dubois and Fran{\c{c}}ois Pessaux},
  title =        {Termination Proofs for Recursive Functions in FoCaLiZe},
  year =         2015,
  booktitle =    {Trends in Functional Programming - 16th International
                  Symposium, {TFP} 2015, Sophia Antipolis, France, June 3-5,
                  2015. Revised Selected Papers},
  pages =        {136-156},
  doi =          {10.1007/978-3-319-39110-6\_8},
  url =          {https://doi.org/10.1007/978-3-319-39110-6\_8},
  crossref =     {DBLP:conf/sfp/2015},
  timestamp =    {Fri, 26 May 2017 00:49:32 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/sfp/DuboisP15},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Reuse of Specification Patterns with the {B} Method:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Categorical%20foundations%20for%20structured%20specifications%20in%20{Z}][Categorical foundations for structured specifications in {Z}:1]]

@Article{frama_c,
  author =       {Grigoriy Volkov and Mikhail U. Mandrykin and Denis Efremov},
  title =        {Lemma Functions for Frama-C: {C} Programs as Proofs},
  year =         2018,
  volume =       {abs/1811.05879},
  eprint =       {1811.05879},
  url =          {http://arxiv.org/abs/1811.05879},
  journal =      {CoRR},
  archiveprefix ={arXiv},
  timestamp =    {Sat, 24 Nov 2018 17:52:00 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/corr/abs-1811-05879},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Categorical foundations for structured specifications in {Z}:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Institution-independent%20Model%20Theory][Institution-independent Model Theory:1]]

@InProceedings{girard_paradox,
  author =       {Thierry Coquand},
  title =        {An Analysis of Girard's Paradox},
  year =         1986,
  booktitle =    {Proceedings of the Symposium on Logic in Computer Science
                  {(LICS} '86), Cambridge, Massachusetts, USA, June 16-18, 1986},
  pages =        {227-236},
  timestamp =    {Thu, 22 Jan 2015 10:44:13 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/lics/Coquand86},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Institution-independent Model Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*OCaml%20Website][OCaml Website:1]]
@online{ocaml_website,
  author = {The {OCaml Team}},
  title = {The OCaml Language, Official Website},
  year = 2018,
  url = {https://ocaml.org/},
  urldate = {2018-10-16}
}
%% OCaml Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Dependent%20Types%20At%20Work][Dependent Types At Work:1]]

@InProceedings{haskell_backpack,
  author =       {Scott Kilpatrick and Derek Dreyer and Simon L. {Peyton Jones}
                  and Simon Marlow},
  title =        {Backpack: retrofitting Haskell with interfaces},
  year =         2014,
  booktitle =    {The 41st Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles
                  of Programming Languages, {POPL} '14, San Diego, CA, USA,
                  January 20-21, 2014},
  pages =        {19-32},
  doi =          {10.1145/2535838.2535884},
  url =          {https://doi.org/10.1145/2535838.2535884},
  timestamp =    {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/popl/KilpatrickDJM14},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Dependent Types At Work:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Wikipedia:%20Curry-Howard%20Correspondence][Wikipedia: Curry-Howard Correspondence:1]]
@online{wiki_curry_howard,
  organisation = {Wikipedia},
  title = {Curry–Howard correspondence --- {Wikipedia}{,} The Free Encyclopedia},
  year = 2018,
  url = {https://en.wikipedia.org/wiki/Curry-Howard_correspondence},
  urldate = {2018-10-16}
}
%% Wikipedia: Curry-Howard Correspondence:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Wikipedia:%20Multiple%20inheritance][Wikipedia: Multiple inheritance:1]]
@online{wiki_diamond_problem,
  organisation = {Wikipedia},
  title = {Multiple inheritance --- {Wikipedia}{,} The Free Encyclopedia},
  year = 2018,
  url = {https://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem},
  urldate = {2018-10-16}
}
%% Wikipedia: Multiple inheritance:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Wikipedia:%20Hungarian%20notation][Wikipedia: Hungarian notation:1]]
@online{hungarian_notation,
  organisation = {Wikipedia},
  title = {Hungarian notation --- {Wikipedia}{,} The Free Encyclopedia},
  year = 2018,
  url = {https://en.wikipedia.org/wiki/Hungarian_notation},
  urldate = {2018-10-16}
}
%% Wikipedia: Hungarian notation:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Type-theory%20in%20Color][Type-theory in Color:1]]

@Unpublished{haskell_in_haskell,
  author =       {Tim Sheard and William Harrison and James Hook},
  title =        {Modeling the Fine Control of Demand in Haskell.},
  note =         {(submitted to Haskell workshop 2001)},
  year =         2001,
}
%% Type-theory in Color:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Ornamental%20Algebras,%20Algebraic%20Ornaments][Ornamental Algebras, Algebraic Ornaments:1]]

@InProceedings{haskell_modules_formally,
  author =       {Iavor S. Diatchki and Mark P. Jones and Thomas Hallgren },
  title =        {A formal specification of the {Haskell 98} module system },
  crossref =     {Haskell2002},
  pages =        {17--28},
  URL =          {http://doi.acm.org/10.1145/581690.581692},
  abstract =     {Many programming languages provide means to split large
                  programs into smaller modules. The module system of a language
                  specifies what constitutes a module and how modules
                  interact.This paper presents a formal specification of the
                  module system for the functional programming language
                  Haskell. Although many aspects of Haskell have been subjected
                  to formal analysis, the module system has, to date, been
                  described only informally as part of the Haskell language
                  report. As a result, some aspects of it are not well
                  understood or are under-specified; this causes difficulties in
                  reasoning about Haskell programs, and leads to practical
                  problems such as inconsistencies between different
                  implementations. One significant aspect of our work is that
                  the specification is written in Haskell, which means that it
                  can also be used as an executable test-bed, and as a starting
                  point for Haskell implementers.}
}
%% Ornamental Algebras, Algebraic Ornaments:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Relational%20Algebraic%20Ornaments][Relational Algebraic Ornaments:1]]

@InProceedings{hasochism,
  author =       {Sam Lindley and Conor McBride},
  title =        {Hasochism: the pleasure and pain of dependently typed haskell
                  programming},
  year =         2013,
  booktitle =    {Proceedings of the 2013 {ACM} {SIGPLAN} Symposium on Haskell,
                  Boston, MA, USA, September 23-24, 2013},
  pages =        {81-92},
  doi =          {10.1145/2503778.2503786},
  url =          {https://doi.org/10.1145/2503778.2503786},
  timestamp =    {Tue, 06 Nov 2018 16:58:22 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/haskell/LindleyM13},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Relational Algebraic Ornaments:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Why%20dependent%20types%20matter][Why dependent types matter:1]]

@Article{higher_order_interpretations,
  author =       {Patrick Baillot and Ugo Dal Lago},
  title =        {Higher-order interpretations and program complexity},
  year =         2016,
  volume =       248,
  pages =        {56-81},
  doi =          {10.1016/j.ic.2015.12.008},
  url =          {https://doi.org/10.1016/j.ic.2015.12.008},
  journal =      {Inf. Comput.},
  timestamp =    {Thu, 18 May 2017 09:54:18 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/iandc/BaillotL16},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Why dependent types matter:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Tutorial%20Implementation%20of%20a%20DTL%20Calculus][A Tutorial Implementation of a DTL Calculus:1]]

@book{hofstadter_gdel_1979,
  added-at =     {2009-02-19T14:19:12.000+0100},
  author =       {Hofstadter, Douglas R.},
  biburl =
                  {https://www.bibsonomy.org/bibtex/28e4bfa972541e430f9520006e053ef9b/ivan},
  interhash =    {311d5d81ee9dfd0fccabd4beafdc671c},
  intrahash =    {8e4bfa972541e430f9520006e053ef9b},
  keywords =     {logic mathematics},
  publisher =    {Basic Books Inc.},
  timestamp =    {2009-02-19T14:19:14.000+0100},
  title =        {Gödel, Escher, Bach: an Eternal Golden Braid},
  year =         1979
}
%% A Tutorial Implementation of a DTL Calculus:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Lectures%20on%20Implementing%20Idris][Lectures on Implementing Idris:1]]
@online{dtl_implementation_idris,
  author = {Edwin Brady},
  title = {Lectures on Implementing Idris},
  url = {https://www.idris-lang.org/dependently-typed-functional-programming-with-idris-course-videos-and-slides/},
  urldate = {2018-10-19}
}
%% Lectures on Implementing Idris:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Designing%20DTLs][Designing DTLs:1]]
@online{dtl_implementation_lectures_and_code,
  author = {Stephanie Weirich},
  title = {2014 OPLSS Lectures \emph{Designing Dependently-Typed Programming Languages}},
  url = {https://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html},
  urldate = {2018-10-19}
}
%% Designing DTLs:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Practical%20implementation%20of%20a%20DTL][Practical implementation of a DTL:1]]

@Book{hottbook,
  author =       {The {Univalent Foundations Program}},
  title =        {Homotopy Type Theory: Univalent Foundations of Mathematics},
  publisher =    {\url{https://homotopytypetheory.org/book}},
  address =      {Institute for Advanced Study},
  year =         2013
}
%% Practical implementation of a DTL:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Implementing%20and%20Optimizing%20a%20Simple%20DTL][Implementing and Optimizing a Simple DTL:1]]

@InProceedings{idris_main,
  author =       {Brady, Edwin C.},
  title =        {{IDRIS} --- Systems Programming Meets Full Dependent Types},
  booktitle =    {Proceedings of the 5th ACM workshop on Programming languages
                  meets program verification},
  series =       {PLPV '11},
  year =         2011,
  isbn =         {978-1-4503-0487-0},
  location =     {Austin, Texas, USA},
  pages =        {43--54},
  numpages =     12,
  url =          {http://doi.acm.org/10.1145/1929529.1929536},
  doi =          {http://doi.acm.org/10.1145/1929529.1929536},
  acmid =        1929536,
  publisher =    {ACM},
  address =      {New York, NY, USA},
  keywords =     {data description, dependent types},
  abstract =     {Dependent types have emerged in recent years as a promising
                  approach to ensuring program correctness. However, existing
                  dependently typed languages such as Agda and Coq work at a
                  very high level of abstraction, making it difficult to map
                  verified programs to suitably efficient executable code.  This
                  is particularly problematic for programs which work with bit
                  level data, e.g. network packet processing, binary file
                  formats or operating system services. Such programs, being
                  fundamental to the operation of computers in general, may
                  stand to benefit significantly from program verification
                  techniques.  This paper describes the use of a dependently
                  typed programming language, Idris, for specifying and
                  verifying properties of low-level systems programs, taking
                  network packet processing as an extended example.  We give an
                  overview of the distinctive features of Idris which allow it
                  to interact with external systems code, with precise
                  types. Furthermore, we show how to integrate tactic scripts
                  and plugin decision procedures to reduce the burden of proof
                  on application developers. The ideas we present are readily
                  adaptable to languages with related type systems.}
}
%% Implementing and Optimizing a Simple DTL:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Ynot:%20dependent%20types%20for%20imperative%20programs][Ynot: dependent types for imperative programs:1]]

@book{idris_tdd,
  author =       {Brady, Edwin},
  isbn =         9781617293023,
  keywords =     {03b15-higher-order-logic-type-theory,
                  68n15-programming-languages,
                  68n18-functional-programming-and-lambda-calculus},
  publisher =    {Manning},
  title =        {Type-driven Development With {I}dris},
  url =          {http://www.worldcat.org/isbn/9781617293023},
  year =         2016
}
%% Ynot: dependent types for imperative programs:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Inductive%20Families%20Need%20Not%20Store%20Their%20Indices][Inductive Families Need Not Store Their Indices:1]]

@article{il_interpretation,
  author =       {Andrey Kolmogorov},
  translator =   {James McKinna},
  title =        {On the Interpretation of Intuitionistic Logic, \emph{Zur
                  Deutung der intuitionistischen Logik}},
  language =     {langgerman},
  year =         1932,
  url =          {http://homepages.inf.ed.ac.uk/jmckinna/kolmogorov-1932.pdf},
  urldate =      {2018-10-31}
}
%% Inductive Families Need Not Store Their Indices:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Erasure%20and%20Polymorphism%20in%20Pure%20Type%20Systems][Erasure and Polymorphism in Pure Type Systems:1]]

@inproceedings{institution_interpretations,
  author =       {Jos{\'{e}} Luiz Fiadeiro and T. S. E. Maibaum},
  title =        {Generalising Interpretations between Theories in the context
                  of (pi-) Institutions},
  booktitle =    {Theory and Formal Methods 1993, Proceedings of the First
                  Imperial College Department of Computing Workshop on Theory
                  and Formal Methods, Isle of Thorns Conference Centre, Chelwood
                  Gate, Sussex, UK, 29-31 March 1993},
  pages =        {126--147},
  year =         1993,
  crossref =     {DBLP:conf/imperial/1993},
  timestamp =    {Tue, 25 Feb 2003 14:11:07 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/imperial/FiadeiroM93},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Erasure and Polymorphism in Pure Type Systems:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Towards%20a%20Proof-Irrelevant%20Calculus%20of%20Inductive%20Constructions][Towards a Proof-Irrelevant Calculus of Inductive Constructions:1]]

@book{institutions,
  author =       {Diaconescu, Razvan},
  title =        {Institution-independent Model Theory},
  year =         2008,
  isbn =         {3764387076, 9783764387075},
  edition =      {1st},
  publisher =    {Birkh\&\#228;user Basel},
}
%% Towards a Proof-Irrelevant Calculus of Inductive Constructions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Mathematical%20Logic%20as%20Based%20on%20the%20Theory%20of%20Types][Mathematical Logic as Based on the Theory of Types:1]]
@online{russell_type_hierarchy,
  author = {Bertrand Russell},
  title = {Mathematical Logic as Based on the Theory of Types},
  url = {https://fi.ort.edu.uy/innovaportal/file/20124/1/37-russell1905.pdf},
  urldate = {2018-10-19}
}
%% Mathematical Logic as Based on the Theory of Types:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*An%20extended%20calculus%20of%20constructions][An extended calculus of constructions:1]]

@inproceedings{isabelle_constructive_typeclasses,
  author =       {Florian Haftmann and Makarius Wenzel},
  title =        {Constructive Type Classes in Isabelle},
  booktitle =    {Types for Proofs and Programs, International Workshop, {TYPES}
                  2006, Nottingham, UK, April 18-21, 2006, Revised Selected
                  Papers},
  pages =        {160--174},
  year =         2006,
  crossref =     {DBLP:conf/types/2006},
  url =          {https://doi.org/10.1007/978-3-540-74464-1\_11},
  doi =          {10.1007/978-3-540-74464-1\_11},
  timestamp =    {Fri, 02 Jun 2017 13:01:07 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/types/HaftmannW06},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% An extended calculus of constructions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20polymorphic%20%CE%BB-calculus%20with%20Type:Type][A polymorphic λ-calculus with Type:Type:1]]
@online{system_F_with_type_in_type,
  author = {Luca Cardelli},
  title = {A polymorphic λ-calculus with Type:Type},
  url = {http://lucacardelli.name/Papers/TypeType.A4.pdf},
  urldate = {2018-10-19}
}
%% A polymorphic λ-calculus with Type:Type:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Practical%20Erasure%20in%20Dependently%20Typed%20Languages][Practical Erasure in Dependently Typed Languages:1]]

@inproceedings{isabelle_locales,
  author =       {Florian Kamm{\"{u}}ller and Markus Wenzel and Lawrence
                  C. Paulson},
  title =        {Locales - {A} Sectioning Concept for Isabelle},
  booktitle =    {Theorem Proving in Higher Order Logics, 12th International
                  Conference, TPHOLs'99, Nice, France, September, 1999,
                  Proceedings},
  pages =        {149--166},
  year =         1999,
  crossref =     {DBLP:conf/tphol/1999},
  url =          {https://doi.org/10.1007/3-540-48256-3\_11},
  doi =          {10.1007/3-540-48256-3\_11},
  timestamp =    {Sat, 30 Dec 2017 11:46:44 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/tphol/KammullerWP99},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Practical Erasure in Dependently Typed Languages:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Proof-relevant%20unification:%20Dependent%20pattern%20matching%20with%20only%20the%20axioms%20of%20your%20type%20theory][Proof-relevant unification: Dependent pattern matching with only the axioms of your type theory:1]]

@inproceedings{iso_reasoning,
  author =       {Hinze, Ralf and James, Daniel W.H.},
  title =        {Reason Isomorphically!},
  booktitle =    {Proceedings of the 6th ACM SIGPLAN Workshop on Generic
                  Programming},
  series =       {WGP '10},
  year =         2010,
  isbn =         {978-1-4503-0251-7},
  location =     {Baltimore, Maryland, USA},
  pages =        {85--96},
  numpages =     12,
  url =          {http://doi.acm.org/10.1145/1863495.1863507},
  doi =          {10.1145/1863495.1863507},
  acmid =        1863507,
  publisher =    {ACM},
  address =      {New York, NY, USA},
  keywords =     {adjunctions, category theory, isomorphism, yoneda lemma},
  abstract =     {When are two types the same? In this paper we argue that
                  isomorphism is a more useful notion than equality. We explain
                  a succinct and elegant approach to establishing isomorphisms,
                  with our focus on showing their existence over deriving the
                  witnesses. We use category theory as a framework, but rather
                  than chasing diagrams or arguing with arrows, we present our
                  proofs in a calculational style. In particular, we hope to
                  showcase to the reader why the Yoneda lemma and adjunctions
                  should be in their reasoning toolbox.},
  note =         { An excellent paper summarising elementary category theory
                  with the practical aim of showing that rose trees and binary
                  trees, and others, are isomorphic.  It uses a calculational
                  approach to show that isomorphisms can be proven by working
                  with types, i.e., functors, rather than necessarily explicitly
                  providing two arrows that are inverse.  They also provide a
                  theory of fixpoints and a flurry of functional programming
                  examples and remarks.  },
}
%% Proof-relevant unification: Dependent pattern matching with only the axioms of your type theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Dependently%20Typed%20Functional%20Programs%20and%20their%20Proofs][Dependently Typed Functional Programs and their Proofs:1]]

@Article{knuth_lp,
  author =       {Donald E. Knuth},
  title =        {Literate Programming},
  year =         1984,
  volume =       27,
  number =       2,
  pages =        {97-111},
  doi =          {10.1093/comjnl/27.2.97},
  url =          {https://doi.org/10.1093/comjnl/27.2.97},
  journal =      {Comput. J.},
  timestamp =    {Wed, 14 Nov 2018 10:17:27 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/cj/Knuth84},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Dependently Typed Functional Programs and their Proofs:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Investigations%20Into%20Intensional%20Type%20Theory][Investigations Into Intensional Type Theory:1]]

@inproceedings{lean_formalizing_math,
  author =       {Leonardo de Moura},
  title =        {Formalizing Mathematics using the Lean Theorem Prover},
  booktitle =    {International Symposium on Artificial Intelligence and
                  Mathematics, {ISAIM} 2016, Fort Lauderdale, Florida, USA,
                  January 4-6, 2016.},
  year =         2016,
  crossref =     {DBLP:conf/isaim/2016},
  url =
                  {http://isaim2016.cs.virginia.edu/papers/ISAIM2016\_Proofs\_DeMoura.pdf},
  timestamp =    {Thu, 18 Jan 2018 13:13:58 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/isaim/Moura16},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Investigations Into Intensional Type Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Pattern%20matching%20without%20K][Pattern matching without K:1]]

@inproceedings{lean_system_desc,
  author =       {Leonardo Mendon{\c{c}}a de Moura and Soonho Kong and Jeremy
                  Avigad and Floris van Doorn and Jakob von Raumer},
  title =        {The Lean Theorem Prover (System Description)},
  booktitle =    {Automated Deduction - {CADE-25} - 25th International
                  Conference on Automated Deduction, Berlin, Germany, August
                  1-7, 2015, Proceedings},
  pages =        {378--388},
  year =         2015,
  crossref =     {DBLP:conf/cade/2015},
  url =          {https://doi.org/10.1007/978-3-319-21401-6\_26},
  doi =          {10.1007/978-3-319-21401-6\_26},
  timestamp =    {Sun, 21 May 2017 00:17:17 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/cade/MouraKADR15},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Pattern matching without K:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Eliminating%20Dependent%20Pattern%20Matching][Eliminating Dependent Pattern Matching:1]]

@InProceedings{lf_fast_proof_checking,
  author =       {Aaron Stump and David L. Dill},
  title =        {Faster Proof Checking in the Edinburgh Logical Framework},
  year =         2002,
  booktitle =    {Automated Deduction - CADE-18, 18th International Conference
                  on Automated Deduction, Copenhagen, Denmark, July 27-30, 2002,
                  Proceedings},
  pages =        {392-407},
  doi =          {10.1007/3-540-45620-1\_32},
  url =          {https://doi.org/10.1007/3-540-45620-1\_32},
  timestamp =    {Fri, 26 May 2017 14:09:14 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/cade/StumpD02},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Eliminating Dependent Pattern Matching:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Elimination%20with%20a%20motive][Elimination with a motive:1]]

@Article{lf_has_isabelle,
  author =       {Rabe, Florian},
  title =        {Representing Isabelle in LF},
  year =         2010,
  volume =       34,
  month =        {Sep},
  pages =        {85–99},
  issn =         {2075-2180},
  doi =          {10.4204/eptcs.34.8},
  url =          {http://dx.doi.org/10.4204/EPTCS.34.8},
  journal =      {Electronic Proceedings in Theoretical Computer Science},
  publisher =    {Open Publishing Association}
}
%% Elimination with a motive:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20groupoid%20model%20refutes%20uniqueness%20of%20identity%20proofs][The groupoid model refutes uniqueness of identity proofs:1]]

@InProceedings{lf_practical_modules,
  author =       {Florian Rabe and Carsten Sch{\"{u}}rmann},
  title =        {A practical module system for {LF}},
  year =         2009,
  booktitle =    {Proceedings of the Fourth International Workshop on Logical
                  Frameworks and Meta-Languages: Theory and Practice, {LFMTP}
                  '09, McGill University, Montreal, Canada, August 2, 2009},
  pages =        {40-48},
  doi =          {10.1145/1577824.1577831},
  url =          {https://doi.org/10.1145/1577824.1577831},
  timestamp =    {Tue, 06 Nov 2018 16:57:31 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/lfmtp/RabeS09},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The groupoid model refutes uniqueness of identity proofs:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*On%20the%20Strength%20of%20Proof-irrelevant%20Type%20Theories][On the Strength of Proof-irrelevant Type Theories:1]]

@article{lindner_remarks_on_mackey_functors,
  author =       {Lindner, Harald},
  title =        {{A remark on Mackey-functors}},
  year =         1976,
  doi =          {10.1007/BF01245921},
  abstract =     "In the following note we characterize the category of Mackey
                  functors from a categoryC, satisfying a few assumptions, to a
                  categoryD as the category of functors from Sp(C), the category
                  of “spans” inC, toD which preserve finite products. This
                  caracterization permits to apply all results on categories of
                  functors preserving a given class of limits to the case of
                  Mackey-functors.",
}
%% On the Strength of Proof-irrelevant Type Theories:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Inconsistency%20of%20Set:Set][Inconsistency of Set:Set:1]]
@online{agda_type_in_type_contradiction,
  author = {Thorsten Altenkirch},
  title = {Inconsistency of Set:Set},
  url = {http://www.cs.nott.ac.uk/~psztxa/g53cfr/l20.html/l20.html},
  urldate = {2018-10-19}
}
%% Inconsistency of Set:Set:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Formal%20Proof--The%20Four-Color%20Theorem][Formal Proof--The Four-Color Theorem:1]]
@online{coq_four_colour,
  author = {Georges Gonthier},
  title = {Formal Proof--The Four-Color Theorem},
  url = {http://www.ams.org/notices/200811/},
  urldate = {2018-10-19}
}
%% Formal Proof--The Four-Color Theorem:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Machine-Checked%20Proof%20of%20the%20Odd%20Order%20Theorem][A Machine-Checked Proof of the Odd Order Theorem:1]]

@InProceedings{little_theories,
  author =       "Farmer, William M.  and Guttman, Joshua D.  and Javier Thayer,
                  F.",
  editor =       "Kapur, Deepak",
  title =        "Little theories",
  booktitle =    "Automated Deduction---CADE-11",
  year =         1992,
  publisher =    "Springer Berlin Heidelberg",
  address =      "Berlin, Heidelberg",
  pages =        "567--581",
  abstract =     "In the ``little theories'' version of the axiomatic method,
                  different portions of mathematics are developed in various
                  different formal axiomatic theories. Axiomatic theories may be
                  related by inclusion or by theory interpretation. We argue
                  that the little theories approach is a desirable way to
                  formalize mathematics, and we describe how IMPS, an
                  Interactive Mathematical Proof System, supports it.",
  isbn =         "978-3-540-47252-0"
}
%% A Machine-Checked Proof of the Odd Order Theorem:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Compcert%20C%20Compiler][The Compcert C Compiler:1]]
@online{coq_compcert,
  author = {The {Compcert Team}},
  title = {The Compcert C Compiler},
  url = {http://compcert.inria.fr/compcert-C.html},
  year=2018,
  urldate = {2018-10-19}
}
%% The Compcert C Compiler:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Software%20Foundations][Software Foundations:1]]
@online{coq_sf,
  author = {The {Software Foundations Team}},
  title = {Software Foundations},
  url = {https://softwarefoundations.cis.upenn.edu/},
  year=2018,
  urldate = {2018-10-19}
}
%% Software Foundations:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Type-driven%20Development%20With%20Idris][Type-driven Development With Idris:1]]

@InProceedings{locales,
  author =       {Clemens Ballarin},
  title =        {Locales and Locale Expressions in Isabelle/Isar},
  year =         2003,
  booktitle =    {Types for Proofs and Programs, International Workshop, {TYPES}
                  2003, Torino, Italy, April 30 - May 4, 2003, Revised Selected
                  Papers},
  pages =        {34-50},
  doi =          {10.1007/978-3-540-24849-1\_3},
  url =          {https://doi.org/10.1007/978-3-540-24849-1\_3},
  timestamp =    {Thu, 15 Jun 2017 21:39:32 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/types/Ballarin03},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Type-driven Development With Idris:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Idris:%20Frequently%20Asked%20Questions][Idris: Frequently Asked Questions:1]]
@online{idris_faq,
  author = {The {Idris Team}},
  title = {Idris: Frequently Asked Questions},
  url = {http://docs.idris-lang.org/en/latest/faq/faq.html},
  year=2018,
  urldate = {2018-10-19}
}
%% Idris: Frequently Asked Questions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Idris%20Website][Idris Website:1]]
@online{idris_website,
  author = {The {Idris Team}},
  title = {Idris: A Language With Dependent Types},
  url = {https://www.idris-lang.org/},
  year=2018,
  urldate = {2018-10-19}
}
%% Idris Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20ATS%20Programming%20Language:%20Unleashing%20the%20Potentials%20of%20Types%20and%20Templates!][The ATS Programming Language: Unleashing the Potentials of Types and Templates!:1]]
@online{ats_website,
  author = {The {ATS Team}},
  title = {The ATS Programming Language: Unleashing the Potentials of Types and Templates!},
  url = {http://www.ats-lang.org/#What_is_ATS_good_for},
  year=2018,
  urldate = {2018-10-19}
}
%% The ATS Programming Language: Unleashing the Potentials of Types and Templates!:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Combining%20Programming%20with%20Theorem%20Proving][Combining Programming with Theorem Proving:1]]

@inproceedings{lof_constructive_math,
  author =       {Martin-L\"{o}f, P.},
  title =        {Constructive Mathematics and Computer Programming},
  booktitle =    {Proc. Of a Discussion Meeting of the Royal Society of London
                  on Mathematical Logic and Programming Languages},
  year =         1985,
  isbn =         {0-13-561465-1},
  location =     {London, United Kingdom},
  pages =        {167--184},
  numpages =     18,
  url =          {http://dl.acm.org/citation.cfm?id=3721.3731},
  acmid =        3731,
  publisher =    {Prentice-Hall, Inc.},
  address =      {Upper Saddle River, NJ, USA},
}
%% Combining Programming with Theorem Proving:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*F*%20Official%20Website][F* Official Website:1]]
@online{fstar_website,
  author = {The {F* Team}},
  title = {F* Official Website},
  url = {https://www.fstar-lang.org/},
  year=2018,
  urldate = {2018-10-19}
}
%% F* Official Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Mizar%20Home%20Page][Mizar Home Page:1]]
@online{mizar_website,
  author = {The {Mizar Team}},
  title = {Mizar Home Page},
  url = {http://www.mizar.org/},
  year=2018,
  urldate = {2018-10-19}
}
%% Mizar Home Page:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Brief%20Overview%20of%20Mizar][A Brief Overview of Mizar:1]]

@book{lof_itt,
  title =        {Intuitionistic type theory},
  author =       {Martin-L{\"o}f, P. and Sambin, G.},
  series =       {Studies in proof theory},
  url =          {https://books.google.ca/books?id=\_D0ZAQAAIAAJ},
  year =         1984,
  publisher =    {Bibliopolis}
}
%% A Brief Overview of Mizar:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Role%20of%20the%20Mizar%20Mathematical%20Library%20for%20Interactive%20Proof%20Development%20in%20Mizar][The Role of the Mizar Mathematical Library for Interactive Proof Development in Mizar:1]]

@book{lof_programming,
  author =       {Nordstr\"{o}m, Bengt and Petersson, Kent and Smith, Jan M.},
  title =        {Programming in Martin-Lo\&Uml;F's Type Theory: An
                  Introduction},
  year =         1990,
  isbn =         {0-19-853814-6},
  publisher =    {Clarendon Press},
  address =      {New York, NY, USA},
}
%% The Role of the Mizar Mathematical Library for Interactive Proof Development in Mizar:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20undecidability%20of%20typability%20in%20the%20%CE%BB%CE%A0-calculus][The undecidability of typability in the λΠ-calculus:1]]

@inproceedings{lp_after_the_fact,
  author =       {Soya Park and Amy X. Zhang and David R. Karger},
  title =        {Post-literate Programming: Linking Discussion and Code in
                  Software Development Teams},
  booktitle =    {The 31st Annual {ACM} Symposium on User Interface Software and
                  Technology Adjunct Proceedings, {UIST} 2018, Berlin, Germany,
                  October 14-17, 2018},
  pages =        {51--53},
  year =         2018,
  crossref =     {DBLP:conf/uist/2018a},
  url =          {http://doi.acm.org/10.1145/3266037.3266098},
  doi =          {10.1145/3266037.3266098},
  timestamp =    {Sun, 14 Oct 2018 18:55:03 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/uist/ParkZK18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The undecidability of typability in the λΠ-calculus:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Wikipedia:%20Proof%20assistant][Wikipedia: Proof assistant:1]]
@online{wiki_proof_assistants,
  title = {Proof assistant --- {Wikipedia}{,} The Free Encyclopedia},
  organisation = {Wikipedia},
  year=2018,
  url = {https://en.wikipedia.org/wiki/Proof_assistant},
  urldate = {2018-10-19}
}
%% Wikipedia: Proof assistant:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Wikipedia:%20Dependent%20type][Wikipedia: Dependent type:1]]
@online{wiki_proof_assistants_dependent,
  title = {Dependent type --- {Wikipedia}{,} The Free Encyclopedia},
  organisation = {Wikipedia},
  year=2018,
  url = {https://en.wikipedia.org/wiki/Dependent_type},
  urldate = {2018-10-19}
}
%% Wikipedia: Dependent type:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20practical%20module%20system%20for%20LF][A practical module system for LF:1]]

@inproceedings{lp_agile,
  author =       {Vreda Pieterse and Derrick G. Kourie and Andrew Boake},
  title =        {Literate Programming to Enhance Agile Methods},
  booktitle =    {Extreme Programming and Agile Processes in Software
                  Engineering, 5th International Conference, {XP} 2004,
                  Garmisch-Partenkirchen, Germany, June 6-10, 2004, Proceedings},
  pages =        {250--253},
  year =         2004,
  crossref =     {DBLP:conf/xpu/2004},
  url =          {https://doi.org/10.1007/978-3-540-24853-8\_34},
  doi =          {10.1007/978-3-540-24853-8\_34},
  timestamp =    {Tue, 23 May 2017 01:10:41 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/xpu/PieterseKB04},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A practical module system for LF:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Towards%20a%20practical%20programming%20language%20based%20on%20dependent%20type%20theory][Towards a practical programming language based on dependent type theory:1]]

@inproceedings{lp_derivation,
  author =       {Peter Pepper},
  title =        {Literate Program Derivation: {A} Case Study},
  booktitle =    {Method of Programming, Selected Papers on the CIP-Project},
  pages =        {101--124},
  year =         1991,
  crossref =     {DBLP:conf/cip/1991},
  url =          {https://doi.org/10.1007/BFb0018271},
  doi =          {10.1007/BFb0018271},
  timestamp =    {Sat, 20 May 2017 15:32:55 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/cip/Pepper91},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Towards a practical programming language based on dependent type theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Implementing%20Modules%20in%20the%20Coq%20System][Implementing Modules in the Coq System:1]]

@article{lp_experiences,
  author =       {Harold W. Thimbleby},
  title =        {Experiences of 'Literate Programming' Using Cweb {(A} Variant
                  of Knuth's {WEB)}},
  journal =      {Comput. J.},
  volume =       29,
  number =       3,
  pages =        {201--211},
  year =         1986,
  url =          {https://doi.org/10.1093/comjnl/29.3.201},
  doi =          {10.1093/comjnl/29.3.201},
  timestamp =    {Sat, 20 May 2017 00:22:25 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/cj/Thimbleby86},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Implementing Modules in the Coq System:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Locales%20-%20{A}%20Sectioning%20Concept%20for%20Isabelle][Locales - {A} Sectioning Concept for Isabelle:1]]

@inproceedings{lp_first_class,
  author =       {James Dean Palmer and Eddie Hillenbrand},
  title =        {Reimagining literate programming},
  booktitle =    {Companion to the 24th Annual {ACM} {SIGPLAN} Conference on
                  Object-Oriented Programming, Systems, Languages, and
                  Applications, {OOPSLA} 2009, October 25-29, 2009, Orlando,
                  Florida, {USA}},
  pages =        {1007--1014},
  year =         2009,
  crossref =     {DBLP:conf/oopsla/2009c},
  url =          {http://doi.acm.org/10.1145/1639950.1640072},
  doi =          {10.1145/1639950.1640072},
  timestamp =    {Fri, 30 Oct 2009 14:45:38 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/oopsla/PalmerH09},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Locales - {A} Sectioning Concept for Isabelle:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Constructive%20Type%20Classes%20in%20Isabelle][Constructive Type Classes in Isabelle:1]]

@article{lp_knuth,
  author =       {Donald E. Knuth},
  title =        {Literate Programming},
  journal =      {Comput. J.},
  volume =       27,
  number =       2,
  pages =        {97--111},
  year =         1984,
  url =          {https://doi.org/10.1093/comjnl/27.2.97},
  doi =          {10.1093/comjnl/27.2.97},
  timestamp =    {Sat, 20 May 2017 00:22:29 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/cj/Knuth84},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Constructive Type Classes in Isabelle:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Category%20Theory%20for%20Computing%20Science][Category Theory for Computing Science:1]]

@article{lp_modular,
  author =       {Carlos F. Bunge and Gerardo Cisneros},
  title =        {Modular libraries and literate programming in software for ab
                  initio atomic and molecular electronic structure calculations},
  journal =      {Computers {\&} Chemistry},
  volume =       12,
  number =       2,
  pages =        {85--89},
  year =         1988,
  url =          {https://doi.org/10.1016/0097-8485(88)85009-5},
  doi =          {10.1016/0097-8485(88)85009-5},
  timestamp =    {Fri, 26 May 2017 22:53:59 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/candc/BungeC88},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Category Theory for Computing Science:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Categorical%20Models%20of%20Dependent%20Type%20Theory][Categorical Models of Dependent Type Theory:1]]

@article{lp_structured,
  author =       {Sho{-}Huan Tung},
  title =        {A Structured Method for Literate Programming},
  journal =      {Structured Programming},
  volume =       10,
  number =       2,
  pages =        {113--120},
  year =         1989,
  timestamp =    {Thu, 03 Jan 2002 12:26:55 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/stp/Tung89},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Categorical Models of Dependent Type Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Modular%20correspondence%20between%20dependent%20type%20theories%20and%20categories%20including%20pretopoi%20and%20topoi][Modular correspondence between dependent type theories and categories including pretopoi and topoi:1]]

@inproceedings{matching_without_K,
  author =       {Jesper Cockx and Dominique Devriese and Frank Piessens},
  title =        {Pattern matching without {K}},
  booktitle =    {Proceedings of the 19th {ACM} {SIGPLAN} international
                  conference on Functional programming, Gothenburg, Sweden,
                  September 1-3, 2014},
  pages =        {257--268},
  year =         2014,
  crossref =     {DBLP:conf/icfp/2014},
  url =          {http://doi.acm.org/10.1145/2628136.2628139},
  doi =          {10.1145/2628136.2628139},
  timestamp =    {Sun, 04 Jun 2017 10:05:10 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/icfp/CockxDP14},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Modular correspondence between dependent type theories and categories including pretopoi and topoi:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*On%20the%20Interpretation%20of%20Intuitionistic%20Logic][On the Interpretation of Intuitionistic Logic:1]]

@InProceedings{math_structs_in_types,
  author =       {Claudio Sacerdoti Coen and Enrico Tassi},
  title =        {Working with Mathematical Structures in Type Theory},
  year =         2007,
  booktitle =    {Types for Proofs and Programs, International Conference,
                  {TYPES} 2007, Cividale del Friuli, Italy, May 2-5, 2007,
                  Revised Selected Papers},
  pages =        {157-172},
  doi =          {10.1007/978-3-540-68103-8\_11},
  url =          {https://doi.org/10.1007/978-3-540-68103-8\_11},
  timestamp =    {Thu, 15 Jun 2017 21:39:32 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/types/CoenT07},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% On the Interpretation of Intuitionistic Logic:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*On%20Various%20Negative%20Translations][On Various Negative Translations:1]]

@Article{matita_is_coq_light,
  author =       {Asperti, A. and Ricciotti, W. and Sacerdoti Coen, C. and
                  Tassi, E.},
  title =        {A compact kernel for the calculus of inductive constructions},
  year =         2009,
  volume =       34,
  number =       1,
  month =        {Feb},
  pages =        {71–144},
  issn =         {0973-7677},
  doi =          {10.1007/s12046-009-0003-3},
  url =          {http://dx.doi.org/10.1007/s12046-009-0003-3},
  journal =      {Sadhana},
  publisher =    {Springer Nature}
}
%% On Various Negative Translations:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Racket%20Manifesto][The Racket Manifesto:1]]

@InProceedings{matita_main,
  author =       {Andrea Asperti and Claudio Sacerdoti Coen and Enrico Tassi and
                  Stefano Zacchiroli},
  title =        {Crafting a Proof Assistant},
  year =         2006,
  booktitle =    {Types for Proofs and Programs, International Workshop, {TYPES}
                  2006, Nottingham, UK, April 18-21, 2006, Revised Selected
                  Papers},
  pages =        {18-32},
  doi =          {10.1007/978-3-540-74464-1\_2},
  url =          {https://doi.org/10.1007/978-3-540-74464-1\_2},
  timestamp =    {Wed, 14 Nov 2018 10:59:42 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/types/AspertiCTZ06},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The Racket Manifesto:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Creating%20languages%20in%20Racket][Creating languages in Racket:1]]

@Book{maude,
  title =        {All About Maude - {A} High-Performance Logical Framework, How
                  to Specify, Program and Verify Systems in Rewriting Logic},
  year =         2007,
  editor =       {Manuel Clavel and Francisco Dur{\'{a}}n and Steven Eker and
                  Patrick Lincoln and Narciso Mart{\'{\i}}{-}Oliet and
                  Jos{\'{e}} Meseguer and Carolyn L. Talcott},
  volume =       4350,
  series =       {Lecture Notes in Computer Science},
  publisher =    {Springer},
  isbn =         {978-3-540-71940-3},
  doi =          {10.1007/978-3-540-71999-1},
  url =          {https://doi.org/10.1007/978-3-540-71999-1},
  timestamp =    {Wed, 14 Mar 2018 11:45:08 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/maude/2007},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Creating languages in Racket:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Racket%20Website][Racket Website:1]]
@online{racket_website,
  author = {The {Racket Team}},
  title = {Racket: Solve Problems, Make Languages},
  url = {https://racket-lang.org/},
  year=2018,
  urldate = {2018-10-31}
}
%% Racket Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Submodules%20in%20racket:%20you%20want%20it%20when,%20again?][Submodules in racket: you want it when, again?:1]]

@article{maude_module_algebra,
  author =       {Francisco Dur{\'{a}}n and Jos{\'{e}} Meseguer},
  title =        {Maude's module algebra},
  journal =      {Sci. Comput. Program.},
  volume =       66,
  number =       2,
  pages =        {125--153},
  year =         2007,
  url =          {https://doi.org/10.1016/j.scico.2006.07.002},
  doi =          {10.1016/j.scico.2006.07.002},
  timestamp =    {Thu, 08 Jun 2017 08:59:10 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/scp/DuranM07},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Submodules in racket: you want it when, again?:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Racket%20Guide][The Racket Guide:1]]
@online{racket_guide,
  author = {Matthew Flatt and Robert Bruce Findler},
  title = {The Racket Guide},
  year=2018,
  url = {https://docs.racket-lang.org/guide/},
  urldate = {2018-10-31}
}
%% The Racket Guide:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Scala%20Website][Scala Website:1]]
@online{scala_website,
  author = {The {Scala Team}},
  title = {The Scala Programming Language},
  year=2018,
  url = {https://www.scala-lang.org/},
  urldate = {2018-10-31}
}
%% Scala Website:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Beginner's%20Guide%20to%20Scala,%20Object%20Orientation%20and%20Functional%20Programming][A Beginner's Guide to Scala, Object Orientation and Functional Programming:1]]

@article{mixin_modules,
  author =       {Davide Ancona and Elena Zucca},
  title =        {A Theory of Mixin Modules: Algebraic Laws and Reduction
                  Semantics},
  journal =      {Mathematical Structures in Computer Science},
  volume =       12,
  number =       6,
  pages =        {701--737},
  year =         2002,
  url =          {https://doi.org/10.1017/S0960129502003687},
  doi =          {10.1017/S0960129502003687},
  timestamp =    {Sun, 28 May 2017 13:25:37 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/mscs/AnconaZ02},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Beginner's Guide to Scala, Object Orientation and Functional Programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Literate%20Programming][Literate Programming:1]]

@article{mizar_library,
  author =       {Grzegorz Bancerek and Czeslaw Bylinski and Adam Grabowski and
                  Artur Kornilowicz and Roman Matuszewski and Adam Naumowicz and
                  Karol Pak},
  title =        {The Role of the Mizar Mathematical Library for Interactive
                  Proof Development in Mizar},
  journal =      {J. Autom. Reasoning},
  volume =       61,
  number =       {1-4},
  pages =        {9--32},
  year =         2018,
  url =          {https://doi.org/10.1007/s10817-017-9440-6},
  doi =          {10.1007/s10817-017-9440-6},
  timestamp =    {Tue, 26 Jun 2018 14:09:47 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jar/BancerekBGKMNP18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Literate Programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Modular%20libraries%20and%20literate%20programming%20in%20software%20for%20%E2%80%A6%20electronic%20calculations][Modular libraries and literate programming in software for … electronic calculations:1]]

@InCollection{mizar_logic_course,
  author =       {Borak, Ewa and Zalewska, Anna},
  affiliation =  {University of Bialystok, Institute of Computer Science,
                  Białystok Poland},
  title =        {Mizar Course in Logic and Set Theory},
  booktitle =    {Towards Mechanized Mathematical Assistants},
  series =       {Lecture Notes in Computer Science},
  editor =       {Kauers, Manuel and Kerber, Manfred and Miner, Robert and
                  Windsteiger, Wolfgang},
  publisher =    Springer,
  pages =        {191--204},
  volume =       4573,
  DOIURL =       {http://dx.doi.org/10.1007/978-3-540-73086-6_17},
  DOI =          {10.1007/978-3-540-73086-6_17},
  abstract =     {From the very beginning of the development of the Mizar system
                  experiments with using Mizar as a tool for teaching
                  mathematics have been conducted. Numerous organized courses
                  were based on different versions of the system: starting from
                  the first implementation of its processor, through Mizar-MSE,
                  Mizar–4 and PC–Mizar up till its present version. Now Mizar
                  with its mathematical library gives us quite new didactic
                  possibilities.  The purpose of this paper is to present a
                  certain course on logic and set theory offered by our
                  Institute for freshman students. The course employs Mizar as
                  the main tool of instruction. In the paper we discuss the
                  organization of this course and describe some examples of
                  students’ tasks. Finally, some conclusions and remarks are
                  given.},
  year =         2007
}
%% Modular libraries and literate programming in software for … electronic calculations:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Experiences%20of%20'Literate%20Programming'][Experiences of 'Literate Programming':1]]

@Article{mizar_nutshell,
  author =       {Grabowski, Adam and Korni{\l}owicz, Artur and Naumowicz, Adam},
  title =        {Mizar in a Nutshell},
  journal =      {J.~Formalized Reasoning},
  year =         2010,
  volume =       3,
  number =       2,
  pages =        {153--245}
}
%% Experiences of 'Literate Programming':1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Structured%20Method%20for%20Literate%20Programming][A Structured Method for Literate Programming:1]]

@inproceedings{mizar_overview,
  author =       {Adam Naumowicz and Artur Kornilowicz},
  title =        {A Brief Overview of Mizar},
  booktitle =    {Theorem Proving in Higher Order Logics, 22nd International
                  Conference, TPHOLs 2009, Munich, Germany, August 17-20,
                  2009. Proceedings},
  pages =        {67--72},
  year =         2009,
  crossref =     {DBLP:conf/tphol/2009},
  url =          {https://doi.org/10.1007/978-3-642-03359-9\_5},
  doi =          {10.1007/978-3-642-03359-9\_5},
  timestamp =    {Tue, 23 May 2017 01:12:08 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/tphol/NaumowiczK09},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Structured Method for Literate Programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Literate%20Program%20Derivation:%20{A}%20Case%20Study][Literate Program Derivation: {A} Case Study:1]]

@article{mlt_partial,
  author =       {Erik Palmgren and Viggo Stoltenberg{-}Hansen},
  title =        {Domain Interpretations of Martin-L{\"{o}}f's Partial Type
                  Theory},
  journal =      {Ann. Pure Appl. Logic},
  volume =       48,
  number =       2,
  pages =        {135--196},
  year =         1990,
  url =          {https://doi.org/10.1016/0168-0072(90)90044-3},
  doi =          {10.1016/0168-0072(90)90044-3},
  timestamp =    {Wed, 17 May 2017 14:25:58 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/apal/PalmgrenS90},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Literate Program Derivation: {A} Case Study:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Post-literate%20Programming:%20Linking%20Discussion%20and%20Code%20in%20Software%20Development%20{Team}s][Post-literate Programming: Linking Discussion and Code in Software Development {Team}s:1]]

@Article{modular_modules,
  author =       {Xavier Leroy},
  title =        {A modular module system},
  year =         2000,
  volume =       10,
  number =       3,
  pages =        {269-303},
  journal =      {J. Funct. Program.},
  timestamp =    {Fri, 10 Jun 2011 14:42:13 +0200},
  doi =          {10.1017/S0956796800003683},
  biburl =       {https://dblp.org/rec/bib/journals/jfp/Leroy00},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Post-literate Programming: Linking Discussion and Code in Software Development {Team}s:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Language%20with%20first-class%20support%20for%20literate%20programming][A Language with first-class support for literate programming:1]]

@article{modules_categorically,
  author =       {Eugenio Moggi},
  title =        {A Cateogry-Theoretic Account of Program Modules},
  journal =      {Mathematical Structures in Computer Science},
  volume =       1,
  number =       1,
  pages =        {103--139},
  year =         1991,
  url =          {https://doi.org/10.1017/S0960129500000074},
  doi =          {10.1017/S0960129500000074},
  timestamp =    {Sun, 28 May 2017 13:25:36 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/mscs/Moggi91},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Language with first-class support for literate programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Literate%20Programming%20to%20Enhance%20Agile%20Methods][Literate Programming to Enhance Agile Methods:1]]

@inproceedings{named_instances,
  journal =      {Haskell Workshop},
  author =       {Wolfram Kahl and Jan Scheffczyk},
  title =        {Named Instances for Haskell Type Classes},
  abstract =     {Although the functional programming language Haskell has a
                  powerful type class system, users frequently run into
                  situations where they would like to be able to define or adapt
                  instances of type classes only after the remainder of a
                  component has been produced. However, Haskell's type class
                  system essentially only allows late binding of type class
                  constraints on free type variables, and not on uses of type
                  class members at variable-free types.  In the current paper we
                  propose a language extension that enhances the late binding
                  capabilities of Haskell type classes, and provides more
                  flexible means for type class instantiation. The latter is
                  achieved via named instances that do not participate in
                  automatic context reduction, but can only be used for late
                  binding. By combining this capability with the automatic
                  aspects of the Haskell type class system, we arrive at an
                  essentially conservative extension that greatly improves
                  flexibility of programming using type classes and opens up new
                  structuring principles for Haskell library design.  We
                  exemplify our extension through the sketch of some
                  applications and show how our approach could be used to
                  explain or subsume other language features as for example
                  implicit parameters. We present a typed lambda-calculus for
                  our extension and provide a working prototype type checker on
                  the basis of Mark Jones' ``Typing Haskell in Haskell''.  },
  year =         2001,
}
%% Literate Programming to Enhance Agile Methods:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Software%20Development%20as%20Knowledge%20Creation][Software Development as Knowledge Creation:1]]
@online{lp_knowledge_creation,
  author = {Sidney Bailin},
  title = {Software Development as Knowledge Creation},
  url = {https://pdfs.semanticscholar.org/67cb/43536824069270a2d02db5d8d61b616d1568.pdf},
  year={1997},
  urldate = {2018-10-31}
}
%% Software Development as Knowledge Creation:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Structure%20and%20Interpretation%20of%20Computer%20Programs,%20Second%20Edition][Structure and Interpretation of Computer Programs, Second Edition:1]]

@article{open_modules,
  author =       {Sonia Fagorzi and Elena Zucca},
  title =        {A calculus of open modules: call-by-need strategy and
                  confluence},
  journal =      {Mathematical Structures in Computer Science},
  volume =       17,
  number =       4,
  pages =        {675--751},
  year =         2007,
  url =          {https://doi.org/10.1017/S0960129507006238},
  doi =          {10.1017/S0960129507006238},
  timestamp =    {Sun, 28 May 2017 13:25:37 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/mscs/FagorziZ07},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Structure and Interpretation of Computer Programs, Second Edition:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Head%20first%20design%20patterns%20-%20your%20brain%20on%20design%20patterns][Head first design patterns - your brain on design patterns:1]]

@article{ornaments,
  author =       {Conor McBride},
  title =        {Ornamental Algebras, Algebraic Ornaments},
  journal =      {Unpublished Draft},
  publisher =    {University of Strathclyde},
  url =
                  {https://personal.cis.strath.ac.uk/conor.mcbride/pub/OAAO/Ornament.pdf},
  urldate =      {2018-10-19},
  abstract =     {This paper re-examines the presentation of datatypes in
                  dependently typed languages, addressing in particular the
                  issue of what it means for one datatype to be in various ways
                  more informative than another. Informal human observations
                  like ‘lists are natural numbers with extra labels’ and
                  ‘vectors are lists indexed by length’ are expressed in a first
                  class language of ornaments—presentations of fancy new types
                  based on plain old ones.  Each ornament adds information, so
                  it comes with a forgetful function from fancy data back to
                  plain, expressible as the fold of its ornamental algebra:
                  lists built from numbers acquire the ‘length’
                  algebra. Conversely, each algebra for a datatype induces a way
                  to index it—an algebraic ornament.  The length algebra for
                  lists induces the construction of the paradigmatic dependent
                  vector types.  Dependent types thus provide not only a new
                  ‘axis of diversity’—indexing—for data structures, but also new
                  abstractions to manage and exploit that diversity. In the new
                  programming (2), coincidence is replaced by consequence.},
}
%% Head first design patterns - your brain on design patterns:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Clean%20Code%20-%20a%20Handbook%20of%20Agile%20Software%20Craftsmanship][Clean Code - a Handbook of Agile Software Craftsmanship:1]]

@inproceedings{ornaments_relationally,
  author =       {Ko, Hsiang-Shang and Gibbons, Jeremy},
  title =        {Relational Algebraic Ornaments},
  booktitle =    {Proceedings of the 2013 ACM SIGPLAN Workshop on
                  Dependently-typed Programming},
  series =       {DTP '13},
  year =         2013,
  isbn =         {978-1-4503-2384-0},
  location =     {Boston, Massachusetts, USA},
  pages =        {37--48},
  numpages =     12,
  url =          {http://doi.acm.org/10.1145/2502409.2502413},
  doi =          {10.1145/2502409.2502413},
  acmid =        2502413,
  publisher =    {ACM},
  address =      {New York, NY, USA},
  keywords =     {algebra of programming, dependently typed programming, greedy
                  algorithms, inductive families, program derivation},
  abstract =     {Dependently typed programming is hard, because ideally
                  dependently typed programs should share structure with their
                  correctness proofs, but there are very few guidelines on how
                  one can arrive at such integrated programs. McBride's
                  algebraic ornamentation provides a methodological advancement,
                  by which the programmer can derive a datatype from a
                  specification involving a fold, such that a program that
                  constructs elements of that datatype would be correct by
                  construction. It is thus an effective method that leads the
                  programmer from a specification to a dependently typed
                  program. We enhance the applicability of this method by
                  generalising algebraic ornamentation to a relational setting
                  and bringing in relational algebraic methods, resulting in a
                  hybrid approach that makes essential use of both dependently
                  typed programming and relational program derivation. A
                  dependently typed solution to the minimum coin change problem
                  is presented as a demonstration of this hybrid approach. We
                  also give a theoretically interesting "completeness theorem"
                  of relational algebraic ornaments, which sheds some light on
                  the expressive power of ornaments and inductive families.},
}
%% Clean Code - a Handbook of Agile Software Craftsmanship:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Program%20Construction:%20Calculating%20Implementations%20from%20Specifications][Program Construction: Calculating Implementations from Specifications:1]]

@InProceedings{packaging_mathematical_structures,
  author =       {Garillot, Fran{\c c}ois and Gonthier, Georges and Mahboubi,
                  Assia and Rideau, Laurence},
  title =        {{Packaging Mathematical Structures}},
  year =         2009,
  booktitle =    {{Theorem Proving in Higher Order Logics}},
  editor =       {Tobias Nipkow and Christian Urban},
  volume =       5674,
  series =       {Lecture Notes in Computer Science},
  publisher =    {{Springer}},
  url =          {https://hal.inria.fr/inria-00368403},
  address =      {Munich, Germany},
  keywords =     {Formalization of Algebra ; Coercive subtyping ; Type inference
                  ; Coq ; SSReflect},
  pdf =          {https://hal.inria.fr/inria-00368403/file/main.pdf},
  hal_id =       {inria-00368403},
  hal_version =  {v2}
}
%% Program Construction: Calculating Implementations from Specifications:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Programming%20from%20First%20Principles][Programming from First Principles:1]]

@misc{perna,
  title =        {(Re-)Creating sharing in Agda's GHC backend},
  url =          {https://macsphere.mcmaster.ca/handle/11375/22177},
  journal =      {MacSphere},
  author =       {Natalie Perna},
  year =         2017,
  month =        {Jan}
}
%% Programming from First Principles:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Gentle%20Introduction%20to%20Category%20Theory%20---%20the%20calculational%20approach][A Gentle Introduction to Category Theory --- the calculational approach:1]]

@InProceedings{programatica,
  author =       {Thomas Hallgren and James Hook and Mark P. Jones and Richard
                  B. Kieburtz},
  title =        {An Overview of the Programatica Toolset},
  booktitle =    {HCSS '04},
  URL =          {http://www.cse.ogi.edu/PacSoft/projects/programatica/},
  bibliographies ={HHOL},
}

@MastersThesis{proof_irrelevant_cic,
  author =       {Philipp Haselwarter},
  title =        {Towards a Proof-Irrelevant Calculus of Inductive
                  Constructions},
  year =         2015,
  url =          {http://www.haselwarter.org/~philipp/piCoq.pdf},
}
%% A Gentle Introduction to Category Theory --- the calculational approach:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*F-ing%20modules][F-ing modules:1]]

@article{proof_relevant_unification,
  author =       {Jesper Cockx and Dominique Devriese},
  title =        {Proof-relevant unification: Dependent pattern matching with
                  only the axioms of your type theory},
  journal =      {J. Funct. Program.},
  volume =       28,
  pages =        {e12},
  year =         2018,
  url =          {https://doi.org/10.1017/S095679681800014X},
  doi =          {10.1017/S095679681800014X},
  timestamp =    {Tue, 29 May 2018 13:36:43 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jfp/CockxD18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% F-ing modules:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Programming%20in%20the%201990s%20-%20An%20Introduction%20to%20the%20Calculation%20of%20Programs][Programming in the 1990s - An Introduction to the Calculation of Programs:1]]

@article{racket_creating_languages,
  author =       {Matthew Flatt},
  title =        {Creating languages in Racket},
  journal =      {Commun. {ACM}},
  volume =       55,
  number =       1,
  pages =        {48--56},
  year =         2012,
  url =          {http://doi.acm.org/10.1145/2063176.2063195},
  doi =          {10.1145/2063176.2063195},
  timestamp =    {Mon, 09 Jan 2012 13:39:03 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/cacm/Flatt12},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Programming in the 1990s - An Introduction to the Calculation of Programs:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Discipline%20of%20Programming][A Discipline of Programming:1]]

@inproceedings{racket_manifesto,
  author =       {Matthias Felleisen and Robert Bruce Findler and Matthew Flatt
                  and Shriram Krishnamurthi and Eli Barzilay and Jay A. McCarthy
                  and Sam Tobin{-}Hochstadt},
  title =        {The Racket Manifesto},
  booktitle =    {1st Summit on Advances in Programming Languages, {SNAPL} 2015,
                  May 3-6, 2015, Asilomar, California, {USA}},
  pages =        {113--128},
  year =         2015,
  crossref =     {DBLP:conf/snapl/2015},
  url =          {https://doi.org/10.4230/LIPIcs.SNAPL.2015.113},
  doi =          {10.4230/LIPIcs.SNAPL.2015.113},
  timestamp =    {Thu, 23 Aug 2018 15:56:17 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/snapl/FelleisenFFKBMT15},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A Discipline of Programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Science%20of%20Programming][The Science of Programming:1]]

@inproceedings{racket_submodules,
  author =       {Matthew Flatt},
  title =        {Submodules in Racket: you want it when, again?},
  booktitle =    {Generative Programming: Concepts and Experiences, GPCE'13,
                  Indianapolis, IN, {USA} - October 27 - 28, 2013},
  pages =        {13--22},
  year =         2013,
  crossref =     {DBLP:conf/gpce/2013},
  url =          {http://doi.acm.org/10.1145/2517208.2517211},
  doi =          {10.1145/2517208.2517211},
  timestamp =    {Fri, 25 Oct 2013 08:34:11 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/gpce/Flatt13},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% The Science of Programming:1 ends here


%%

%% [[file:~/thesis-proposal/papers/References.org::*Design%20Principles%20and%20Design%20Patterns%20:design-patterns-solid:][Design Principles and Design Patterns :design-patterns-solid::1]]
@online{old-design-patterns-solid,
  author = "Robert C. Martin",
  title = "Design Principles and Design Patterns",
  url = "https://fi.ort.edu.uy/innovaportal/file/2032/1/design_principles.pdf",
  urldate = "2018-10-19",
  editor="Kapur, Deepak",
  year="1992",
  publisher="Springer Berlin Heidelberg",
abstract="In the ``little theories'' version of the axiomatic method, different portions of mathematics are developed in various different formal axiomatic theories. Axiomatic theories may be related by inclusion or by theory interpretation. We argue that the little theories approach is a desirable way to formalize mathematics, and we describe how IMPS, an Interactive Mathematical Proof System, supports it.",
isbn="978-3-540-47252-0"
}
@online{design-patterns-solid,
  title =	 {jkitchin/org-ref: org-mode modules for citations,
                  cross-references, bibliographies in org-mode and useful bibtex
                  tools to go with it.},
  url =		 {https://github.com/jkitchin/org-ref},
  urldate =	 {12/04/2016}
}
@Online{another-design-patterns-solid,
author="Farmer, William M.
and Guttman, Joshua D.
and Javier Thayer, F.",
editor="Kapur, Deepak",
title="Little theories",
booktitle="Automated Deduction---CADE-11",
year="1992",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="567--581",
abstract="In the ``little theories'' version of the axiomatic method, different portions of mathematics are developed in various different formal axiomatic theories. Axiomatic theories may be related by inclusion or by theory interpretation. We argue that the little theories approach is a desirable way to formalize mathematics, and we describe how IMPS, an Interactive Mathematical Proof System, supports it.",
isbn="978-3-540-47252-0"
}

%% Design Principles and Design Patterns :design-patterns-solid::1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Categorical%20logic%20from%20a%20categorical%20point%20of%20view][Categorical logic from a categorical point of view:1]]
@online{cats_logic_shulman,
  author = {Michael Shulman},
  title = {Categorical logic from a categorical point of view},
  url = {https://mikeshulman.github.io/catlog/catlog.pdf},
  urldate = {2018-10-19},
  date = {2016}
}
%% Categorical logic from a categorical point of view:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Why%20Dependent%20Types%20Matter][Why Dependent Types Matter:1]]
@online{dtl_why,
  author = {Thorsten Alkenkirch AND Conor McBride AND James McKinna},
  title = {Why Dependent Types Matter},
  url = {http://www.cs.nott.ac.uk/~psztxa/publ/ydtm.pdf},
  urldate = {2018-10-19},
  date = {2005}
}
%% Why Dependent Types Matter:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*PVS%20Prover%20Guide][PVS Prover Guide:1]]
@online{pvs_prover,
  author = {Natarajan Shankar AND Sam Owre AND John Rushby AND Dave Stringer-Calvert},
  title = {PVS Prover Guide},
  url = {http://pvs.csl.sri.com/doc/pvs-prover-guide.pdf},
  urldate = {2019-04-19},
  date = {2001}
}
%% PVS Prover Guide:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Twelf%20Project][The Twelf Project:1]]
@online{twelf_site,
  author = {Frank Pfenning and The Twelf Team},
  title = {The Twelf Project},
  url = {http://twelf.org/wiki/Main_Page},
  urldate = {2018-10-19},
  date = {2015}
}
%% The Twelf Project:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*PRL%20Project:%20Proof/Program%20Refinment%20Logic][PRL Project: Proof/Program Refinment Logic:1]]
@online{prl_site,
  author = {The {PRL Team}},
  title = {PRL Project: Proof/Program Refinment Logic},
  url = {http://www.nuprl.org},
  urldate = {2018-10-19},
  date = {2014}
}
%% PRL Project: Proof/Program Refinment Logic:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20Matita%20Interactive%20Theorem%20Prover][The Matita Interactive Theorem Prover:1]]
@online{matita_site,
  author = {The {Matita Team}},
  title = {The Matita Interactive Theorem Prover},
  url = {http://matita.cs.unibo.it},
  urldate = {2018-10-19},
  date = {2016}
}
%% The Matita Interactive Theorem Prover:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Named%20Instances%20for%20Haskell%20Type%20Classes][Named Instances for Haskell Type Classes:1]]

@InProceedings{rig_computations,
  author =       {Jacques Carette and Amr Sabry},
  title =        {Computing with Semirings and Weak Rig Groupoids},
  year =         2016,
  booktitle =    {Programming Languages and Systems - 25th European Symposium on
                  Programming, {ESOP} 2016, Held as Part of the European Joint
                  Conferences on Theory and Practice of Software, {ETAPS} 2016,
                  Eindhoven, The Netherlands, April 2-8, 2016, Proceedings},
  pages =        {123-148},
  doi =          {10.1007/978-3-662-49498-1\_6},
  url =          {https://doi.org/10.1007/978-3-662-49498-1\_6},
  crossref =     {DBLP:conf/esop/2016},
  timestamp =    {Fri, 02 Nov 2018 09:46:30 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/esop/CaretteS16},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Named Instances for Haskell Type Classes:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Literate%20Programming][Literate Programming:1]]

@book{scala_book,
  author =       {John Hunt},
  title =        {A Beginner's Guide to Scala, Object Orientation and Functional
                  Programming, Second Edition},
  publisher =    {Springer},
  year =         2018,
  url =          {https://doi.org/10.1007/978-3-319-75771-1},
  doi =          {10.1007/978-3-319-75771-1},
  isbn =         {978-3-319-75770-4},
  timestamp =    {Thu, 08 Mar 2018 12:15:18 +0100},
  biburl =       {https://dblp.org/rec/bib/books/sp/Hunt18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Literate Programming:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Termination%20Proofs%20for%20Recursive%20Functions%20in%20FoCaLiZe][Termination Proofs for Recursive Functions in FoCaLiZe:1]]

@Article{seven_hundred_data,
  author =       {Kathleen Fisher and Yitzhak Mandelbaum and David Walker},
  title =        {The next 700 data description languages},
  year =         2010,
  volume =       57,
  number =       2,
  pages =        {10:1--10:51},
  doi =          {10.1145/1667053.1667059},
  url =          {https://doi.org/10.1145/1667053.1667059},
  journal =      {J. {ACM}},
  timestamp =    {Tue, 06 Nov 2018 12:51:46 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/jacm/FisherMW10},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Termination Proofs for Recursive Functions in FoCaLiZe:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Domain%20Interpretations%20of%20Martin-L{\"{o}}f's%20Partial%20Type%20Theory][Domain Interpretations of Martin-L{\"{o}}f's Partial Type Theory:1]]

@Article{seven_hundred_hoas,
  author =       {Amy P. Felty and Alberto Momigliano and Brigitte Pientka},
  title =        {The Next 700 Challenge Problems for Reasoning with
                  Higher-Order Abstract Syntax Representations - Part 2 - {A}
                  Survey},
  year =         2015,
  volume =       55,
  number =       4,
  pages =        {307-372},
  doi =          {10.1007/s10817-015-9327-3},
  url =          {https://doi.org/10.1007/s10817-015-9327-3},
  journal =      {J. Autom. Reasoning},
  timestamp =    {Fri, 15 Sep 2017 17:21:46 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jar/FeltyMP15},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Domain Interpretations of Martin-L{\"{o}}f's Partial Type Theory:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Higher-order%20interpretations%20and%20program%20complexity][Higher-order interpretations and program complexity:1]]

@Article{seven_hundred_langs,
  author =       {Peter J. Landin},
  title =        {The next 700 programming languages},
  year =         1966,
  volume =       9,
  number =       3,
  pages =        {157-166},
  doi =          {10.1145/365230.365257},
  url =          {https://doi.org/10.1145/365230.365257},
  journal =      {Commun. {ACM}},
  timestamp =    {Wed, 14 Nov 2018 10:22:35 +0100},
  biburl =       {https://dblp.org/rec/bib/journals/cacm/Landin66},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Higher-order interpretations and program complexity:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Generalising%20Interpretations%20between%20Theories%20in%20the%20context%20of%20(pi-)%20Institutions][Generalising Interpretations between Theories in the context of (pi-) Institutions:1]]

@InProceedings{seven_hundred_libraries,
  author =       {Ant{\'{o}}nio Menezes Leit{\~{a}}o},
  title =        {The next 700 programming libraries},
  year =         2007,
  booktitle =    {International Lisp Conference, {ILC} 2007, Cambridge, UK,
                  April 1-4, 2007},
  pages =        21,
  doi =          {10.1145/1622123.1622147},
  url =          {https://doi.org/10.1145/1622123.1622147},
  crossref =     {DBLP:conf/lfp/2007},
  timestamp =    {Tue, 06 Nov 2018 16:58:56 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/lfp/Leitao07},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Generalising Interpretations between Theories in the context of (pi-) Institutions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Kripke%20semantics%20for%20dependent%20type%20theory%20and%20realizability%20interpretations][Kripke semantics for dependent type theory and realizability interpretations:1]]

@Article{seven_hundred_provers,
  author =       {Lawrence C. Paulson},
  title =        {Isabelle: The Next 700 Theorem Provers},
  year =         1993,
  volume =       {cs.LO/9301106},
  url =          {http://arxiv.org/abs/cs.LO/9301106},
  journal =      {CoRR},
  timestamp =    {Mon, 13 Aug 2018 16:48:11 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/corr/cs-LO-9301106},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Kripke semantics for dependent type theory and realizability interpretations:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Theories%20as%20Types%20:theories-as-types:][Theories as Types :theories-as-types::1]]

@InProceedings{seven_hundred_tt_models,
  author =       {Simon Boulier and Pierre{-}Marie P{\'{e}}drot and Nicolas
                  Tabareau},
  title =        {The next 700 syntactical models of type theory},
  year =         2017,
  booktitle =    {Proceedings of the 6th {ACM} {SIGPLAN} Conference on Certified
                  Programs and Proofs, {CPP} 2017, Paris, France, January 16-17,
                  2017},
  pages =        {182-194},
  doi =          {10.1145/3018610.3018620},
  url =          {https://doi.org/10.1145/3018610.3018620},
  timestamp =    {Tue, 06 Nov 2018 16:59:23 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/cpp/BoulierPT17},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Theories as Types :theories-as-types::1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20Scalable%20Module%20System][A Scalable Module System:1]]
@Online{mmt_main_paper,
  author       = {Florian Rabe AND Michael Kohlhase},
  title        = {{A Scalable Module System}},
  year         = 2011,
  archiveprefix= {arXiv},
  eprint       = {1105.0548v1},
  primaryclass = {cs.LO},
  url = {https://arxiv.org/abs/1105.0548}
}
%% A Scalable Module System:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*The%20MMT%20API:%20A%20Generic%20MKM%20System][The MMT API: A Generic MKM System:1]]
@Online{mmt_api,
  author       = {Florian Rabe},
  title        = {{The MMT API: A Generic MKM System}},
  year         = 2013,
  archiveprefix= {arXiv},
  eprint       = {1306.3199v1},
  primaryclass = {cs.LO}
}
%% The MMT API: A Generic MKM System:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Types%20and%20Programming%20Languages][Types and Programming Languages:1]]

@book{sicp,
  author =       {Harold Abelson and Gerald J. Sussman},
  title =        {Structure and Interpretation of Computer Programs, Second
                  Edition},
  publisher =    {{MIT} Press},
  year =         1996,
  isbn =         {0-262-01153-0},
  timestamp =    {Mon, 28 Jan 2002 16:12:01 +0100},
  biburl =       {https://dblp.org/rec/bib/books/mit/AbelsonS96},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Types and Programming Languages:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*An%20Analysis%20of%20Girard's%20Paradox][An Analysis of Girard's Paradox:1]]

@book{sop,
  author =       {David Gries},
  title =        {The Science of Programming},
  series =       {Texts and Monographs in Computer Science},
  publisher =    {Springer},
  year =         1981,
  url =          {https://doi.org/10.1007/978-1-4612-5983-1},
  doi =          {10.1007/978-1-4612-5983-1},
  isbn =         {978-0-387-96480-5},
  timestamp =    {Tue, 16 May 2017 14:01:46 +0200},
  biburl =       {https://dblp.org/rec/bib/books/sp/Gries81},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% An Analysis of Girard's Paradox:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20new%20type%20for%20tactics][A new type for tactics:1]]
@online{tacticstype,
  author = {Andrea Asperti and Wilmer Ricciotti and Claudio Sacerdoti Coen and Enrico Tassi},
  title = {A new type for tactics},
  url = {http://matita.cs.unibo.it/PAPERS/plmms09.pdf},
  urldate = {2018-10-19},
}
%% A new type for tactics:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Program%20Verification%20in%20{SPARK}%20and%20{ACSL}:%20A%20Comparative%20Case%20Study][Program Verification in {SPARK} and {ACSL}: A Comparative Case Study:1]]

@book{sop_cohen,
  author =       {Edward Cohen},
  title =        {Programming in the 1990s - An Introduction to the Calculation
                  of Programs},
  series =       {Texts and Monographs in Computer Science},
  publisher =    {Springer},
  year =         1990,
  url =          {https://doi.org/10.1007/978-1-4613-9706-9},
  doi =          {10.1007/978-1-4613-9706-9},
  isbn =         {978-0-387-97382-1},
  timestamp =    {Tue, 16 May 2017 14:24:21 +0200},
  biburl =       {https://dblp.org/rec/bib/series/mcs/Cohen90},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Program Verification in {SPARK} and {ACSL}: A Comparative Case Study:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Lemma%20Functions%20for%20Frama-C:%20{C}%20Programs%20as%20Proofs}][Lemma Functions for Frama-C: {C} Programs as Proofs}:1]]

@inproceedings{tactics,
  author =       {Kamal Aboul{-}Hosn},
  title =        {A Proof-Theoretic Approach to Tactics},
  booktitle =    {Mathematical Knowledge Management, 5th International
                  Conference, {MKM} 2006, Wokingham, UK, August 11-12, 2006,
                  Proceedings},
  pages =        {54--66},
  year =         2006,
  crossref =     {DBLP:conf/mkm/2006},
  url =          {https://doi.org/10.1007/11812289\_6},
  doi =          {10.1007/11812289\_6},
  timestamp =    {Fri, 02 Jun 2017 13:01:08 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/mkm/Aboul-Hosn06},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Lemma Functions for Frama-C: {C} Programs as Proofs}:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Crafting%20a%20Proof%20Assistant][Crafting a Proof Assistant:1]]

@book{tapl,
  author =       {Pierce, Benjamin C.},
  title =        {Types and Programming Languages},
  year =         2002,
  isbn =         {0262162091, 9780262162098},
  edition =      {1st},
  publisher =    {The MIT Press},
}
%% Crafting a Proof Assistant:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Efficient%20Ambiguous%20Parsing%20of%20Mathematical%20Formulae][Efficient Ambiguous Parsing of Mathematical Formulae:1]]

@InProceedings{theories-as-types,
  author =       {Dennis M{\"{u}}ller and Florian Rabe and Michael Kohlhase},
  title =        {Theories as Types},
  year =         2018,
  booktitle =    {Automated Reasoning - 9th International Joint Conference,
                  {IJCAR} 2018, Held as Part of the Federated Logic Conference,
                  FloC 2018, Oxford, UK, July 14-17, 2018, Proceedings},
  pages =        {575-590},
  doi =          {10.1007/978-3-319-94205-6\_38},
  url =          {https://doi.org/10.1007/978-3-319-94205-6\_38},
  timestamp =    {Mon, 09 Jul 2018 13:01:56 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/cade/MullerRK18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% Efficient Ambiguous Parsing of Mathematical Formulae:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*A%20compact%20kernel%20for%20the%20calculus%20of%20inductive%20constructions][A compact kernel for the calculus of inductive constructions:1]]

@inproceedings{theories_as_types,
  author =       {Dennis M{\"{u}}ller and Florian Rabe and Michael Kohlhase},
  title =        {Theories as Types},
  booktitle =    {Automated Reasoning - 9th International Joint Conference,
                  {IJCAR} 2018, Held as Part of the Federated Logic Conference,
                  FloC 2018, Oxford, UK, July 14-17, 2018, Proceedings},
  pages =        {575--590},
  year =         2018,
  crossref =     {DBLP:conf/cade/2018},
  url =          {https://doi.org/10.1007/978-3-319-94205-6\_38},
  doi =          {10.1007/978-3-319-94205-6\_38},
  timestamp =    {Mon, 09 Jul 2018 13:01:56 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/cade/MullerRK18},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% A compact kernel for the calculus of inductive constructions:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*{CASL:}%20the%20Common%20Algebraic%20Specification%20Language}][{CASL:} the Common Algebraic Specification Language}:1]]

@proceedings{theory_interpretations_farmer,
  author =       {William M. Farmer},
  title =        {Theory Interpretation in Simple Type Theory},
  year =         1993,
  month =        {September},
  Journal =      {International Workshop on Higher-Order Algebra, Logic, and
                  Term Rewriting},
  publisher =    {Springer-Verlag},
  ISBN =         {3-540-58233-9},
  url =          {http://imps.mcmaster.ca/doc/interpretations.pdf},
  keywords =     {theory interpretations; axiomatic method; interactive theorem
                  proving},
  abstract =     {Theory interpretation is a logical technique for relating one
                  axiomatic theory to another with important applications in
                  mathematics and computer science as well as in logic
                  itself. This paper presents a method for theory interpretation
                  in a version of simple type theory, called lutins, which
                  admits partial functions and subtypes. The method is patterned
                  on the standard approach to theory interpretation in
                  firstorder logic. Although the method is based on a
                  nonclassical version of simple type theory, it is intended as
                  a guide for theory interpretation in classical simple type
                  theories as well as in predicate logics with partial
                  functions.},
  note =         {Theory interpretations formalise folklore of subtheories
                  inheriting properties from parent theories such as
                  satisfiability and consistency.  The idea of interpreting a
                  theory into itself is commonly done in the RATH-Agda project,
                  for example, to obtain dual results such as those for lattices
                  and other categorical structures.  },
}
%% {CASL:} the Common Algebraic Specification Language}:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Casl%20User%20Manual%20-%20Introduction%20to%20Using%20the%20Common][Casl User Manual - Introduction to Using the Common:1]]

@Article{tpc,
  author =       {Carette, Jacques and O’Connor, Russell},
  title =        {Theory Presentation Combinators},
  year =         2012,
  pages =        {202–215},
  doi =          {10.1007/978-3-642-31374-5_14},
  journal =      {Intelligent Computer Mathematics},
  publisher =    {Springer Berlin Heidelberg}
}
%% Casl User Manual - Introduction to Using the Common:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*{CASL}%20Reference%20Manual,%20The%20Complete%20Documentation][{CASL} Reference Manual, The Complete Documentation:1]]

@inproceedings{translating_cl_to_il,
  author =       {Gilda Ferreira and Paulo Oliva},
  title =        {On Various Negative Translations},
  booktitle =    {Proceedings Third International Workshop on Classical Logic
                  and Computation, CL{\&}C 2010, Brno, Czech Republic, 21-22
                  August 2010.},
  pages =        {21--33},
  year =         2010,
  crossref =     {DBLP:journals/corr/abs-1101-5200},
  url =          {https://doi.org/10.4204/EPTCS.47.4},
  doi =          {10.4204/EPTCS.47.4},
  timestamp =    {Wed, 12 Sep 2018 01:05:15 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/corr/abs-1101-5442},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}
%% {CASL} Reference Manual, The Complete Documentation:1 ends here

%% [[file:~/thesis-proposal/papers/References.org::*Compcert%20reference][Compcert reference:1]]

@article{tt_in_colour,
  author =       {Bernardy, Jean-Philippe and Guilhem, Moulin},
  title =        {Type-theory in Color},
  journal =      {SIGPLAN Not.},
  issue_date =   {September 2013},
  volume =       48,
  number =       9,
  month =        sep,
  year =         2013,
  issn =         {0362-1340},
  pages =        {61--72},
  numpages =     12,
  url =          {http://doi.acm.org/10.1145/2544174.2500577},
  doi =          {10.1145/2544174.2500577},
  acmid =        2500577,
  publisher =    {ACM},
  address =      {New York, NY, USA},
  keywords =     {erasure, parametricity, type-theory},
}
%% Compcert reference:1 ends here

@Article{twelf_proves_tp_correctness,
  author =       {Andrew W. Appel and Amy P. Felty},
  title =        {Dependent types ensure partial correctness of theorem provers},
  year =         2004,
  volume =       14,
  number =       1,
  pages =        {3-19},
  doi =          {10.1017/S0956796803004921},
  url =          {https://doi.org/10.1017/S0956796803004921},
  journal =      {J. Funct. Program.},
  timestamp =    {Sat, 27 May 2017 14:24:34 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/jfp/AppelF04},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@article{typeclasses_for_maths,
  author =       {Bas Spitters and Eelis van der Weegen},
  title =        {Type classes for mathematics in type theory},
  journal =      {Mathematical Structures in Computer Science},
  volume =       21,
  number =       4,
  pages =        {795--825},
  year =         2011,
  url =          {https://doi.org/10.1017/S0960129511000119},
  doi =          {10.1017/S0960129511000119},
  timestamp =    {Wed, 14 Jun 2017 20:39:05 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/mscs/SpittersW11},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{types_for_modules,
  author =       {Derek Dreyer and Karl Crary and Robert Harper},
  title =        {A type system for higher-order modules},
  year =         2003,
  booktitle =    {Conference Record of {POPL} 2003: The 30th {SIGPLAN-SIGACT}
                  Symposium on Principles of Programming Languages, New Orleans,
                  Louisisana, USA, January 15-17, 2003},
  pages =        {236-249},
  doi =          {10.1145/640128.604151},
  url =          {https://doi.org/10.1145/640128.604151},
  timestamp =    {Tue, 06 Nov 2018 11:07:43 +0100},
  biburl =       {https://dblp.org/rec/bib/conf/popl/DreyerCH03},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{uip_problem,
  author =       {Martin Hofmann and Thomas Streicher},
  title =        {The Groupoid Model Refutes Uniqueness of Identity Proofs},
  booktitle =    {Proceedings of the Ninth Annual Symposium on Logic in Computer
                  Science {(LICS} '94), Paris, France, July 4-7, 1994},
  pages =        {208--212},
  year =         1994,
  crossref =     {DBLP:conf/lics/1994},
  url =          {https://doi.org/10.1109/LICS.1994.316071},
  doi =          {10.1109/LICS.1994.316071},
  timestamp =    {Thu, 25 May 2017 00:42:41 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/lics/HofmannS94},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@phdthesis{uip_streicher,
  author =       {Thomas Streicher},
  title =        {Investigations Into Intensional Type Theory },
  year =         1993,
  url =
                  {https://www2.mathematik.tu-darmstadt.de/~streicher/HabilStreicher.pdf},
}

@article{uip_strength,
  author =       {Benjamin Werner},
  title =        {On the Strength of Proof-irrelevant Type Theories},
  journal =      {Logical Methods in Computer Science},
  volume =       4,
  number =       3,
  year =         2008,
  url =          {https://doi.org/10.2168/LMCS-4(3:13)2008},
  doi =          {10.2168/LMCS-4(3:13)2008},
  timestamp =    {Sat, 20 May 2017 00:22:52 +0200},
  biburl =       {https://dblp.org/rec/bib/journals/lmcs/Werner08},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{undecidability_of_typing,
  author =       {Gilles Dowek},
  title =        {The Undecidability of Typability in the Lambda-Pi-Calculus},
  booktitle =    {Typed Lambda Calculi and Applications, International
                  Conference on Typed Lambda Calculi and Applications, {TLCA}
                  '93, Utrecht, The Netherlands, March 16-18, 1993, Proceedings},
  pages =        {139--145},
  year =         1993,
  crossref =     {DBLP:conf/tlca/1993},
  url =          {https://doi.org/10.1007/BFb0037103},
  doi =          {10.1007/BFb0037103},
  timestamp =    {Sat, 20 May 2017 15:32:50 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/tlca/Dowek93},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{understanding_typescript,
  author =       {Gavin M. Bierman and Mart{\'{\i}}n Abadi and Mads Torgersen},
  title =        {Understanding TypeScript},
  year =         2014,
  booktitle =    {{ECOOP} 2014 - Object-Oriented Programming - 28th European
                  Conference, Uppsala, Sweden, July 28 - August 1,
                  2014. Proceedings},
  pages =        {257-281},
  doi =          {10.1007/978-3-662-44202-9\_11},
  url =          {https://doi.org/10.1007/978-3-662-44202-9\_11},
  timestamp =    {Tue, 18 Jul 2017 16:43:00 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/ecoop/BiermanAT14},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{why_dependent_types_matter,
  author =       {James McKinna},
  title =        {Why dependent types matter},
  booktitle =    {Proceedings of the 33rd {ACM} {SIGPLAN-SIGACT} Symposium on
                  Principles of Programming Languages, {POPL} 2006, Charleston,
                  South Carolina, USA, January 11-13, 2006},
  pages =        1,
  year =         2006,
  crossref =     {DBLP:conf/popl/2006},
  url =          {http://doi.acm.org/10.1145/1111037.1111038},
  doi =          {10.1145/1111037.1111038},
  timestamp =    {Tue, 22 May 2012 15:24:56 +0200},
  biburl =       {https://dblp.org/rec/bib/conf/popl/McKinna06},
  bibsource =    {dblp computer science bibliography, https://dblp.org}
}

@article{zipper,
  author =       {Huet, G{\'e}rard},
  title =        {The Zipper},
  journal =      {J. Funct. Program.},
  issue_date =   {September 1997},
  volume =       7,
  number =       5,
  month =        sep,
  year =         1997,
  issn =         {0956-7968},
  pages =        {549--554},
  numpages =     6,
  url =          {http://dx.doi.org/10.1017/S0956796897002864},
  doi =          {10.1017/S0956796897002864},
  acmid =        969872,
  publisher =    {Cambridge University Press},
  address =      {New York, NY, USA},
  abstract =     {Almost every programmer has faced the problem of representing
                  a tree together with a subtree that is the focus of attention,
                  where that focus may move left, right, up or down the
                  tree. The Zipper is Huet's nifty name for a nifty data
                  structure which fulfills this need. I wish I had known of it
                  when I faced this task, because the solution I came up with
                  was not quite so efficient or elegant as the Zipper.},
  keywords =     {functional programming, zipper},
  note =         { A succinct introduction to focusing onto particular
                  neighbourhoods within a data structure is provided. Along with
                  the definitions of primitives to move up and down the
                  structure. Then the results are generalised to first order
                  terms, thereby providing a notion of neighbourhood-focusing
                  for terms formed from a given signature. Neat stuff.  },
}

@online{EWD:EWD1300,
   author = {Edsger W. Dijkstra},
   title = {The notational conventions I adopted, and why},
   month = jul,
   year = 2000,
   note = {circulated privately},
   url = {http://www.cs.utexas.edu/users/EWD/ewd13xx/EWD1300.PDF},
   urldate = {2020-11-2},
   }
